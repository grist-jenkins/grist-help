{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Grist! # Grist is a software product to organize, analyze, and share data. Grist Overview Demo Grist combines the best of spreadsheets and databases. Grist lets you work with simple grids and lists, and is at its best when data gets more complex. To sign up and start using Grist, visit https://docs.getgrist.com . To learn Grist, we recommend starting with our How-To tutorials, or our Intro videos. How-To Tutorials # Create a custom CRM . Using the \u201cLightweight CRM\u201d example, learn to link data, and create high-productivity layouts. Analyze and visualize data . Using the \u201cInvestment Research\u201d example, learn to create summary tables and charts, and link charts dynamically. Managing business data . Using the \u201cAfterschool Program\u201d example, learn to model business data, use formulas, and manage complexity. Intro Videos # Creating a doc Pages & widgets Columns & types Reference columns Linking widgets Sharing a doc Popular shortcuts # Frequently Asked Questions Function reference Keyboard shortcuts Contact us # Email: support@getgrist.com If you have questions not answered here, problem reports, or other feedback, please contact us! While using Grist, you can use the Give feedback link in the bottom left corner. Or email us at support@getgrist.com .","title":"Welcome to Grist"},{"location":"#welcome-to-grist","text":"Grist is a software product to organize, analyze, and share data. Grist Overview Demo Grist combines the best of spreadsheets and databases. Grist lets you work with simple grids and lists, and is at its best when data gets more complex. To sign up and start using Grist, visit https://docs.getgrist.com . To learn Grist, we recommend starting with our How-To tutorials, or our Intro videos.","title":""},{"location":"#how-to-tutorials","text":"Create a custom CRM . Using the \u201cLightweight CRM\u201d example, learn to link data, and create high-productivity layouts. Analyze and visualize data . Using the \u201cInvestment Research\u201d example, learn to create summary tables and charts, and link charts dynamically. Managing business data . Using the \u201cAfterschool Program\u201d example, learn to model business data, use formulas, and manage complexity.","title":"How-To Tutorials"},{"location":"#intro-videos","text":"Creating a doc Pages & widgets Columns & types Reference columns Linking widgets Sharing a doc","title":"Intro Videos"},{"location":"#popular-shortcuts","text":"Frequently Asked Questions Function reference Keyboard shortcuts","title":"Popular shortcuts"},{"location":"#contact-us","text":"Email: support@getgrist.com If you have questions not answered here, problem reports, or other feedback, please contact us! While using Grist, you can use the Give feedback link in the bottom left corner. Or email us at support@getgrist.com .","title":"Contact us"},{"location":"FAQ/","text":"Frequently Asked Questions # Frequently Asked Questions Accounts Can I add multiple teams to the same Grist account? Can I add multiple login accounts to Grist? How can I change the email address I use for Grist? Plans Why do I have multiple sites? How to manage ownership of my team site? Can I edit my team\u2019s name and subdomain? Documents and data Can I move documents between sites? How many rows can I have? Does Grist accept non-English characters? How do I sum the total of a column? Sharing What does Team (+2 Per Doc) mean? Can I only share Grist documents with my team? Grist and your website/app Can I embed Grist into my website? Can I use Grist as the backend of my web app? Accounts # Can I add multiple teams to the same Grist account? # Yes! New team site. If you\u2019re looking to create a new team site that does not exist, navigate to your personal site at docs.getgrist.com , then open the user menu by clicking on the profile icon in the top-right of Grist. Click on \u201cUpgrade Plan.\u201d Adding account to team site. You may own or be a member of multiple teams. If you have multiple Grist login accounts, you may also add your second account as a team member. While in the team site you own, open the user menu and click on Manage Users. Did you know? You can sign in to Grist with multiple email accounts. Open the user menu and click on \u201cAdd Account.\u201d You can now easily switch between all your accounts, and all your teams, from the user menu. Can I add multiple login accounts to Grist? # Yes! To add multiple accounts to Grist, open the user menu by clicking on the profile icon in the top-right of Grist, then click on \u201cAdd Account.\u201d You can now easily switch between all your accounts, and all your teams, from the user menu. How can I change the email address I use for Grist? # It is not possible to change the email associated with your Grist account. However, it it possible to transfer ownership of documents and team sites between two Grist email accounts that you own. This would effectively change your Grist email. Learn how . It is possible to manage multiple accounts in Grist. To add another account, open the user menu by clicking on the profile icon in the top-right of Grist, then click on \u201cAdd Account.\u201d You can now easily switch between all your accounts, and all your teams, from the user menu. Plans # Why do I have multiple sites? # All Grist users have access to a free personal account. The personal site is always named beginning with @ and is always located at docs.getgrist.com . This account may have up to 10 documents. Each one of those documents may be shared with up to two collaborators for free. Learn more about free plans on our pricing page . Documents shared with you will be shown in your personal site and do not count against the 10 document limit. You may navigate between your personal site and team sites by clicking in the top-left corner to open a drop-down menu of sites to which you have access. How to manage ownership of my team site? # Add a second owner Open the team site to which you want add a second owner. Click \u201cManage Users\u201d under the user menu by clicking on the profile icon in the top-right of Grist. Add the new email address as Owner, and click Confirm. You may also wish to go to \u201cBilling Account\u201d (also under the user menu) and add the new owner as a Billing Manager. Transfer ownership Follow steps 1-3 above to add a second owner. Go to \u201cBilling Account\u201d (also under the user menu) and add the new Owner as a Billing Manager . The new Owner should log in, open the team site, and visit \u201cManage Users\u201d and \u201cBilling Account\u201d pages again to remove the original owner. This will essentially transfer the ownership of the team site to the new account. It is not possible to add a second owner to, or transfer ownership of, a personal account . Did you know? If you\u2019re transferring team site ownership between two Grist email accounts that you own, you can more easily transfer ownership by signing in with multiple accounts. To sign in with another account, open the user menu and click on \u201cAdd Account.\u201d You can now easily switch between all your accounts, and all your teams, from the user menu. Follow the steps above to transfer ownership from one account to the other. Can I edit my team\u2019s name and subdomain? # You may edit your site name and subdomain from the billing page. Open the user menu by clicking on the profile icon in the top-right of Grist, then click on \u201cBilling Account.\u201d Documents and data # Can I move documents between sites? # Yes! Follow these steps to move documents between sites. Open the document you wish to move and click on the share icon ( ), then click \u201cDuplicate Document\u201d in the menu. Select the site (organization) to which you want to transfer the document. This will create a copy, so you\u2019ll still have the original document in your original site. You can always delete it. Learn more about copying documents . How many rows can I have? # As a rule of thumb, Grist works best for documents under 100,000 rows. The actual limit depends also on the number of tables, columns, and the average size of data in each cell. One way to estimate it is to measure the size of the data when it is in CSV format: the limit is around 20MB in this format. For example, a document with 200,000 rows and 12 numeric columns would reach that. Attachments are counted separately. Attachments plus data in a single document are limited to 1GB. Learn more about limits . Does Grist accept non-English characters? # Non-English characters are supported in column labels, but not column ids, which are the column\u2019s Python name used in formulas. When importing a file into Grist, non-English characters do import as values in cells, but do not import into column labels (aka headers). The column labels are approximated with English characters. You may rename the column labels to include non-English characters after import. To edit column labels and ids separately, open the creator panel and select the column menu. Click the link icon that joins label to id to enable column id editing. While non-English characters are not supported, it is possible to edit the ids into something more clear and friendly to use in formulas. How do I sum the total of a column? # To summarize multiple records, you need summary tables . The major difference between Grist and spreadsheets like Excel or Google Sheets is that Grist is a database, so each row in a grid represents a record (e.g. a person, a bank transaction, etc.) Since a sum across multiple records isn\u2019t the same kind of record, Grist offers summarizing data as a separate widget, which can be modified to calculate even more powerful summary data. For example, suppose you have a table of webstore orders called Orders and you want to sum sales revenue from all orders. At the top of the left-side menu, click \u201cAdd New\u201d button and select \u201cAdd Page\u201d or \u201cAdd Widget to Page\u201d. In the widget picker, select the Orders table then click the summation icon ( ) next to it. Add the page or widget to your document. Done! You\u2019ve now created a summary table that by default counts all the records in the Orders table, and sums all numeric and integer columns, such as the amount sold in each order. Summary tables can do more than a sum of a tables\u2019 columns. With just a few clicks you can summarize orders by month to calculate the number of orders and total sales revenue in each month for which you have data. Take it a step further and suppose you have multiple webstores. With Grist, you can record all sales orders across all stores and months in the same table. Then, you can summarize by month and webstore. When you add more months (or stores!) to the orders table, the summary table will automatically update, which is another key difference with spreadsheets. In Excel, you would need to expand your formula\u2019s range, or add more sheets and modify formulas everytime you added more sales orders, months, or stores. In Grist, you create the summary table once, and let Grist do the future work for you. In addition to our summary tables article, we have a video tutorial and follow-along guide that provides an example in building a dashboard with summary tables. Sharing # What does Team (+2 Per Doc) mean? # Team members all have access to a team site , which is located at a url with a custom subdomain, such as your-company.getgrist.com . The team plan costs $8/month/team member. Team site owners may open the Billing Account page to manage payment and edit plan managers. By default, documents within a team site may be accessed by all team members. This default can be modified to only share certain documents or certain workspaces with specific team members. At the document level, you may choose to share a document with up to 2 outside collaborators (non-team members) at no additional cost. For example, say Wiley Co. has a team site with 5 team members. They pay $40 per month to collaborate in Grist on an unlimited number of documents. Wiley Co. sometimes works with a contractor on a project, a company called Roadrunner. Wiley Co. shares one of their documents with 2 Roadrunner employees at no additional cost. Those two document-level shares are considered outside collaborators, or guests. Wiley Co. sometimes works with a second contractor, a company called ACME. Wiley Co. shares one of their documents with 2 ACME employees at no additional cost. Wiley Co. has four outside collaborators, or guests, but since there are at most 2 per document, there is no additional cost. Can I only share Grist documents with my team? # There are many ways to share Grist data with non-team members. Outside collaborators. Each document may be shared with 2 outside collaborators (non-team members) at no additional cost. Link Sharing. In share settings, there is an option to turn on public access . The public access role can be set to viewer or editor. Anyone with a link can view (or edit) your data. Those views would not count towards your plan\u2019s user count. The document is visible to anyone with the link, however, so use caution when working with sensitive data. Restricted View-only link sharing. With view-only link sharing, there is a way to further restrict what people can see by using Grist\u2019s access rules to set specific URL parameters called link keys that determine which tables, columns, or rows are shown when a specific link is shared. View-only Embed. Grist pages can be embedded into websites in an iframe. Learn how. Grist and your website/app # Can I embed Grist into my website? # Yes, it is possible to embed Grist pages as view-only data in a website in an iframe. <iframe src=\"https://templates.getgrist.com/6D8E2h2DQNwS/Task-Management/p/6?embed=true></iframe> Replace the url written in the code above with the URL of the Grist page you wish to embed, follow by ?embed=true at the end of the url. Learn more about embedding Grist . Can I use Grist as the backend of my web app? # Using Grist as a backend solution directly to a website or web app is not yet supported. We don\u2019t yet have an authentication method for this use case. The API key method isn\u2019t generally appropriate for web use, because the key would end up accessible to any viewer of the webpage, which is usually undesirable. We are interested in supporting this in the future and welcome ideas and feedback in our community forum .","title":"FAQ"},{"location":"FAQ/#frequently-asked-questions","text":"Frequently Asked Questions Accounts Can I add multiple teams to the same Grist account? Can I add multiple login accounts to Grist? How can I change the email address I use for Grist? Plans Why do I have multiple sites? How to manage ownership of my team site? Can I edit my team\u2019s name and subdomain? Documents and data Can I move documents between sites? How many rows can I have? Does Grist accept non-English characters? How do I sum the total of a column? Sharing What does Team (+2 Per Doc) mean? Can I only share Grist documents with my team? Grist and your website/app Can I embed Grist into my website? Can I use Grist as the backend of my web app?","title":"Frequently Asked Questions"},{"location":"FAQ/#accounts","text":"","title":"Accounts"},{"location":"FAQ/#can-i-add-multiple-teams-to-the-same-grist-account","text":"Yes! New team site. If you\u2019re looking to create a new team site that does not exist, navigate to your personal site at docs.getgrist.com , then open the user menu by clicking on the profile icon in the top-right of Grist. Click on \u201cUpgrade Plan.\u201d Adding account to team site. You may own or be a member of multiple teams. If you have multiple Grist login accounts, you may also add your second account as a team member. While in the team site you own, open the user menu and click on Manage Users. Did you know? You can sign in to Grist with multiple email accounts. Open the user menu and click on \u201cAdd Account.\u201d You can now easily switch between all your accounts, and all your teams, from the user menu.","title":"Can I add multiple teams to the same Grist account?"},{"location":"FAQ/#can-i-add-multiple-login-accounts-to-grist","text":"Yes! To add multiple accounts to Grist, open the user menu by clicking on the profile icon in the top-right of Grist, then click on \u201cAdd Account.\u201d You can now easily switch between all your accounts, and all your teams, from the user menu.","title":"Can I add multiple login accounts to Grist?"},{"location":"FAQ/#how-can-i-change-the-email-address-i-use-for-grist","text":"It is not possible to change the email associated with your Grist account. However, it it possible to transfer ownership of documents and team sites between two Grist email accounts that you own. This would effectively change your Grist email. Learn how . It is possible to manage multiple accounts in Grist. To add another account, open the user menu by clicking on the profile icon in the top-right of Grist, then click on \u201cAdd Account.\u201d You can now easily switch between all your accounts, and all your teams, from the user menu.","title":"How can I change the email address I use for Grist?"},{"location":"FAQ/#plans","text":"","title":"Plans"},{"location":"FAQ/#why-do-i-have-multiple-sites","text":"All Grist users have access to a free personal account. The personal site is always named beginning with @ and is always located at docs.getgrist.com . This account may have up to 10 documents. Each one of those documents may be shared with up to two collaborators for free. Learn more about free plans on our pricing page . Documents shared with you will be shown in your personal site and do not count against the 10 document limit. You may navigate between your personal site and team sites by clicking in the top-left corner to open a drop-down menu of sites to which you have access.","title":"Why do I have multiple sites?"},{"location":"FAQ/#how-to-manage-ownership-of-my-team-site","text":"Add a second owner Open the team site to which you want add a second owner. Click \u201cManage Users\u201d under the user menu by clicking on the profile icon in the top-right of Grist. Add the new email address as Owner, and click Confirm. You may also wish to go to \u201cBilling Account\u201d (also under the user menu) and add the new owner as a Billing Manager. Transfer ownership Follow steps 1-3 above to add a second owner. Go to \u201cBilling Account\u201d (also under the user menu) and add the new Owner as a Billing Manager . The new Owner should log in, open the team site, and visit \u201cManage Users\u201d and \u201cBilling Account\u201d pages again to remove the original owner. This will essentially transfer the ownership of the team site to the new account. It is not possible to add a second owner to, or transfer ownership of, a personal account . Did you know? If you\u2019re transferring team site ownership between two Grist email accounts that you own, you can more easily transfer ownership by signing in with multiple accounts. To sign in with another account, open the user menu and click on \u201cAdd Account.\u201d You can now easily switch between all your accounts, and all your teams, from the user menu. Follow the steps above to transfer ownership from one account to the other.","title":"How to manage ownership of my team site?"},{"location":"FAQ/#can-i-edit-my-teams-name-and-subdomain","text":"You may edit your site name and subdomain from the billing page. Open the user menu by clicking on the profile icon in the top-right of Grist, then click on \u201cBilling Account.\u201d","title":"Can I edit my team\u2019s name and subdomain?"},{"location":"FAQ/#documents-and-data","text":"","title":"Documents and data"},{"location":"FAQ/#can-i-move-documents-between-sites","text":"Yes! Follow these steps to move documents between sites. Open the document you wish to move and click on the share icon ( ), then click \u201cDuplicate Document\u201d in the menu. Select the site (organization) to which you want to transfer the document. This will create a copy, so you\u2019ll still have the original document in your original site. You can always delete it. Learn more about copying documents .","title":"Can I move documents between sites?"},{"location":"FAQ/#how-many-rows-can-i-have","text":"As a rule of thumb, Grist works best for documents under 100,000 rows. The actual limit depends also on the number of tables, columns, and the average size of data in each cell. One way to estimate it is to measure the size of the data when it is in CSV format: the limit is around 20MB in this format. For example, a document with 200,000 rows and 12 numeric columns would reach that. Attachments are counted separately. Attachments plus data in a single document are limited to 1GB. Learn more about limits .","title":"How many rows can I have?"},{"location":"FAQ/#does-grist-accept-non-english-characters","text":"Non-English characters are supported in column labels, but not column ids, which are the column\u2019s Python name used in formulas. When importing a file into Grist, non-English characters do import as values in cells, but do not import into column labels (aka headers). The column labels are approximated with English characters. You may rename the column labels to include non-English characters after import. To edit column labels and ids separately, open the creator panel and select the column menu. Click the link icon that joins label to id to enable column id editing. While non-English characters are not supported, it is possible to edit the ids into something more clear and friendly to use in formulas.","title":"Does Grist accept non-English characters?"},{"location":"FAQ/#how-do-i-sum-the-total-of-a-column","text":"To summarize multiple records, you need summary tables . The major difference between Grist and spreadsheets like Excel or Google Sheets is that Grist is a database, so each row in a grid represents a record (e.g. a person, a bank transaction, etc.) Since a sum across multiple records isn\u2019t the same kind of record, Grist offers summarizing data as a separate widget, which can be modified to calculate even more powerful summary data. For example, suppose you have a table of webstore orders called Orders and you want to sum sales revenue from all orders. At the top of the left-side menu, click \u201cAdd New\u201d button and select \u201cAdd Page\u201d or \u201cAdd Widget to Page\u201d. In the widget picker, select the Orders table then click the summation icon ( ) next to it. Add the page or widget to your document. Done! You\u2019ve now created a summary table that by default counts all the records in the Orders table, and sums all numeric and integer columns, such as the amount sold in each order. Summary tables can do more than a sum of a tables\u2019 columns. With just a few clicks you can summarize orders by month to calculate the number of orders and total sales revenue in each month for which you have data. Take it a step further and suppose you have multiple webstores. With Grist, you can record all sales orders across all stores and months in the same table. Then, you can summarize by month and webstore. When you add more months (or stores!) to the orders table, the summary table will automatically update, which is another key difference with spreadsheets. In Excel, you would need to expand your formula\u2019s range, or add more sheets and modify formulas everytime you added more sales orders, months, or stores. In Grist, you create the summary table once, and let Grist do the future work for you. In addition to our summary tables article, we have a video tutorial and follow-along guide that provides an example in building a dashboard with summary tables.","title":"How do I sum the total of a column?"},{"location":"FAQ/#sharing","text":"","title":"Sharing"},{"location":"FAQ/#what-does-team-2-per-doc-mean","text":"Team members all have access to a team site , which is located at a url with a custom subdomain, such as your-company.getgrist.com . The team plan costs $8/month/team member. Team site owners may open the Billing Account page to manage payment and edit plan managers. By default, documents within a team site may be accessed by all team members. This default can be modified to only share certain documents or certain workspaces with specific team members. At the document level, you may choose to share a document with up to 2 outside collaborators (non-team members) at no additional cost. For example, say Wiley Co. has a team site with 5 team members. They pay $40 per month to collaborate in Grist on an unlimited number of documents. Wiley Co. sometimes works with a contractor on a project, a company called Roadrunner. Wiley Co. shares one of their documents with 2 Roadrunner employees at no additional cost. Those two document-level shares are considered outside collaborators, or guests. Wiley Co. sometimes works with a second contractor, a company called ACME. Wiley Co. shares one of their documents with 2 ACME employees at no additional cost. Wiley Co. has four outside collaborators, or guests, but since there are at most 2 per document, there is no additional cost.","title":"What does Team (+2 Per Doc) mean?"},{"location":"FAQ/#can-i-only-share-grist-documents-with-my-team","text":"There are many ways to share Grist data with non-team members. Outside collaborators. Each document may be shared with 2 outside collaborators (non-team members) at no additional cost. Link Sharing. In share settings, there is an option to turn on public access . The public access role can be set to viewer or editor. Anyone with a link can view (or edit) your data. Those views would not count towards your plan\u2019s user count. The document is visible to anyone with the link, however, so use caution when working with sensitive data. Restricted View-only link sharing. With view-only link sharing, there is a way to further restrict what people can see by using Grist\u2019s access rules to set specific URL parameters called link keys that determine which tables, columns, or rows are shown when a specific link is shared. View-only Embed. Grist pages can be embedded into websites in an iframe. Learn how.","title":"Can I only share Grist documents with my team?"},{"location":"FAQ/#grist-and-your-websiteapp","text":"","title":"Grist and your website/app"},{"location":"FAQ/#can-i-embed-grist-into-my-website","text":"Yes, it is possible to embed Grist pages as view-only data in a website in an iframe. <iframe src=\"https://templates.getgrist.com/6D8E2h2DQNwS/Task-Management/p/6?embed=true></iframe> Replace the url written in the code above with the URL of the Grist page you wish to embed, follow by ?embed=true at the end of the url. Learn more about embedding Grist .","title":"Can I embed Grist into my website?"},{"location":"FAQ/#can-i-use-grist-as-the-backend-of-my-web-app","text":"Using Grist as a backend solution directly to a website or web app is not yet supported. We don\u2019t yet have an authentication method for this use case. The API key method isn\u2019t generally appropriate for web use, because the key would end up accessible to any viewer of the webpage, which is usually undesirable. We are interested in supporting this in the future and welcome ideas and feedback in our community forum .","title":"Can I use Grist as the backend of my web app?"},{"location":"access-rules/","text":"Access rules # Access rules are an experimental feature The design of access rules is likely to evolve, and sometimes that will require updates to documents that use them. We won\u2019t make such changes lightly. Every Grist document can be shared with others using the Manage Users option in the sharing menu ( ). Users can be invited as Viewers, Editors, or Owners (see Sharing a document for a refresher on those roles). Sometimes, you need more nuance about who can see or edit individual parts of a document. Access rules give us that power. Only the owners of a document can edit its access rules. When a document is loaded, owners see a tool called Access Rules in the left side bar. Click on that to view and edit access rules. The rules are also accessible via the Manage Users option of the sharing menu with the Open Access Rules button (available only to document Owners). Suppose we run a small business sourcing and delivering unusual objects, organized using a document with two tables, Orders and Financials . Now we are taking on more employees, and want to share the document with them while limiting their access to just what they need. Default rules # To see the access rules for a document, visit its access rules page by clicking Access Rules in the left sidebar. When no custom rules have been created yet, the access rules page contains the Default Rules for our document: These rules say, in summary, that Owners and Editors can do anything within the document, that Viewers can only read the document, and everyone else is forbidden all access. These rules cannot be modified, but they can be overridden. To understand whether a group of rules allows a certain permission ( Read, Update, Create, Delete, or Structure ), read the rules from top to bottom, and find the first applicable rule that allows (green) or denies (red) that permission. We\u2019ll see plenty of examples as we go. Lock down structure # By default Owners and Editors are equally powerful within a document, with the ability to create or delete tables or columns, write formulas, reorganize pages, and so on. Suppose we want only the original Owners of the document to be allowed to change its structure, as we plan to invite other specialized collaborators as Editors. To do this, we add a default rule specifying that any user who is not an owner ( user.Access != OWNER ) should be denied structure permissions ( S ). Click the little + sign in the CONDITION of the Default Rules and fill in the condition and permissions as follows: For more information about possible formulas, read Access rule conditions . Once we\u2019ve made changes, the SAVE button becomes an inviting green (if is grayed out, and you\u2019ve just composed a condition formula, press enter or click elsewhere to let Grist know you are finished). We click SAVE for the rule to take effect. If Grist finds errors, you\u2019ll be alerted and the changes will not save. Important. This is an important first step for any document where you intend to block any access to Editors. Without denying them the structure permission ( S ), anyone with edit access will be able to create or change formulas. Since formula calculations are not limited by access control rules, a determined user could use them to retrieve any data from a document. To protect against that, deny structure permission to users whose access should be limited. Make a private table # To ensure that only Owners can access a table, such as the Financials table in our example, we click Add Table Rules and select the table name, Financials . This creates a new empty group of rules called Rules for table Financials . Then we add a condition for any user who is not an Owner ( user.Access != OWNER ), with all permissions denied. Selecting Deny All from the drop-down beside R U C D is a fast way to set all permissions to denied, or you can click each permission individually to turn them red. R is Read, U is Update, C is Create, and D is Delete (see Access rule permissions ). Structure ( S ) permissions are not available at the table level. Once you are done, click SAVE . Now we could go ahead and share the document with a team member specialized in deliveries, for example. We share the document with them as an Editor so that the restrictions we\u2019ve set up apply to them. They won\u2019t see the Financials table in the left side bar, and attempts to open it will be denied: Restrict access to columns # We can restrict a collaborator\u2019s access to columns. In our eample, we might wish to give a delivery specialist more limited access to the Orders table. Perhaps they don\u2019t need to see an Email column, or a Piece column with details of what is in the parcel. Click Add Table Rules and select Orders to create a rule group for the Orders table. Now, in the Rules for table Orders group, click the three-dot icon (\u2026), and select Add Column Rule : In the Columns area we have a new [Add Column] dropdown to add all the columns to which we want the rule to apply (in our case Email and Piece ). For the condition, we culd use user.Email == 'kiwi@getgrist.com' . This checks for the email address of Kimberly, our fictional delivery specialist; we could also check by name or a numeric ID. We turn all available permissions off for this user on these columns: Now that the rules are ready, click Save . If we have another employee who specializes in sourcing objects, and who needs to see a different set of columns, we can do that. For example here we add a rule to withhold Address and Phone columns from user Charon : View as another user # A convenient way to check if access rules work as expected is with the View As feature, available in the Users dropdown. This allows an Owner to open the document as if they were one of the people it is shared with, to see what their colleague would see. The Owner does not \u201cbecome\u201d that colleague - any changes they make will be recorded as coming from themselves and not the colleague - but they do see the document from the colleague\u2019s perspective. In our example, we could click View As on the Kiwi row, and the document reopens, with a little red tag warning that we are viewing it as kiwi@getgrist.com . The Piece and Email columns are missing, and the Financials table is surpressed: When satisfied that everything looks as expected, we click the x in the red tag to close this preview, and the document will reload. User attribute tables # If we are successful and hire many sourcing and delivery people, then adding them one by one to rules would be tedious. One solution is to use \u201cuser attribute tables.\u201d You can add a table to your document that classifies users as you like, and then use those classes in your access rules. For example, we can make a table called Team , and give it two columns, Email and Role , where Role is a choice between Sourcing and Delivery . Now we can tell Grist to make information from this table available for access rules, by clicking on Add User Attributes . Give the attribute any name you like (this will be how we refer to it in formulas), such as Team . Pick the table to read ( Team also in this case). Give a user property to match against rows in this table - in our case we\u2019ll use user.Email . And the column to match against, Email . Save that. Now we can update our rules to be more general. We find with autocomplete that we have a new user.Team variable available in condtions. It makes columns from the Team available, such as user.Team.Role . Now we can check if the user has a particular role, and apply the permissions that go with that: Great! Doing a spot check, Charon sees the expected columns for someone in Sourcing. And if we recruit someone else to work with them, we can just add them in the Team table, no rule changes needed. Row-level access control # In our example, as orders are processed, they move from sourcing to delivery phases. So there\u2019s really no need for the two groups to see all the orders at once. Let\u2019s add a column called Stage that can be set to Sourcing or Delivery , so that we can update access rules to show only the relevant orders. In the Rules for table Orders group, click the three-dot icon (\u2026), and select Add Default Rule to add a rule that isn\u2019t limited to specific columns. Let\u2019s deny access to all rows for non-Owners as a starting point, then add back in the ones we want. We can do that with the condition user.Access != \"owners\" with Deny All permissions. Then, we add another default rule by clicking + , and add the condition user.Team.Role == rec.Stage . The rec variable allows us to express rules that depend on the content within a particular record. Here, we check if the Stage column of a record matches the user\u2019s role. If it is, we allow R Read access: Here\u2019s how the table looks now as Kimberly (doing deliveries): And here\u2019s how the table looks as Charon (doing sourcing): Kimberly and Charon now have read-only access to the table. Owners still have full write access to all rows and columns. Understanding reference columns in access rules You can limit the data team members access to just those rows pertinent to their work. One way to do so is to relate all records in all tables to their respective team members. For example, leads and sales records can reference the sales rep responsible for those records. This quick video explains how. Checking new values # Access rules can be used to permit only certain changes to the document. Suppose we want Delivery people to be able to change Stage from Delivery to Done , without giving them the arbitrary rights to edit that column. We can grant them that exceptional right as follows. In the Rules for table Orders group, click the three-dot icon (\u2026), and select Add Column Rule . Set [Add Column] to Stage , and mark the U/Update permission to be granted. For the condition, use this: (user.Team.Role == 'Delivery' and rec.Stage == 'Delivery' and newRec.Stage == 'Done') This checks if the user has the Delivery role, and the record is in the Delivery stage, and that the user is trying to change the Stage to Done . The newRec variable is a variant of rec available when the user is proposing to change a record, with rec containing its state before the change, and newRec its state after the proposed change. Now, if we view the table as Kiwi, and try to change a Stage to Sourcing , we are denied: If we change a Stage to Done , it works, and the record disappears from view since it is no longer in the Delivery stage: Link keys # Sometimes it is useful to give access to a specific small slice of the document, for example a single row of a table. Grist offers a feature called \u201clink keys\u201d that can help with that. Any parameters in a Grist document URL that end in an underscore are made available to access rules in a user.LinkKey variable. So for example if a document URL ends in ....?Token_=xx-xx-xx-xx&Flavor_=vanilla , then user.LinkKey.Token will be set to xx-xx-xx-xx and user.LinkKey.Flavor to vanilla . Let\u2019s work through an example to see how that can be helpful. Suppose we have a table of Orders and we\u2019d like to occasionally share information about a single order with someone. To do that with link keys, we need some kind of hard-to-guess code for each order, which can be used to access it. Grist has a UUID() function that gives a unique, random, and hard-to-guess identifier, so let\u2019s add a UUID column with formula =UUID() : In fact we want UUID() to be called just once per order, when we create it, and never recomputed (because then it would change). So in the right sidebar we convert the formula column to a data column, freezing its values: And then we set the default formula for new records to UUID() : At this point we have a solid hard-to-guess code for each order in the UUID column, that will be created as we add new orders. It can be handy at this point to construct links to the document with that code embedded in them. Grist has a helper for this called SELF_HYPERLINK . To add a link key called <NAME> , just use this function with a LinkKey_<NAME> argument. In our case, we pass LinkKey_UUID=$UUID to embed the value of the UUID column into the URL. We also set label=$Ref to control the text label of the link in the spreadsheet. To show the link, we set the column type to Text and set the HyperLink option: Once we have these links, we can tidy up a little by hiding the UUID and Ref columns (see Column operations for a refresher on how to do this): The links don\u2019t do anything special yet, but we have everything we need to make that happen now. Here is an example of access rules to allow anyone with a UUID in their URL to read any order with a matching UUID (otherwise only owners can read orders in this case): And here is what a non-owner now sees, with the UUID of the first order in their URL: This is just the beginning of the possibilities. Link keys can give access to multiple rows across many tables. They can be used in User attribute tables . And the data they give access to can be within tables, cards, card lists, charts, and custom widgets. Access rule conditions # Accress rule conditions contain a formula expressing when the rule should apply. A blank condition will always apply. When a condition applies for an action, the permissions associated with the condition are set to allowed or denied for that action if no earlier rule in the same group has yet set them. When a condition does not apply, no permissions are set by that rule, but other rules could set them. Formulas are written in a restricted subset of Python. Variables that may be available in access rules are user , rec , and newRec . The user variable contains the following members: user.Access : one of owners , editors , or viewers , giving how the document was shared with the user (see Sharing a document ). user.Email : the email address of the user (or anon@getgrist.com for users who are not logged in). user.UserID : a numeric ID that is associated with the user. user.Name : the user\u2019s name (or Anonymous if unavailable). user.LinkKey : an object with any access control URL parameters. Access control URL parameters end in an underscore (which is then stripped). Only available in the web client, not the API. user.Origin : The content of the Origin request header. Only available in the API, not the web client. For an example of using the user variable, read Default rules . The rec variable contains the state of an individual record/row, for conditions that need to take that into account. When it is used, that rule becomes row-specific. That allows, for example, to make certain rows visible only to certain users, or to prohibit modification of certain rows by certain users. For an example of using the rec variable, read Row-level access control . The newRec variable is available for record/row creation and updating, and contains the state of a row after a proposed change, allowing you to selectively allow or deny certain changes. For an example of using the newRec variable, read Checking new values . Supported operations in condition formalas are currently: and , or , + , - , * , / , % , == , != , < , <= , > , >= , is , is not , in , not in . Supported variables are: user , rec , newRec with their members accessed with . . Strings, numbers, and lists are also supported. If an operation you need is not available, consider whether you can do part of the work in a formula in the table itself (see Access rule memos for an example). Comments are allowed, using # or \"\"\" . If there is a comment in a rule, then the first comment in a rule that results in a denial of an action will be reported to the user as a tip for why the action was not permitted. See Access rule memos for an example. Access rule permissions # A permission controls whether a user can perform a particalar kind of action. Grist access rules currently deal with 5 kinds of action, which are given single letter acronyms for convenience: R - permission to read cells. U - permission to update cells. C - permission to create rows. D - permission to delete rows. S - permission to change table structure. The S structure permission is available in the default access rule group. Column rules lack the C create and D delete permissions, which should be handled in default table rules. Note: The S permission is very powerful. It allows writing formulas, which can access any data in the document regardless of rules. Since the S permission is on by default for Editors and Owners, any such user would be able to edit a formula and so retrieve any data. In other words, having the S permission makes it possible to circumvent other rules that prevent access to data. For this reason, turning it off \u2013 as described above in Locking down structure \u2013 is an important first step in limiting data access. Access rule memos # When a user receives an error message denying them access because of a rule, it can be helpful to give specific details that will help them understand the problem. You can do this by adding a comment in the condition formula. The first comment in a condition will be passed on to the user in the event of the condition leading to a denial of access (either by matching, or failing to match). Comments are python-style, starting with a # . They can come after the formula like this: newRec.Count > 1 # No duplicates allowed Or before it, like this: # Talk to Arjun to get full access user.Access == OWNER As a full example, suppose we have a table listing airports, and we want to forbid entry of a new record with the same airport code as an existing one. In the table, we can add a formula Count that counts how many records have the same code as each other: Now, we can add an access rule to forbid any record update or creation that would result in a Count above one. We can also include a memo to explain the problem: Now if we try to add a new row with an existing code, we get a helpful error: This example also shows that sometimes the condition for an access rule needs to be expressed in two parts: a user-independent formula in the table itself (which has access to full spreadsheet functionality but does not have access to the user\u2019s identity or attributes), and a user-dependent formula in the access rule page (which has access to the user\u2019s identity and attributes, but has limits to its structure). See Access rule conditions for details on the restrictions on condition formulas, and Formulas for details on regular full-powered formulas. Access rule examples # Along with the extended example of using access rules in this section, we will collect complete examples of access rule use here. Lead lists : A very simple list of leads, assigned to individuals to follow up, with control of assignments reserved for document owners. Hello","title":"Intro to access rules"},{"location":"access-rules/#access-rules","text":"Access rules are an experimental feature The design of access rules is likely to evolve, and sometimes that will require updates to documents that use them. We won\u2019t make such changes lightly. Every Grist document can be shared with others using the Manage Users option in the sharing menu ( ). Users can be invited as Viewers, Editors, or Owners (see Sharing a document for a refresher on those roles). Sometimes, you need more nuance about who can see or edit individual parts of a document. Access rules give us that power. Only the owners of a document can edit its access rules. When a document is loaded, owners see a tool called Access Rules in the left side bar. Click on that to view and edit access rules. The rules are also accessible via the Manage Users option of the sharing menu with the Open Access Rules button (available only to document Owners). Suppose we run a small business sourcing and delivering unusual objects, organized using a document with two tables, Orders and Financials . Now we are taking on more employees, and want to share the document with them while limiting their access to just what they need.","title":"Access rules"},{"location":"access-rules/#default-rules","text":"To see the access rules for a document, visit its access rules page by clicking Access Rules in the left sidebar. When no custom rules have been created yet, the access rules page contains the Default Rules for our document: These rules say, in summary, that Owners and Editors can do anything within the document, that Viewers can only read the document, and everyone else is forbidden all access. These rules cannot be modified, but they can be overridden. To understand whether a group of rules allows a certain permission ( Read, Update, Create, Delete, or Structure ), read the rules from top to bottom, and find the first applicable rule that allows (green) or denies (red) that permission. We\u2019ll see plenty of examples as we go.","title":"Default rules"},{"location":"access-rules/#lock-down-structure","text":"By default Owners and Editors are equally powerful within a document, with the ability to create or delete tables or columns, write formulas, reorganize pages, and so on. Suppose we want only the original Owners of the document to be allowed to change its structure, as we plan to invite other specialized collaborators as Editors. To do this, we add a default rule specifying that any user who is not an owner ( user.Access != OWNER ) should be denied structure permissions ( S ). Click the little + sign in the CONDITION of the Default Rules and fill in the condition and permissions as follows: For more information about possible formulas, read Access rule conditions . Once we\u2019ve made changes, the SAVE button becomes an inviting green (if is grayed out, and you\u2019ve just composed a condition formula, press enter or click elsewhere to let Grist know you are finished). We click SAVE for the rule to take effect. If Grist finds errors, you\u2019ll be alerted and the changes will not save. Important. This is an important first step for any document where you intend to block any access to Editors. Without denying them the structure permission ( S ), anyone with edit access will be able to create or change formulas. Since formula calculations are not limited by access control rules, a determined user could use them to retrieve any data from a document. To protect against that, deny structure permission to users whose access should be limited.","title":"Lock down structure"},{"location":"access-rules/#make-a-private-table","text":"To ensure that only Owners can access a table, such as the Financials table in our example, we click Add Table Rules and select the table name, Financials . This creates a new empty group of rules called Rules for table Financials . Then we add a condition for any user who is not an Owner ( user.Access != OWNER ), with all permissions denied. Selecting Deny All from the drop-down beside R U C D is a fast way to set all permissions to denied, or you can click each permission individually to turn them red. R is Read, U is Update, C is Create, and D is Delete (see Access rule permissions ). Structure ( S ) permissions are not available at the table level. Once you are done, click SAVE . Now we could go ahead and share the document with a team member specialized in deliveries, for example. We share the document with them as an Editor so that the restrictions we\u2019ve set up apply to them. They won\u2019t see the Financials table in the left side bar, and attempts to open it will be denied:","title":"Make a private table"},{"location":"access-rules/#restrict-access-to-columns","text":"We can restrict a collaborator\u2019s access to columns. In our eample, we might wish to give a delivery specialist more limited access to the Orders table. Perhaps they don\u2019t need to see an Email column, or a Piece column with details of what is in the parcel. Click Add Table Rules and select Orders to create a rule group for the Orders table. Now, in the Rules for table Orders group, click the three-dot icon (\u2026), and select Add Column Rule : In the Columns area we have a new [Add Column] dropdown to add all the columns to which we want the rule to apply (in our case Email and Piece ). For the condition, we culd use user.Email == 'kiwi@getgrist.com' . This checks for the email address of Kimberly, our fictional delivery specialist; we could also check by name or a numeric ID. We turn all available permissions off for this user on these columns: Now that the rules are ready, click Save . If we have another employee who specializes in sourcing objects, and who needs to see a different set of columns, we can do that. For example here we add a rule to withhold Address and Phone columns from user Charon :","title":"Restrict access to columns"},{"location":"access-rules/#view-as-another-user","text":"A convenient way to check if access rules work as expected is with the View As feature, available in the Users dropdown. This allows an Owner to open the document as if they were one of the people it is shared with, to see what their colleague would see. The Owner does not \u201cbecome\u201d that colleague - any changes they make will be recorded as coming from themselves and not the colleague - but they do see the document from the colleague\u2019s perspective. In our example, we could click View As on the Kiwi row, and the document reopens, with a little red tag warning that we are viewing it as kiwi@getgrist.com . The Piece and Email columns are missing, and the Financials table is surpressed: When satisfied that everything looks as expected, we click the x in the red tag to close this preview, and the document will reload.","title":"View as another user"},{"location":"access-rules/#user-attribute-tables","text":"If we are successful and hire many sourcing and delivery people, then adding them one by one to rules would be tedious. One solution is to use \u201cuser attribute tables.\u201d You can add a table to your document that classifies users as you like, and then use those classes in your access rules. For example, we can make a table called Team , and give it two columns, Email and Role , where Role is a choice between Sourcing and Delivery . Now we can tell Grist to make information from this table available for access rules, by clicking on Add User Attributes . Give the attribute any name you like (this will be how we refer to it in formulas), such as Team . Pick the table to read ( Team also in this case). Give a user property to match against rows in this table - in our case we\u2019ll use user.Email . And the column to match against, Email . Save that. Now we can update our rules to be more general. We find with autocomplete that we have a new user.Team variable available in condtions. It makes columns from the Team available, such as user.Team.Role . Now we can check if the user has a particular role, and apply the permissions that go with that: Great! Doing a spot check, Charon sees the expected columns for someone in Sourcing. And if we recruit someone else to work with them, we can just add them in the Team table, no rule changes needed.","title":"User attribute tables"},{"location":"access-rules/#row-level-access-control","text":"In our example, as orders are processed, they move from sourcing to delivery phases. So there\u2019s really no need for the two groups to see all the orders at once. Let\u2019s add a column called Stage that can be set to Sourcing or Delivery , so that we can update access rules to show only the relevant orders. In the Rules for table Orders group, click the three-dot icon (\u2026), and select Add Default Rule to add a rule that isn\u2019t limited to specific columns. Let\u2019s deny access to all rows for non-Owners as a starting point, then add back in the ones we want. We can do that with the condition user.Access != \"owners\" with Deny All permissions. Then, we add another default rule by clicking + , and add the condition user.Team.Role == rec.Stage . The rec variable allows us to express rules that depend on the content within a particular record. Here, we check if the Stage column of a record matches the user\u2019s role. If it is, we allow R Read access: Here\u2019s how the table looks now as Kimberly (doing deliveries): And here\u2019s how the table looks as Charon (doing sourcing): Kimberly and Charon now have read-only access to the table. Owners still have full write access to all rows and columns. Understanding reference columns in access rules You can limit the data team members access to just those rows pertinent to their work. One way to do so is to relate all records in all tables to their respective team members. For example, leads and sales records can reference the sales rep responsible for those records. This quick video explains how.","title":"Row-level access control"},{"location":"access-rules/#checking-new-values","text":"Access rules can be used to permit only certain changes to the document. Suppose we want Delivery people to be able to change Stage from Delivery to Done , without giving them the arbitrary rights to edit that column. We can grant them that exceptional right as follows. In the Rules for table Orders group, click the three-dot icon (\u2026), and select Add Column Rule . Set [Add Column] to Stage , and mark the U/Update permission to be granted. For the condition, use this: (user.Team.Role == 'Delivery' and rec.Stage == 'Delivery' and newRec.Stage == 'Done') This checks if the user has the Delivery role, and the record is in the Delivery stage, and that the user is trying to change the Stage to Done . The newRec variable is a variant of rec available when the user is proposing to change a record, with rec containing its state before the change, and newRec its state after the proposed change. Now, if we view the table as Kiwi, and try to change a Stage to Sourcing , we are denied: If we change a Stage to Done , it works, and the record disappears from view since it is no longer in the Delivery stage:","title":"Checking new values"},{"location":"access-rules/#link-keys","text":"Sometimes it is useful to give access to a specific small slice of the document, for example a single row of a table. Grist offers a feature called \u201clink keys\u201d that can help with that. Any parameters in a Grist document URL that end in an underscore are made available to access rules in a user.LinkKey variable. So for example if a document URL ends in ....?Token_=xx-xx-xx-xx&Flavor_=vanilla , then user.LinkKey.Token will be set to xx-xx-xx-xx and user.LinkKey.Flavor to vanilla . Let\u2019s work through an example to see how that can be helpful. Suppose we have a table of Orders and we\u2019d like to occasionally share information about a single order with someone. To do that with link keys, we need some kind of hard-to-guess code for each order, which can be used to access it. Grist has a UUID() function that gives a unique, random, and hard-to-guess identifier, so let\u2019s add a UUID column with formula =UUID() : In fact we want UUID() to be called just once per order, when we create it, and never recomputed (because then it would change). So in the right sidebar we convert the formula column to a data column, freezing its values: And then we set the default formula for new records to UUID() : At this point we have a solid hard-to-guess code for each order in the UUID column, that will be created as we add new orders. It can be handy at this point to construct links to the document with that code embedded in them. Grist has a helper for this called SELF_HYPERLINK . To add a link key called <NAME> , just use this function with a LinkKey_<NAME> argument. In our case, we pass LinkKey_UUID=$UUID to embed the value of the UUID column into the URL. We also set label=$Ref to control the text label of the link in the spreadsheet. To show the link, we set the column type to Text and set the HyperLink option: Once we have these links, we can tidy up a little by hiding the UUID and Ref columns (see Column operations for a refresher on how to do this): The links don\u2019t do anything special yet, but we have everything we need to make that happen now. Here is an example of access rules to allow anyone with a UUID in their URL to read any order with a matching UUID (otherwise only owners can read orders in this case): And here is what a non-owner now sees, with the UUID of the first order in their URL: This is just the beginning of the possibilities. Link keys can give access to multiple rows across many tables. They can be used in User attribute tables . And the data they give access to can be within tables, cards, card lists, charts, and custom widgets.","title":"Link keys"},{"location":"access-rules/#access-rule-conditions","text":"Accress rule conditions contain a formula expressing when the rule should apply. A blank condition will always apply. When a condition applies for an action, the permissions associated with the condition are set to allowed or denied for that action if no earlier rule in the same group has yet set them. When a condition does not apply, no permissions are set by that rule, but other rules could set them. Formulas are written in a restricted subset of Python. Variables that may be available in access rules are user , rec , and newRec . The user variable contains the following members: user.Access : one of owners , editors , or viewers , giving how the document was shared with the user (see Sharing a document ). user.Email : the email address of the user (or anon@getgrist.com for users who are not logged in). user.UserID : a numeric ID that is associated with the user. user.Name : the user\u2019s name (or Anonymous if unavailable). user.LinkKey : an object with any access control URL parameters. Access control URL parameters end in an underscore (which is then stripped). Only available in the web client, not the API. user.Origin : The content of the Origin request header. Only available in the API, not the web client. For an example of using the user variable, read Default rules . The rec variable contains the state of an individual record/row, for conditions that need to take that into account. When it is used, that rule becomes row-specific. That allows, for example, to make certain rows visible only to certain users, or to prohibit modification of certain rows by certain users. For an example of using the rec variable, read Row-level access control . The newRec variable is available for record/row creation and updating, and contains the state of a row after a proposed change, allowing you to selectively allow or deny certain changes. For an example of using the newRec variable, read Checking new values . Supported operations in condition formalas are currently: and , or , + , - , * , / , % , == , != , < , <= , > , >= , is , is not , in , not in . Supported variables are: user , rec , newRec with their members accessed with . . Strings, numbers, and lists are also supported. If an operation you need is not available, consider whether you can do part of the work in a formula in the table itself (see Access rule memos for an example). Comments are allowed, using # or \"\"\" . If there is a comment in a rule, then the first comment in a rule that results in a denial of an action will be reported to the user as a tip for why the action was not permitted. See Access rule memos for an example.","title":"Access rule conditions"},{"location":"access-rules/#access-rule-permissions","text":"A permission controls whether a user can perform a particalar kind of action. Grist access rules currently deal with 5 kinds of action, which are given single letter acronyms for convenience: R - permission to read cells. U - permission to update cells. C - permission to create rows. D - permission to delete rows. S - permission to change table structure. The S structure permission is available in the default access rule group. Column rules lack the C create and D delete permissions, which should be handled in default table rules. Note: The S permission is very powerful. It allows writing formulas, which can access any data in the document regardless of rules. Since the S permission is on by default for Editors and Owners, any such user would be able to edit a formula and so retrieve any data. In other words, having the S permission makes it possible to circumvent other rules that prevent access to data. For this reason, turning it off \u2013 as described above in Locking down structure \u2013 is an important first step in limiting data access.","title":"Access rule permissions"},{"location":"access-rules/#access-rule-memos","text":"When a user receives an error message denying them access because of a rule, it can be helpful to give specific details that will help them understand the problem. You can do this by adding a comment in the condition formula. The first comment in a condition will be passed on to the user in the event of the condition leading to a denial of access (either by matching, or failing to match). Comments are python-style, starting with a # . They can come after the formula like this: newRec.Count > 1 # No duplicates allowed Or before it, like this: # Talk to Arjun to get full access user.Access == OWNER As a full example, suppose we have a table listing airports, and we want to forbid entry of a new record with the same airport code as an existing one. In the table, we can add a formula Count that counts how many records have the same code as each other: Now, we can add an access rule to forbid any record update or creation that would result in a Count above one. We can also include a memo to explain the problem: Now if we try to add a new row with an existing code, we get a helpful error: This example also shows that sometimes the condition for an access rule needs to be expressed in two parts: a user-independent formula in the table itself (which has access to full spreadsheet functionality but does not have access to the user\u2019s identity or attributes), and a user-dependent formula in the access rule page (which has access to the user\u2019s identity and attributes, but has limits to its structure). See Access rule conditions for details on the restrictions on condition formulas, and Formulas for details on regular full-powered formulas.","title":"Access rule memos"},{"location":"access-rules/#access-rule-examples","text":"Along with the extended example of using access rules in this section, we will collect complete examples of access rule use here. Lead lists : A very simple list of leads, assigned to individuals to follow up, with control of assignments reserved for document owners. Hello","title":"Access rule examples"},{"location":"afterschool-program/","text":"How to manage business data # Grist shines when your business data has some complexity. In this example, we\u2019ll look at an organization that runs after-school activities for children. Feel free to refer to the \u201cAfterschool Program\u201d example document in Examples & Templates in your Grist home page. In this exercise we will show how to go about planning, designing, and creating such document. Planning # A little planning ahead will help you get a solution faster. Think about what kinds of data you are working with, and what kinds of workflows you will need. You don\u2019t need to anticipate everything when you start. You can easily add complexity later, as you\u2019ll see below. Our organization runs a number of classes for children. Each class has an instructor and multiple students. Students may enroll in multiple classes, and may return year after year. For each class, we\u2019ll want to see the list of enrolled students, and if there are spots available. When a parent calls, we want a convenient way to enroll a new student, or to change or cancel a student\u2019s enrollment. If this sounds like building an application, that\u2019s exactly what we are doing. As you\u2019ll see, however, it is no harder than building a spreadsheet. Data Modeling # The better you model your business data, the easier your work will be. In a way, you are doing database design as well as building a custom application. Grist just makes it easier. Let\u2019s start with the classes and their instructors. We need a list of classes and instructors. The same instructor can teach different classes, so instructors and classes will live in different tables. Let\u2019s call them \u201cClasses\u201d and \u201cStaff\u201d. Each class has a single instructor, so one of the properties of a class will be that class\u2019s instructor. Classes and Instructors # When starting from scratch, you\u2019ll create a new empty document (see Creating a document ), rename the initial empty table \u201cTable1\u201d to \u201cClasses\u201d, add the columns you need, and type in some classes. To follow the steps of this tutorial, you can instead import Classes.csv (or simply refer to the \u201cAfterschool Program\u201d example document). For the Staff table, click the \u201cAdd New\u201d button and select \u201cAdd Empty Table\u201d. Rename it to \u201cStaff\u201d, create some columns, and enter some data about instructors. Or import Staff.csv to use sample data and save a few steps. We want the Instructor column in the Classes table to be a reference to the Staff table. Currently, the Staff table doesn\u2019t have any column that uniquely identifies each record. For setting up references, it\u2019s a good idea to add one. In this case, we\u2019ll add a \u201cFull Name\u201d column to the Staff table. Formulas # Click on the \u201cStaff\u201d page, and add a \u201cFull Name\u201d column using the column menu or the Alt + = shortcut, and type \u201cFull Name\u201d in the new column\u2019s header. Create a formula by typing in a value into any cell in the new column, starting with the equal sign (\u201c=\u201d). Enter the formula as $Last_Name + \", \" + $First_Name . You may use Excel-like syntax to the same effect: CONCAT($Last_Name, \", \", $First_Name) . In Grist, a formula always applies to every record in the table. Grist supports Python in formulas, and most Excel functions, which have uppercase names. Because formulas apply to every row, you should see the Full Name column automatically filled. References # Click on the \u201cClasses\u201d page again, and open \u201cColumn Options\u201d for the Instructor column. We\u2019ll turn it into a reference to Staff . In the right-side panel, set the column type to \u201cReference\u201d (in database terms, this is known as a \u201cforeign key\u201d), and set the referenced table to \u201cStaff\u201d. For the \u201cSHOW COLUMN\u201d dropdown, select \u201cFull Name\u201d, which is the new column we just added. Click the \u201cApply\u201d button to complete this change of the column\u2019s type (if the column is empty, there is no confirmation step). You can now assign an instructor to any class. Click on a cell in the Instructor column. You can hit Enter and choose from among the available instructors in the Staff table, or start typing to use auto-complete. Next, we will continue with students and their enrollments. Students # Each class has a number of students. So, we\u2019ll need a table of students. Again, add a new empty table, rename it to \u201cStudents\u201d, and fill it with the students\u2019 names, grade levels, etc. Or import Students.csv to use sample data and save a few steps. Let\u2019s add here a \u201cFull Name\u201d formula column, just like in the Staff table. It will come in handy. Many-to-Many Relationships # A student can take more than one class. Let\u2019s remember also that there are classes in the past and in the future, and keeping this historical data is valuable. So, for each student, there may be multiple classes, and in each class, there are multiple students. A good way to model such a relation is by adding the concept of an \u201cenrollment\u201d and a new Enrollments table. An \u201cenrollment\u201d represents one student being enrolled in one class. It has some useful properties of its own: the enrollment status (Confirmed, Waitlisted, or Cancelled), whether they have paid for the class, and perhaps more. In database design, this is known as a \u201cmany-to-many\u201d relationship. The extra table is known as a \u201cjoin\u201d table. Essentially, it adds a record for each student-class connection, and turns the \u201cmany-to-many\u201d relationship into two \u201cone-to-many\u201d relationships. This relationship: becomes this: So, let\u2019s add a new table, name it \u201cEnrollments\u201d, and add the columns we need. Here too, to follow along, you may import sample data from Enrollments.csv . In Column Options for the column Student , set the Column Type to \u201cReference\u201d, set the referenced table to Students , and select \u201cFull Name\u201d as the column to show. For the column Class , set the Column Type to \u201cReference\u201d, the referenced table to Classes , and select \u201cClass Code\u201d as the column to show. It\u2019s possible to enter enrollment data by adding records to this table and using auto-complete in the Student and Class column. Below, we will set up a much more convenient way to enroll students. Class View # One of our goals in the Planning stage was to see a list of enrolled students for each class. Now that the data tables are in place, we can create a page that does this. Click \u201cAdd New\u201d, then \u201cAdd Page\u201d to open the widget picker. Select to show a table of Classes , and click \u201cAdd Page\u201d. The new page shows a list of classes. Let\u2019s rename this page \u201cClass View\u201d. Next, add the Enrollments table linked to the table of classes. Click \u201cAdd New\u201d again, then \u201cAdd Widget to Page\u201d. In the widget picker, select to show a table of Enrollments . For \u201cSELECT BY\u201d, choose \u201cCLASSES\u201d, and click \u201cAdd to Page\u201d. We get two tables side-by-side. Selecting a class shows all enrollments in that class, each of which references a particular student and includes some other enrollment info. We can go a step further to make this view convenient for us. Let\u2019s add a Class card to this view. Click \u201cAdd New\u201d and \u201cAdd Widget to Page\u201d. In the widget picker, select widget \u201cCard\u201d for the Classes data. For \u201cSELECT BY\u201d, choose \u201cCLASSES\u201d again, and click \u201cAdd to Page\u201d. We can similarly add a card for the instructor leading this class. Again, click \u201cAdd New\u201d > \u201cAdd Widget to Page\u201d, and select \u201cCard\u201d for the Staff data. For \u201cSELECT BY\u201d, you can now pick \u201cCLASSES \u2022 Instructor\u201d. You can change the look of the new cards. Click the three-dot menu on the top right of the Card you\u2019d like to change, and choose \u201cWidget options\u201d. Find the \u201cTheme\u201d dropdown in the right panel, and select \u201cCompact\u201d. Here is what we now have in Class View page: It\u2019s a good time to clean up this page by hiding columns and fields that are duplicated or distracting. Check out Configuring field lists for an efficient way to select which fields to show, and Custom Layouts for rearranging widgets on the page. Enrollment View # Our other stated goal was a convenient way to enroll a student, and to see or adjust a given student\u2019s enrollments. Let\u2019s add a page for this. Click \u201cAdd New\u201d > \u201cAdd Page\u201d, and select a table of Students . We\u2019ll rename the new page to \u201cEnrollment View\u201d. When we select a student here, we\u2019d like to see all enrollments for this student. So click \u201cAdd New\u201d > \u201cAdd Widget to Page\u201d, and add a table of Enrollments . To link the new widget to the Students widget in the page, set the \u201cSELECT BY\u201d dropdown to \u201cSTUDENTS\u201d, and click \u201cAdd to Page\u201d. Now you can click on a student\u2019s name on the left and see the classes that student is enrolled in on the right. You can enroll the selected student into a class by simply entering a class code in the special blank row at the bottom of the enrollments list. As usual, the Class reference column offers auto-complete. You can hide the \u201cStudent\u201d column in \u201cENROLLMENTS\u201d table, since it will always show the selected student anyway. If you\u2019d like to include more info about the classes in the Enrollments table, select Column Options for the Class column, and click \u201c+ Add Column\u201d in the side panel. Any of the fields associated with a class are available. If you examine the columns you add this way, you\u2019ll see that they are simply formulas of the form $Class.Times . Adding Layers # If you are working with children, you are talking to their parents. You\u2019ll need to have the parents\u2019 names and contact info, which you can add as columns to the students table. You\u2019re likely to find that some parents have multiple children that enroll in classes together. Recognizing the parent-child relationship in your database may seem like a complex step, but it will likely simplify your daily workflow. So, let\u2019s add one more table: Families . We\u2019ll include the parent name and contact info, and link each child to a record here. You can import sample data from Families.csv . Note that we added a Full Name column here as for other tables that list people. In the Students table, we\u2019ll add a column named \u201cFamily\u201d, and make it a Reference to Families . The example data already has families filled in, and conversion to reference looks up the text to set correct references. If you were entering new data, you could link students to families using auto-complete as with other reference columms. Let\u2019s change our \u201cEnrollment View\u201d to list families first. This way, when a parent calls, you can pick the right record and see all of their children and enrollments for each child. In the \u201cEnrollment View\u201d page, click \u201cAdd New\u201d > \u201cAdd Widget to Page\u201d. Select to show a table of Families . Rearrange the widgets to have Families on the left, and Students and Enrollments to the right of it. Now link students to Families: click the three-dot menu on the top right of the STUDENTS table, and choose \u201cData Selection\u201d. In the side panel, you can set \u201cSELECT BY\u201d widget to \u201cFAMILIES\u201d. Finally, you can add Card widgets for details of the selected family, and of the selected student, and rearrange the widgets on the page to create a layout that\u2019s perfect for talking to a parent. You select a parent, see their children, and then select a child to see their enrollments. It\u2019s easy to add an enrollment record for a new class, or to change a record (e.g. mark it as \u201ccancelled\u201d), to add another child, or to add a new family. Example Document # The \u201cAfterschool Program\u201d example includes everything described above and a bit more. In particular, it adds a Count field to Classes to calculate the number of enrolled students, and a Spots Left field to show the number of spots remaining, by comparing Count to Max_Students : The formula for Count is len(Enrollments.lookupRecords(Class=$id, Status=\"Confirmed\")) . The formula for Spots Left is max($Max_Students - $Count, 0) or \"Full\" . These make for a more useful Class View page, where it\u2019s now easy to see at a glance which classes have spots remaining.","title":"Manage business data"},{"location":"afterschool-program/#how-to-manage-business-data","text":"Grist shines when your business data has some complexity. In this example, we\u2019ll look at an organization that runs after-school activities for children. Feel free to refer to the \u201cAfterschool Program\u201d example document in Examples & Templates in your Grist home page. In this exercise we will show how to go about planning, designing, and creating such document.","title":"Intro"},{"location":"afterschool-program/#planning","text":"A little planning ahead will help you get a solution faster. Think about what kinds of data you are working with, and what kinds of workflows you will need. You don\u2019t need to anticipate everything when you start. You can easily add complexity later, as you\u2019ll see below. Our organization runs a number of classes for children. Each class has an instructor and multiple students. Students may enroll in multiple classes, and may return year after year. For each class, we\u2019ll want to see the list of enrolled students, and if there are spots available. When a parent calls, we want a convenient way to enroll a new student, or to change or cancel a student\u2019s enrollment. If this sounds like building an application, that\u2019s exactly what we are doing. As you\u2019ll see, however, it is no harder than building a spreadsheet.","title":"Planning"},{"location":"afterschool-program/#data-modeling","text":"The better you model your business data, the easier your work will be. In a way, you are doing database design as well as building a custom application. Grist just makes it easier. Let\u2019s start with the classes and their instructors. We need a list of classes and instructors. The same instructor can teach different classes, so instructors and classes will live in different tables. Let\u2019s call them \u201cClasses\u201d and \u201cStaff\u201d. Each class has a single instructor, so one of the properties of a class will be that class\u2019s instructor.","title":"Data Modeling"},{"location":"afterschool-program/#classes-and-instructors","text":"When starting from scratch, you\u2019ll create a new empty document (see Creating a document ), rename the initial empty table \u201cTable1\u201d to \u201cClasses\u201d, add the columns you need, and type in some classes. To follow the steps of this tutorial, you can instead import Classes.csv (or simply refer to the \u201cAfterschool Program\u201d example document). For the Staff table, click the \u201cAdd New\u201d button and select \u201cAdd Empty Table\u201d. Rename it to \u201cStaff\u201d, create some columns, and enter some data about instructors. Or import Staff.csv to use sample data and save a few steps. We want the Instructor column in the Classes table to be a reference to the Staff table. Currently, the Staff table doesn\u2019t have any column that uniquely identifies each record. For setting up references, it\u2019s a good idea to add one. In this case, we\u2019ll add a \u201cFull Name\u201d column to the Staff table.","title":"Classes and Instructors"},{"location":"afterschool-program/#formulas","text":"Click on the \u201cStaff\u201d page, and add a \u201cFull Name\u201d column using the column menu or the Alt + = shortcut, and type \u201cFull Name\u201d in the new column\u2019s header. Create a formula by typing in a value into any cell in the new column, starting with the equal sign (\u201c=\u201d). Enter the formula as $Last_Name + \", \" + $First_Name . You may use Excel-like syntax to the same effect: CONCAT($Last_Name, \", \", $First_Name) . In Grist, a formula always applies to every record in the table. Grist supports Python in formulas, and most Excel functions, which have uppercase names. Because formulas apply to every row, you should see the Full Name column automatically filled.","title":"Formulas"},{"location":"afterschool-program/#references","text":"Click on the \u201cClasses\u201d page again, and open \u201cColumn Options\u201d for the Instructor column. We\u2019ll turn it into a reference to Staff . In the right-side panel, set the column type to \u201cReference\u201d (in database terms, this is known as a \u201cforeign key\u201d), and set the referenced table to \u201cStaff\u201d. For the \u201cSHOW COLUMN\u201d dropdown, select \u201cFull Name\u201d, which is the new column we just added. Click the \u201cApply\u201d button to complete this change of the column\u2019s type (if the column is empty, there is no confirmation step). You can now assign an instructor to any class. Click on a cell in the Instructor column. You can hit Enter and choose from among the available instructors in the Staff table, or start typing to use auto-complete. Next, we will continue with students and their enrollments.","title":"References"},{"location":"afterschool-program/#students","text":"Each class has a number of students. So, we\u2019ll need a table of students. Again, add a new empty table, rename it to \u201cStudents\u201d, and fill it with the students\u2019 names, grade levels, etc. Or import Students.csv to use sample data and save a few steps. Let\u2019s add here a \u201cFull Name\u201d formula column, just like in the Staff table. It will come in handy.","title":"Students"},{"location":"afterschool-program/#many-to-many-relationships","text":"A student can take more than one class. Let\u2019s remember also that there are classes in the past and in the future, and keeping this historical data is valuable. So, for each student, there may be multiple classes, and in each class, there are multiple students. A good way to model such a relation is by adding the concept of an \u201cenrollment\u201d and a new Enrollments table. An \u201cenrollment\u201d represents one student being enrolled in one class. It has some useful properties of its own: the enrollment status (Confirmed, Waitlisted, or Cancelled), whether they have paid for the class, and perhaps more. In database design, this is known as a \u201cmany-to-many\u201d relationship. The extra table is known as a \u201cjoin\u201d table. Essentially, it adds a record for each student-class connection, and turns the \u201cmany-to-many\u201d relationship into two \u201cone-to-many\u201d relationships. This relationship: becomes this: So, let\u2019s add a new table, name it \u201cEnrollments\u201d, and add the columns we need. Here too, to follow along, you may import sample data from Enrollments.csv . In Column Options for the column Student , set the Column Type to \u201cReference\u201d, set the referenced table to Students , and select \u201cFull Name\u201d as the column to show. For the column Class , set the Column Type to \u201cReference\u201d, the referenced table to Classes , and select \u201cClass Code\u201d as the column to show. It\u2019s possible to enter enrollment data by adding records to this table and using auto-complete in the Student and Class column. Below, we will set up a much more convenient way to enroll students.","title":"Many-to-Many Relationships"},{"location":"afterschool-program/#class-view","text":"One of our goals in the Planning stage was to see a list of enrolled students for each class. Now that the data tables are in place, we can create a page that does this. Click \u201cAdd New\u201d, then \u201cAdd Page\u201d to open the widget picker. Select to show a table of Classes , and click \u201cAdd Page\u201d. The new page shows a list of classes. Let\u2019s rename this page \u201cClass View\u201d. Next, add the Enrollments table linked to the table of classes. Click \u201cAdd New\u201d again, then \u201cAdd Widget to Page\u201d. In the widget picker, select to show a table of Enrollments . For \u201cSELECT BY\u201d, choose \u201cCLASSES\u201d, and click \u201cAdd to Page\u201d. We get two tables side-by-side. Selecting a class shows all enrollments in that class, each of which references a particular student and includes some other enrollment info. We can go a step further to make this view convenient for us. Let\u2019s add a Class card to this view. Click \u201cAdd New\u201d and \u201cAdd Widget to Page\u201d. In the widget picker, select widget \u201cCard\u201d for the Classes data. For \u201cSELECT BY\u201d, choose \u201cCLASSES\u201d again, and click \u201cAdd to Page\u201d. We can similarly add a card for the instructor leading this class. Again, click \u201cAdd New\u201d > \u201cAdd Widget to Page\u201d, and select \u201cCard\u201d for the Staff data. For \u201cSELECT BY\u201d, you can now pick \u201cCLASSES \u2022 Instructor\u201d. You can change the look of the new cards. Click the three-dot menu on the top right of the Card you\u2019d like to change, and choose \u201cWidget options\u201d. Find the \u201cTheme\u201d dropdown in the right panel, and select \u201cCompact\u201d. Here is what we now have in Class View page: It\u2019s a good time to clean up this page by hiding columns and fields that are duplicated or distracting. Check out Configuring field lists for an efficient way to select which fields to show, and Custom Layouts for rearranging widgets on the page.","title":"Class View"},{"location":"afterschool-program/#enrollment-view","text":"Our other stated goal was a convenient way to enroll a student, and to see or adjust a given student\u2019s enrollments. Let\u2019s add a page for this. Click \u201cAdd New\u201d > \u201cAdd Page\u201d, and select a table of Students . We\u2019ll rename the new page to \u201cEnrollment View\u201d. When we select a student here, we\u2019d like to see all enrollments for this student. So click \u201cAdd New\u201d > \u201cAdd Widget to Page\u201d, and add a table of Enrollments . To link the new widget to the Students widget in the page, set the \u201cSELECT BY\u201d dropdown to \u201cSTUDENTS\u201d, and click \u201cAdd to Page\u201d. Now you can click on a student\u2019s name on the left and see the classes that student is enrolled in on the right. You can enroll the selected student into a class by simply entering a class code in the special blank row at the bottom of the enrollments list. As usual, the Class reference column offers auto-complete. You can hide the \u201cStudent\u201d column in \u201cENROLLMENTS\u201d table, since it will always show the selected student anyway. If you\u2019d like to include more info about the classes in the Enrollments table, select Column Options for the Class column, and click \u201c+ Add Column\u201d in the side panel. Any of the fields associated with a class are available. If you examine the columns you add this way, you\u2019ll see that they are simply formulas of the form $Class.Times .","title":"Enrollment View"},{"location":"afterschool-program/#adding-layers","text":"If you are working with children, you are talking to their parents. You\u2019ll need to have the parents\u2019 names and contact info, which you can add as columns to the students table. You\u2019re likely to find that some parents have multiple children that enroll in classes together. Recognizing the parent-child relationship in your database may seem like a complex step, but it will likely simplify your daily workflow. So, let\u2019s add one more table: Families . We\u2019ll include the parent name and contact info, and link each child to a record here. You can import sample data from Families.csv . Note that we added a Full Name column here as for other tables that list people. In the Students table, we\u2019ll add a column named \u201cFamily\u201d, and make it a Reference to Families . The example data already has families filled in, and conversion to reference looks up the text to set correct references. If you were entering new data, you could link students to families using auto-complete as with other reference columms. Let\u2019s change our \u201cEnrollment View\u201d to list families first. This way, when a parent calls, you can pick the right record and see all of their children and enrollments for each child. In the \u201cEnrollment View\u201d page, click \u201cAdd New\u201d > \u201cAdd Widget to Page\u201d. Select to show a table of Families . Rearrange the widgets to have Families on the left, and Students and Enrollments to the right of it. Now link students to Families: click the three-dot menu on the top right of the STUDENTS table, and choose \u201cData Selection\u201d. In the side panel, you can set \u201cSELECT BY\u201d widget to \u201cFAMILIES\u201d. Finally, you can add Card widgets for details of the selected family, and of the selected student, and rearrange the widgets on the page to create a layout that\u2019s perfect for talking to a parent. You select a parent, see their children, and then select a child to see their enrollments. It\u2019s easy to add an enrollment record for a new class, or to change a record (e.g. mark it as \u201ccancelled\u201d), to add another child, or to add a new family.","title":"Adding Layers"},{"location":"afterschool-program/#example-document","text":"The \u201cAfterschool Program\u201d example includes everything described above and a bit more. In particular, it adds a Count field to Classes to calculate the number of enrolled students, and a Spots Left field to show the number of spots remaining, by comparing Count to Max_Students : The formula for Count is len(Enrollments.lookupRecords(Class=$id, Status=\"Confirmed\")) . The formula for Spots Left is max($Max_Students - $Count, 0) or \"Full\" . These make for a more useful Class View page, where it\u2019s now easy to see at a glance which classes have spots remaining.","title":"Example Document"},{"location":"api/","text":"Authentication /orgs get List the orgs you have access to get Describe an org patch Modify an org get List users with access to org patch Change who has access to org get List workspaces and documents within an org /workspaces post Create an empty workspace get Describe a workspace patch Modify a workspace del Delete a workspace get List users with access to workspace patch Change who has access to workspace /docs post Create an empty document get Describe a document patch Modify document metadata (but not its contents) del Delete a document patch Move document to another workspace in the same org. get List users with access to document patch Change who has access to document get Content of document, as an Sqlite file get Content of document, as an Excel file get Content of table, as a CSV file /records get Fetch records from a table post Add records to a table patch Modify records of a table /columns get List columns in a table /data get Fetch data from a table post Add rows to a table patch Modify rows of a table post Delete rows of a table /attachments post Upload attachments to a doc get Get the metadata for an attachment get Download the contents of an attachment Documentation Powered by ReDoc Grist API ( 1.0.1 ) An API for manipulating Grist sites, workspaces, and documents. Authentication API Key Access to the Grist API is controlled by an Authorization header, which should contain the word 'Bearer', followed by a space, followed by your API key. Security Scheme Type HTTP HTTP Authorization Scheme bearer Bearer format \" Authorization: Bearer XXXXXXXXXXX \" /orgs Team sites and personal spaces are called 'orgs' in the API. List the orgs you have access to get /orgs https://docs.getgrist.com/api /orgs https://<TEAM>.getgrist.com/api /orgs This enumerates all the team sites or personal areas available. Authorizations: API Key Responses 200 An array of organizations Response samples 200 Content type application/json Copy Expand all Collapse all [ { \"id\" : 42 , \"name\" : \"Grist Labs\" , \"domain\" : \"gristlabs\" , \"owner\" : { \"id\" : 101 , \"name\" : \"Helga Hufflepuff\" , \"picture\" : null } , \"access\" : \"owners\" , \"createdAt\" : \"2019-09-13T15:42:35.000Z\" , \"updatedAt\" : \"2019-09-13T15:42:35.000Z\" } ] Describe an org get /orgs/{orgId} https://docs.getgrist.com/api /orgs/{orgId} https://<TEAM>.getgrist.com/api /orgs/{orgId} Authorizations: API Key path Parameters orgId required any ( OrgKey ) This can be an integer id, or a string subdomain (e.g. gristlabs ), or current if the org is implied by the domain in the url Responses 200 An organization Response samples 200 Content type application/json Copy Expand all Collapse all { \"id\" : 42 , \"name\" : \"Grist Labs\" , \"domain\" : \"gristlabs\" , \"owner\" : { \"id\" : 101 , \"name\" : \"Helga Hufflepuff\" , \"picture\" : null } , \"access\" : \"owners\" , \"createdAt\" : \"2019-09-13T15:42:35.000Z\" , \"updatedAt\" : \"2019-09-13T15:42:35.000Z\" } Modify an org patch /orgs/{orgId} https://docs.getgrist.com/api /orgs/{orgId} https://<TEAM>.getgrist.com/api /orgs/{orgId} Authorizations: API Key path Parameters orgId required any ( OrgKey ) This can be an integer id, or a string subdomain (e.g. gristlabs ), or current if the org is implied by the domain in the url Request Body schema: application/json the changes to make name string Responses 200 Success Request samples Payload Content type application/json Copy Expand all Collapse all { \"name\" : \"ACME Unlimited\" } List users with access to org get /orgs/{orgId}/access https://docs.getgrist.com/api /orgs/{orgId}/access https://<TEAM>.getgrist.com/api /orgs/{orgId}/access Authorizations: API Key path Parameters orgId required any ( OrgKey ) This can be an integer id, or a string subdomain (e.g. gristlabs ), or current if the org is implied by the domain in the url Responses 200 Users with access to org Response samples 200 Content type application/json Copy Expand all Collapse all { \"users\" : [ { \"id\" : 1 , \"name\" : \"Andrea\" , \"email\" : \"andrea@getgrist.com\" , \"access\" : \"owners\" } ] } Change who has access to org patch /orgs/{orgId}/access https://docs.getgrist.com/api /orgs/{orgId}/access https://<TEAM>.getgrist.com/api /orgs/{orgId}/access Authorizations: API Key path Parameters orgId required any ( OrgKey ) This can be an integer id, or a string subdomain (e.g. gristlabs ), or current if the org is implied by the domain in the url Request Body schema: application/json the changes to make delta required object ( OrgAccessWrite ) Request samples Payload Content type application/json Copy Expand all Collapse all { \"delta\" : { \"users\" : { \"foo@getgrist.com\" : \"owners\" , \"bar@getgrist.com\" : null } } } List workspaces and documents within an org get /orgs/{orgId}/workspaces https://docs.getgrist.com/api /orgs/{orgId}/workspaces https://<TEAM>.getgrist.com/api /orgs/{orgId}/workspaces Authorizations: API Key path Parameters orgId required any ( OrgKey ) This can be an integer id, or a string subdomain (e.g. gristlabs ), or current if the org is implied by the domain in the url Responses 200 An org's workspaces and documents Response samples 200 Content type application/json Copy Expand all Collapse all { \"id\" : 42 , \"name\" : \"Grist Labs\" , \"domain\" : \"gristlabs\" , \"owner\" : { \"id\" : 101 , \"name\" : \"Helga Hufflepuff\" , \"picture\" : null } , \"access\" : \"owners\" , \"createdAt\" : \"2019-09-13T15:42:35.000Z\" , \"updatedAt\" : \"2019-09-13T15:42:35.000Z\" , \"workspaces\" : [ { \"id\" : 97 , \"name\" : \"Secret Plans\" , \"access\" : \"owners\" , \"docs\" : [ { \"id\" : 145 , \"name\" : \"Project Lollipop\" , \"access\" : \"owners\" , \"isPinned\" : true , \"urlId\" : null } ] } ] } /workspaces Sites can be organized into groups of documents called workspaces. Create an empty workspace post /orgs/{orgId}/workspaces https://docs.getgrist.com/api /orgs/{orgId}/workspaces https://<TEAM>.getgrist.com/api /orgs/{orgId}/workspaces Authorizations: API Key path Parameters orgId required any ( OrgKey ) This can be an integer id, or a string subdomain (e.g. gristlabs ), or current if the org is implied by the domain in the url Request Body schema: application/json settings for the workspace name string Responses 200 The workspace id Request samples Payload Content type application/json Copy Expand all Collapse all { \"name\" : \"Retreat Docs\" } Response samples 200 Content type application/json Copy Expand all Collapse all 155 Describe a workspace get /workspaces/{workspaceId} https://docs.getgrist.com/api /workspaces/{workspaceId} https://<TEAM>.getgrist.com/api /workspaces/{workspaceId} Authorizations: API Key path Parameters workspaceId required integer ( WorkspaceKey ) An integer id Responses 200 A workspace Response samples 200 Content type application/json Copy Expand all Collapse all { \"id\" : 97 , \"name\" : \"Secret Plans\" , \"access\" : \"owners\" , \"org\" : { \"id\" : 42 , \"name\" : \"Grist Labs\" , \"domain\" : \"gristlabs\" , \"owner\" : { \"id\" : 101 , \"name\" : \"Helga Hufflepuff\" , \"picture\" : null } , \"access\" : \"owners\" , \"createdAt\" : \"2019-09-13T15:42:35.000Z\" , \"updatedAt\" : \"2019-09-13T15:42:35.000Z\" } } Modify a workspace patch /workspaces/{workspaceId} https://docs.getgrist.com/api /workspaces/{workspaceId} https://<TEAM>.getgrist.com/api /workspaces/{workspaceId} Authorizations: API Key path Parameters workspaceId required integer ( WorkspaceKey ) An integer id Request Body schema: application/json the changes to make name string Responses 200 Success Request samples Payload Content type application/json Copy Expand all Collapse all { \"name\" : \"Retreat Docs\" } Delete a workspace delete /workspaces/{workspaceId} https://docs.getgrist.com/api /workspaces/{workspaceId} https://<TEAM>.getgrist.com/api /workspaces/{workspaceId} Authorizations: API Key path Parameters workspaceId required integer ( WorkspaceKey ) An integer id Responses 200 Success List users with access to workspace get /workspaces/{workspaceId}/access https://docs.getgrist.com/api /workspaces/{workspaceId}/access https://<TEAM>.getgrist.com/api /workspaces/{workspaceId}/access Authorizations: API Key path Parameters workspaceId required integer ( WorkspaceKey ) An integer id Responses 200 Users with access to workspace Response samples 200 Content type application/json Copy Expand all Collapse all { \"maxInheritedRole\" : \"owners\" , \"users\" : [ { \"id\" : 1 , \"name\" : \"Andrea\" , \"email\" : \"andrea@getgrist.com\" , \"access\" : \"owners\" , \"parentAccess\" : \"owners\" } ] } Change who has access to workspace patch /workspaces/{workspaceId}/access https://docs.getgrist.com/api /workspaces/{workspaceId}/access https://<TEAM>.getgrist.com/api /workspaces/{workspaceId}/access Authorizations: API Key path Parameters workspaceId required integer ( WorkspaceKey ) An integer id Request Body schema: application/json the changes to make delta required object ( WorkspaceAccessWrite ) Request samples Payload Content type application/json Copy Expand all Collapse all { \"delta\" : { \"maxInheritedRole\" : \"owners\" , \"users\" : { \"foo@getgrist.com\" : \"owners\" , \"bar@getgrist.com\" : null } } } /docs Workspaces contain collections of Grist documents. Create an empty document post /workspaces/{workspaceId}/docs https://docs.getgrist.com/api /workspaces/{workspaceId}/docs https://<TEAM>.getgrist.com/api /workspaces/{workspaceId}/docs Authorizations: API Key path Parameters workspaceId required integer ( WorkspaceKey ) An integer id Request Body schema: application/json settings for the document name string isPinned boolean Responses 200 The document id Request samples Payload Content type application/json Copy Expand all Collapse all { \"name\" : \"Competitive Analysis\" , \"isPinned\" : false } Response samples 200 Content type application/json Copy Expand all Collapse all \"8b97c8db-b4df-4b34-b72c-17459e70140a\" Describe a document get /docs/{docId} https://docs.getgrist.com/api /docs/{docId} https://<TEAM>.getgrist.com/api /docs/{docId} Authorizations: API Key path Parameters docId required string ( DocKey ) A string id (UUID) Responses 200 A document's metadata Response samples 200 Content type application/json Copy Expand all Collapse all { \"id\" : 145 , \"name\" : \"Project Lollipop\" , \"access\" : \"owners\" , \"isPinned\" : true , \"urlId\" : null , \"workspace\" : { \"id\" : 97 , \"name\" : \"Secret Plans\" , \"access\" : \"owners\" , \"org\" : { \"id\" : 42 , \"name\" : \"Grist Labs\" , \"domain\" : \"gristlabs\" , \"owner\" : { \"id\" : 101 , \"name\" : \"Helga Hufflepuff\" , \"picture\" : null } , \"access\" : \"owners\" , \"createdAt\" : \"2019-09-13T15:42:35.000Z\" , \"updatedAt\" : \"2019-09-13T15:42:35.000Z\" } } } Modify document metadata (but not its contents) patch /docs/{docId} https://docs.getgrist.com/api /docs/{docId} https://<TEAM>.getgrist.com/api /docs/{docId} Authorizations: API Key path Parameters docId required string ( DocKey ) A string id (UUID) Request Body schema: application/json the changes to make name string isPinned boolean Responses 200 Success Request samples Payload Content type application/json Copy Expand all Collapse all { \"name\" : \"Competitive Analysis\" , \"isPinned\" : false } Delete a document delete /docs/{docId} https://docs.getgrist.com/api /docs/{docId} https://<TEAM>.getgrist.com/api /docs/{docId} Authorizations: API Key path Parameters docId required string ( DocKey ) A string id (UUID) Responses 200 Success Move document to another workspace in the same org. patch /docs/{docId}/move https://docs.getgrist.com/api /docs/{docId}/move https://<TEAM>.getgrist.com/api /docs/{docId}/move Authorizations: API Key path Parameters docId required string ( DocKey ) A string id (UUID) Request Body schema: application/json the target workspace workspace required integer Responses 200 Success Request samples Payload Content type application/json Copy Expand all Collapse all { \"workspace\" : 597 } List users with access to document get /docs/{docId}/access https://docs.getgrist.com/api /docs/{docId}/access https://<TEAM>.getgrist.com/api /docs/{docId}/access Authorizations: API Key path Parameters docId required string ( DocKey ) A string id (UUID) Responses 200 Users with access to document Response samples 200 Content type application/json Copy Expand all Collapse all { \"maxInheritedRole\" : \"owners\" , \"users\" : [ { \"id\" : 1 , \"name\" : \"Andrea\" , \"email\" : \"andrea@getgrist.com\" , \"access\" : \"owners\" , \"parentAccess\" : \"owners\" } ] } Change who has access to document patch /docs/{docId}/access https://docs.getgrist.com/api /docs/{docId}/access https://<TEAM>.getgrist.com/api /docs/{docId}/access Authorizations: API Key path Parameters docId required string ( DocKey ) A string id (UUID) Request Body schema: application/json the changes to make delta required object ( WorkspaceAccessWrite ) Request samples Payload Content type application/json Copy Expand all Collapse all { \"delta\" : { \"maxInheritedRole\" : \"owners\" , \"users\" : { \"foo@getgrist.com\" : \"owners\" , \"bar@getgrist.com\" : null } } } Content of document, as an Sqlite file get /docs/{docId}/download https://docs.getgrist.com/api /docs/{docId}/download https://<TEAM>.getgrist.com/api /docs/{docId}/download Authorizations: API Key path Parameters docId required string ( DocKey ) A string id (UUID) Responses 200 A document's content in Sqlite form Content of document, as an Excel file get /docs/{docId}/download/xlsx https://docs.getgrist.com/api /docs/{docId}/download/xlsx https://<TEAM>.getgrist.com/api /docs/{docId}/download/xlsx Authorizations: API Key path Parameters docId required string ( DocKey ) A string id (UUID) Responses 200 A documents's content in Excel form Content of table, as a CSV file get /docs/{docId}/download/csv https://docs.getgrist.com/api /docs/{docId}/download/csv https://<TEAM>.getgrist.com/api /docs/{docId}/download/csv Authorizations: API Key path Parameters docId required string ( DocKey ) A string id (UUID) query Parameters tableId required string Name of a table (normalized). Responses 200 A table's content in CSV form /records Tables contain collections of records (also called rows). Fetch records from a table get /docs/{docId}/tables/{tableId}/records https://docs.getgrist.com/api /docs/{docId}/tables/{tableId}/records https://<TEAM>.getgrist.com/api /docs/{docId}/tables/{tableId}/records Authorizations: API Key path Parameters docId required string ( DocKey ) A string id (UUID) tableId required string name of a table (normalized) query Parameters filter string Example: filter={\"pet\": [\"cat\", \"dog\"]} This is a JSON object mapping column names to arrays of allowed values. For example, to filter column pet for values cat and dog , the filter would be {\"pet\": [\"cat\", \"dog\"]} . JSON contains characters that are not safe to place in a URL, so it is important to url-encode them. For this example, the url-encoding is %7B%22pet%22%3A%20%5B%22cat%22%2C%20%22dog%22%5D%7D . See https://rosettacode.org/wiki/URL_encoding for how to url-encode a string, or https://www.urlencoder.org/ to try some examples. Multiple columns can be filtered. For example the filter for pet being either cat or dog , AND size being either tiny or outrageously small , would be {\"pet\": [\"cat\", \"dog\"], \"size\": [\"tiny\", \"outrageously small\"]} . sort string Example: sort=pet,-age Order in which to return results. If a single column name is given (e.g. pet ), results are placed in ascending order of values in that column. To get results in an order that was previously prepared manually in Grist, use the special manualSort column name. Multiple columns can be specified, separated by commas (e.g. pet,age ). For descending order, prefix a column name with a - character (e.g. pet,-age ). To include additional sorting options append them after a colon (e.g. pet,-age:naturalSort;emptyFirst,owner ). Available options are: choiceOrder , naturalSort , emptyFirst . Without the sort parameter, the order of results is unspecified. limit number Example: limit=5 Return at most this number of rows. A value of 0 is equivalent to having no limit. header Parameters X-Sort string Example: pet,-age Same as sort query parameter. X-Limit number Example: 5 Same as limit query parameter. Responses 200 Records from the table Response samples 200 Content type application/json Copy Expand all Collapse all { \"records\" : [ { \"id\" : 1 , \"fields\" : { \"pet\" : \"cat\" , \"popularity\" : 67 } } , { \"id\" : 2 , \"fields\" : { \"pet\" : \"dog\" , \"popularity\" : 95 } } ] } Add records to a table post /docs/{docId}/tables/{tableId}/records https://docs.getgrist.com/api /docs/{docId}/tables/{tableId}/records https://<TEAM>.getgrist.com/api /docs/{docId}/tables/{tableId}/records Authorizations: API Key path Parameters docId required string ( DocKey ) A string id (UUID) tableId required string name of a table (normalized) Request Body schema: application/json the records to add records required Array of objects Responses 200 IDs of records added Request samples Payload Content type application/json Copy Expand all Collapse all { \"records\" : [ { \"fields\" : { \"pet\" : \"cat\" , \"popularity\" : 67 } } , { \"fields\" : { \"pet\" : \"dog\" , \"popularity\" : 95 } } ] } Response samples 200 Content type application/json Copy Expand all Collapse all { \"records\" : [ { \"id\" : 1 } , { \"id\" : 2 } ] } Modify records of a table patch /docs/{docId}/tables/{tableId}/records https://docs.getgrist.com/api /docs/{docId}/tables/{tableId}/records https://<TEAM>.getgrist.com/api /docs/{docId}/tables/{tableId}/records Authorizations: API Key path Parameters docId required string ( DocKey ) A string id (UUID) tableId required string name of a table (normalized) Request Body schema: application/json the records to change, with ids records required Array of objects Responses 200 Success Request samples Payload Content type application/json Copy Expand all Collapse all { \"records\" : [ { \"id\" : 1 , \"fields\" : { \"pet\" : \"cat\" , \"popularity\" : 67 } } , { \"id\" : 2 , \"fields\" : { \"pet\" : \"dog\" , \"popularity\" : 95 } } ] } /columns Tables are structured as a collection of columns. List columns in a table get /docs/{docId}/tables/{tableId}/columns https://docs.getgrist.com/api /docs/{docId}/tables/{tableId}/columns https://<TEAM>.getgrist.com/api /docs/{docId}/tables/{tableId}/columns Authorizations: API Key path Parameters docId required string ( DocKey ) A string id (UUID) tableId required string name of a table (normalized) Responses 200 The columns in a table Response samples 200 Content type application/json Copy Expand all Collapse all { \"columns\" : [ { \"id\" : \"pet\" , \"fields\" : { \"label\" : \"Pet\" } } , { \"id\" : \"popularity\" , \"fields\" : { \"label\" : \"Popularity \u2764\" } } ] } /data Work with table data, using a (now deprecated) columnar format. We now recommend the records endpoints. Fetch data from a table Deprecated get /docs/{docId}/tables/{tableId}/data https://docs.getgrist.com/api /docs/{docId}/tables/{tableId}/data https://<TEAM>.getgrist.com/api /docs/{docId}/tables/{tableId}/data Deprecated in favor of records endpoints. We have no immediate plans to remove these endpoints, but consider records a better starting point for new projects. Authorizations: API Key path Parameters docId required string ( DocKey ) A string id (UUID) tableId required string name of a table (normalized) query Parameters filter string Example: filter={\"pet\": [\"cat\", \"dog\"]} This is a JSON object mapping column names to arrays of allowed values. For example, to filter column pet for values cat and dog , the filter would be {\"pet\": [\"cat\", \"dog\"]} . JSON contains characters that are not safe to place in a URL, so it is important to url-encode them. For this example, the url-encoding is %7B%22pet%22%3A%20%5B%22cat%22%2C%20%22dog%22%5D%7D . See https://rosettacode.org/wiki/URL_encoding for how to url-encode a string, or https://www.urlencoder.org/ to try some examples. Multiple columns can be filtered. For example the filter for pet being either cat or dog , AND size being either tiny or outrageously small , would be {\"pet\": [\"cat\", \"dog\"], \"size\": [\"tiny\", \"outrageously small\"]} . sort string Example: sort=pet,-age Order in which to return results. If a single column name is given (e.g. pet ), results are placed in ascending order of values in that column. To get results in an order that was previously prepared manually in Grist, use the special manualSort column name. Multiple columns can be specified, separated by commas (e.g. pet,age ). For descending order, prefix a column name with a - character (e.g. pet,-age ). To include additional sorting options append them after a colon (e.g. pet,-age:naturalSort;emptyFirst,owner ). Available options are: choiceOrder , naturalSort , emptyFirst . Without the sort parameter, the order of results is unspecified. limit number Example: limit=5 Return at most this number of rows. A value of 0 is equivalent to having no limit. header Parameters X-Sort string Example: pet,-age Same as sort query parameter. X-Limit number Example: 5 Same as limit query parameter. Responses 200 Cells from the table Response samples 200 Content type application/json Copy Expand all Collapse all { \"id\" : [ 1 , 2 ] , \"pet\" : [ \"cat\" , \"dog\" ] , \"popularity\" : [ 67 , 95 ] } Add rows to a table Deprecated post /docs/{docId}/tables/{tableId}/data https://docs.getgrist.com/api /docs/{docId}/tables/{tableId}/data https://<TEAM>.getgrist.com/api /docs/{docId}/tables/{tableId}/data Deprecated in favor of records endpoints. We have no immediate plans to remove these endpoints, but consider records a better starting point for new projects. Authorizations: API Key path Parameters docId required string ( DocKey ) A string id (UUID) tableId required string name of a table (normalized) Request Body schema: application/json the data to add property name* Array of any Responses 200 IDs of rows added Request samples Payload Content type application/json Copy Expand all Collapse all { \"pet\" : [ \"cat\" , \"dog\" ] , \"popularity\" : [ 67 , 95 ] } Response samples 200 Content type application/json Copy Expand all Collapse all [ 101 , 102 , 103 ] Modify rows of a table Deprecated patch /docs/{docId}/tables/{tableId}/data https://docs.getgrist.com/api /docs/{docId}/tables/{tableId}/data https://<TEAM>.getgrist.com/api /docs/{docId}/tables/{tableId}/data Deprecated in favor of records endpoints. We have no immediate plans to remove these endpoints, but consider records a better starting point for new projects. Authorizations: API Key path Parameters docId required string ( DocKey ) A string id (UUID) tableId required string name of a table (normalized) Request Body schema: application/json the data to change, with ids id required Array of integers property name* Array of any Responses 200 IDs of rows modified Request samples Payload Content type application/json Copy Expand all Collapse all { \"id\" : [ 1 , 2 ] , \"pet\" : [ \"cat\" , \"dog\" ] , \"popularity\" : [ 67 , 95 ] } Response samples 200 Content type application/json Copy Expand all Collapse all [ 101 , 102 , 103 ] Delete rows of a table post /docs/{docId}/tables/{tableId}/data/delete https://docs.getgrist.com/api /docs/{docId}/tables/{tableId}/data/delete https://<TEAM>.getgrist.com/api /docs/{docId}/tables/{tableId}/data/delete Authorizations: API Key path Parameters docId required string ( DocKey ) A string id (UUID) tableId required string name of a table (normalized) Request Body schema: application/json the IDs of rows to remove Array integer Responses 200 Nothing returned Request samples Payload Content type application/json Copy Expand all Collapse all [ 101 , 102 , 103 ] Response samples 200 Content type application/json Copy Expand all Collapse all null /attachments Documents may include attached files. Data records can refer to these using a column of type Attachments . Upload attachments to a doc post /docs/{docId}/attachments https://docs.getgrist.com/api /docs/{docId}/attachments https://<TEAM>.getgrist.com/api /docs/{docId}/attachments Authorizations: API Key path Parameters docId required string ( DocKey ) A string id (UUID) Request Body schema: multipart/form-data the files to add to the doc upload Array of File Responses 200 IDs of attachments added, one per file. Response samples 200 Content type application/json Copy Expand all Collapse all [ 101 , 102 , 103 ] Get the metadata for an attachment get /docs/{docId}/attachments/{attachmentId} https://docs.getgrist.com/api /docs/{docId}/attachments/{attachmentId} https://<TEAM>.getgrist.com/api /docs/{docId}/attachments/{attachmentId} Authorizations: API Key path Parameters docId required string ( DocKey ) A string id (UUID) attachmentId required number ( AttachmentId ) An integer ID Responses 200 Attachment metadata Response samples 200 Content type application/json Copy Expand all Collapse all { \"fileName\" : \"logo.png\" , \"fileSize\" : 12345 , \"timeUploaded\" : \"2020-02-13T12:17:19.000Z\" } Download the contents of an attachment get /docs/{docId}/attachments/{attachmentId}/download https://docs.getgrist.com/api /docs/{docId}/attachments/{attachmentId}/download https://<TEAM>.getgrist.com/api /docs/{docId}/attachments/{attachmentId}/download Authorizations: API Key path Parameters docId required string ( DocKey ) A string id (UUID) attachmentId required number ( AttachmentId ) An integer ID Responses 200 Attachment contents, with suitable Content-Type. const __redoc_state = {\"menu\":{\"activeItemIdx\":-1},\"spec\":{\"data\":{\"info\":{\"description\":\"An API for manipulating Grist sites, workspaces, and documents.\\n\\n# Authentication\\n\\n<!-- ReDoc-Inject: <security-definitions> -->\",\"version\":\"1.0.1\",\"title\":\"Grist API\"},\"openapi\":\"3.0.0\",\"security\":[{\"API Key\":[]}],\"servers\":[{\"url\":\"https://docs.getgrist.com/api\"},{\"url\":\"https://<TEAM>.getgrist.com/api\"}],\"paths\":{\"/orgs\":{\"get\":{\"tags\":[\"/orgs\"],\"summary\":\"List the orgs you have access to\",\"description\":\"This enumerates all the team sites or personal areas available.\",\"responses\":{\"200\":{\"description\":\"An array of organizations\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/Orgs\"}}}}}}},\"/orgs/{orgId}\":{\"get\":{\"tags\":[\"/orgs\"],\"summary\":\"Describe an org\",\"parameters\":[{\"in\":\"path\",\"name\":\"orgId\",\"schema\":{\"$ref\":\"#/components/schemas/OrgKey\"},\"required\":true}],\"responses\":{\"200\":{\"description\":\"An organization\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/Org\"}}}}}},\"patch\":{\"tags\":[\"/orgs\"],\"summary\":\"Modify an org\",\"parameters\":[{\"in\":\"path\",\"name\":\"orgId\",\"schema\":{\"$ref\":\"#/components/schemas/OrgKey\"},\"required\":true}],\"requestBody\":{\"description\":\"the changes to make\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/OrgParameters\"}}},\"required\":true},\"responses\":{\"200\":{\"description\":\"Success\"}}}},\"/orgs/{orgId}/access\":{\"get\":{\"tags\":[\"/orgs\"],\"summary\":\"List users with access to org\",\"parameters\":[{\"in\":\"path\",\"name\":\"orgId\",\"schema\":{\"$ref\":\"#/components/schemas/OrgKey\"},\"required\":true}],\"responses\":{\"200\":{\"description\":\"Users with access to org\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/OrgAccessRead\"}}}}}},\"patch\":{\"tags\":[\"/orgs\"],\"summary\":\"Change who has access to org\",\"parameters\":[{\"in\":\"path\",\"name\":\"orgId\",\"schema\":{\"$ref\":\"#/components/schemas/OrgKey\"},\"required\":true}],\"requestBody\":{\"description\":\"the changes to make\",\"content\":{\"application/json\":{\"schema\":{\"type\":\"object\",\"required\":[\"delta\"],\"properties\":{\"delta\":{\"$ref\":\"#/components/schemas/OrgAccessWrite\"}}}}},\"required\":true}}},\"/orgs/{orgId}/workspaces\":{\"get\":{\"tags\":[\"/orgs\"],\"summary\":\"List workspaces and documents within an org\",\"parameters\":[{\"in\":\"path\",\"name\":\"orgId\",\"schema\":{\"$ref\":\"#/components/schemas/OrgKey\"},\"required\":true}],\"responses\":{\"200\":{\"description\":\"An org's workspaces and documents\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/OrgWithWorkspaces\"}}}}}},\"post\":{\"tags\":[\"/workspaces\"],\"summary\":\"Create an empty workspace\",\"parameters\":[{\"in\":\"path\",\"name\":\"orgId\",\"schema\":{\"$ref\":\"#/components/schemas/OrgKey\"},\"required\":true}],\"requestBody\":{\"description\":\"settings for the workspace\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/WorkspaceParameters\"}}},\"required\":true},\"responses\":{\"200\":{\"description\":\"The workspace id\",\"content\":{\"application/json\":{\"schema\":{\"type\":\"integer\",\"description\":\"an identifier for the workspace\",\"example\":155}}}}}}},\"/workspaces/{workspaceId}\":{\"get\":{\"tags\":[\"/workspaces\"],\"summary\":\"Describe a workspace\",\"parameters\":[{\"in\":\"path\",\"name\":\"workspaceId\",\"schema\":{\"$ref\":\"#/components/schemas/WorkspaceKey\"},\"required\":true}],\"responses\":{\"200\":{\"description\":\"A workspace\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/WorkspaceWithOrg\"}}}}}},\"patch\":{\"tags\":[\"/workspaces\"],\"summary\":\"Modify a workspace\",\"parameters\":[{\"in\":\"path\",\"name\":\"workspaceId\",\"schema\":{\"$ref\":\"#/components/schemas/WorkspaceKey\"},\"required\":true}],\"requestBody\":{\"description\":\"the changes to make\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/WorkspaceParameters\"}}},\"required\":true},\"responses\":{\"200\":{\"description\":\"Success\"}}},\"delete\":{\"tags\":[\"/workspaces\"],\"summary\":\"Delete a workspace\",\"parameters\":[{\"in\":\"path\",\"name\":\"workspaceId\",\"schema\":{\"$ref\":\"#/components/schemas/WorkspaceKey\"},\"required\":true}],\"responses\":{\"200\":{\"description\":\"Success\"}}}},\"/workspaces/{workspaceId}/docs\":{\"post\":{\"tags\":[\"/docs\"],\"summary\":\"Create an empty document\",\"parameters\":[{\"in\":\"path\",\"name\":\"workspaceId\",\"schema\":{\"$ref\":\"#/components/schemas/WorkspaceKey\"},\"required\":true}],\"requestBody\":{\"description\":\"settings for the document\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/DocParameters\"}}},\"required\":true},\"responses\":{\"200\":{\"description\":\"The document id\",\"content\":{\"application/json\":{\"schema\":{\"type\":\"string\",\"description\":\"a unique identifier for the document\",\"example\":\"8b97c8db-b4df-4b34-b72c-17459e70140a\"}}}}}}},\"/workspaces/{workspaceId}/access\":{\"get\":{\"tags\":[\"/workspaces\"],\"summary\":\"List users with access to workspace\",\"parameters\":[{\"in\":\"path\",\"name\":\"workspaceId\",\"schema\":{\"$ref\":\"#/components/schemas/WorkspaceKey\"},\"required\":true}],\"responses\":{\"200\":{\"description\":\"Users with access to workspace\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/WorkspaceAccessRead\"}}}}}},\"patch\":{\"tags\":[\"/workspaces\"],\"summary\":\"Change who has access to workspace\",\"parameters\":[{\"in\":\"path\",\"name\":\"workspaceId\",\"schema\":{\"$ref\":\"#/components/schemas/WorkspaceKey\"},\"required\":true}],\"requestBody\":{\"description\":\"the changes to make\",\"content\":{\"application/json\":{\"schema\":{\"type\":\"object\",\"required\":[\"delta\"],\"properties\":{\"delta\":{\"$ref\":\"#/components/schemas/WorkspaceAccessWrite\"}}}}},\"required\":true}}},\"/docs/{docId}\":{\"get\":{\"tags\":[\"/docs\"],\"summary\":\"Describe a document\",\"parameters\":[{\"in\":\"path\",\"name\":\"docId\",\"schema\":{\"$ref\":\"#/components/schemas/DocKey\"},\"required\":true}],\"responses\":{\"200\":{\"description\":\"A document's metadata\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/DocWithWorkspace\"}}}}}},\"patch\":{\"tags\":[\"/docs\"],\"summary\":\"Modify document metadata (but not its contents)\",\"parameters\":[{\"in\":\"path\",\"name\":\"docId\",\"schema\":{\"$ref\":\"#/components/schemas/DocKey\"},\"required\":true}],\"requestBody\":{\"description\":\"the changes to make\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/DocParameters\"}}},\"required\":true},\"responses\":{\"200\":{\"description\":\"Success\"}}},\"delete\":{\"tags\":[\"/docs\"],\"summary\":\"Delete a document\",\"parameters\":[{\"in\":\"path\",\"name\":\"docId\",\"schema\":{\"$ref\":\"#/components/schemas/DocKey\"},\"required\":true}],\"responses\":{\"200\":{\"description\":\"Success\"}}}},\"/docs/{docId}/move\":{\"patch\":{\"tags\":[\"/docs\"],\"summary\":\"Move document to another workspace in the same org.\",\"parameters\":[{\"in\":\"path\",\"name\":\"docId\",\"schema\":{\"$ref\":\"#/components/schemas/DocKey\"},\"required\":true}],\"requestBody\":{\"description\":\"the target workspace\",\"content\":{\"application/json\":{\"schema\":{\"type\":\"object\",\"required\":[\"workspace\"],\"properties\":{\"workspace\":{\"type\":\"integer\",\"example\":597}}}}}},\"responses\":{\"200\":{\"description\":\"Success\"}}}},\"/docs/{docId}/access\":{\"get\":{\"tags\":[\"/docs\"],\"summary\":\"List users with access to document\",\"parameters\":[{\"in\":\"path\",\"name\":\"docId\",\"schema\":{\"$ref\":\"#/components/schemas/DocKey\"},\"required\":true}],\"responses\":{\"200\":{\"description\":\"Users with access to document\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/WorkspaceAccessRead\"}}}}}},\"patch\":{\"tags\":[\"/docs\"],\"summary\":\"Change who has access to document\",\"parameters\":[{\"in\":\"path\",\"name\":\"docId\",\"schema\":{\"$ref\":\"#/components/schemas/DocKey\"},\"required\":true}],\"requestBody\":{\"description\":\"the changes to make\",\"content\":{\"application/json\":{\"schema\":{\"type\":\"object\",\"required\":[\"delta\"],\"properties\":{\"delta\":{\"$ref\":\"#/components/schemas/WorkspaceAccessWrite\"}}}}},\"required\":true}}},\"/docs/{docId}/download\":{\"get\":{\"tags\":[\"/docs\"],\"summary\":\"Content of document, as an Sqlite file\",\"parameters\":[{\"in\":\"path\",\"name\":\"docId\",\"schema\":{\"$ref\":\"#/components/schemas/DocKey\"},\"required\":true}],\"responses\":{\"200\":{\"description\":\"A document's content in Sqlite form\",\"content\":{\"application/x-sqlite3\":{\"schema\":{\"type\":\"string\",\"format\":\"binary\"}}}}}}},\"/docs/{docId}/download/xlsx\":{\"get\":{\"tags\":[\"/docs\"],\"summary\":\"Content of document, as an Excel file\",\"parameters\":[{\"in\":\"path\",\"name\":\"docId\",\"schema\":{\"$ref\":\"#/components/schemas/DocKey\"},\"required\":true}],\"responses\":{\"200\":{\"description\":\"A documents's content in Excel form\",\"content\":{\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\":{\"schema\":{\"type\":\"string\",\"format\":\"binary\"}}}}}}},\"/docs/{docId}/download/csv\":{\"get\":{\"tags\":[\"/docs\"],\"summary\":\"Content of table, as a CSV file\",\"parameters\":[{\"in\":\"path\",\"name\":\"docId\",\"schema\":{\"$ref\":\"#/components/schemas/DocKey\"},\"required\":true},{\"in\":\"query\",\"name\":\"tableId\",\"schema\":{\"type\":\"string\",\"description\":\"Name of a table (normalized).\"},\"required\":true}],\"responses\":{\"200\":{\"description\":\"A table's content in CSV form\",\"content\":{\"text/csv\":{\"schema\":{\"type\":\"string\"}}}}}}},\"/docs/{docId}/tables/{tableId}/data\":{\"get\":{\"tags\":[\"/data\"],\"summary\":\"Fetch data from a table\",\"deprecated\":true,\"description\":\"Deprecated in favor of `records` endpoints. We have no immediate plans to remove these endpoints, but consider `records` a better starting point for new projects.\",\"parameters\":[{\"$ref\":\"#/components/parameters/docIdPathParam\"},{\"$ref\":\"#/components/parameters/tableIdPathParam\"},{\"$ref\":\"#/components/parameters/filterQueryParam\"},{\"$ref\":\"#/components/parameters/sortQueryParam\"},{\"$ref\":\"#/components/parameters/limitQueryParam\"},{\"$ref\":\"#/components/parameters/sortHeaderParam\"},{\"$ref\":\"#/components/parameters/limitHeaderParam\"}],\"responses\":{\"200\":{\"description\":\"Cells from the table\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/Data\"}}}}}},\"post\":{\"tags\":[\"/data\"],\"summary\":\"Add rows to a table\",\"deprecated\":true,\"description\":\"Deprecated in favor of `records` endpoints. We have no immediate plans to remove these endpoints, but consider `records` a better starting point for new projects.\",\"parameters\":[{\"$ref\":\"#/components/parameters/docIdPathParam\"},{\"$ref\":\"#/components/parameters/tableIdPathParam\"}],\"requestBody\":{\"description\":\"the data to add\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/DataWithoutId\"}}},\"required\":true},\"responses\":{\"200\":{\"description\":\"IDs of rows added\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/RowIds\"}}}}}},\"patch\":{\"tags\":[\"/data\"],\"summary\":\"Modify rows of a table\",\"deprecated\":true,\"description\":\"Deprecated in favor of `records` endpoints. We have no immediate plans to remove these endpoints, but consider `records` a better starting point for new projects.\",\"parameters\":[{\"$ref\":\"#/components/parameters/docIdPathParam\"},{\"$ref\":\"#/components/parameters/tableIdPathParam\"}],\"requestBody\":{\"description\":\"the data to change, with ids\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/Data\"}}},\"required\":true},\"responses\":{\"200\":{\"description\":\"IDs of rows modified\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/RowIds\"}}}}}}},\"/docs/{docId}/tables/{tableId}/data/delete\":{\"post\":{\"tags\":[\"/data\"],\"summary\":\"Delete rows of a table\",\"parameters\":[{\"$ref\":\"#/components/parameters/docIdPathParam\"},{\"$ref\":\"#/components/parameters/tableIdPathParam\"}],\"requestBody\":{\"description\":\"the IDs of rows to remove\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/RowIds\"}}},\"required\":true},\"responses\":{\"200\":{\"description\":\"Nothing returned\",\"content\":{\"application/json\":{\"schema\":{\"type\":null}}}}}}},\"/docs/{docId}/attachments\":{\"post\":{\"tags\":[\"/attachments\"],\"summary\":\"Upload attachments to a doc\",\"parameters\":[{\"in\":\"path\",\"name\":\"docId\",\"schema\":{\"$ref\":\"#/components/schemas/DocKey\"},\"required\":true}],\"requestBody\":{\"description\":\"the files to add to the doc\",\"content\":{\"multipart/form-data\":{\"schema\":{\"$ref\":\"#/components/schemas/AttachmentUpload\"}}},\"required\":true},\"responses\":{\"200\":{\"description\":\"IDs of attachments added, one per file.\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/RowIds\"}}}}}}},\"/docs/{docId}/attachments/{attachmentId}\":{\"get\":{\"tags\":[\"/attachments\"],\"summary\":\"Get the metadata for an attachment\",\"parameters\":[{\"in\":\"path\",\"name\":\"docId\",\"schema\":{\"$ref\":\"#/components/schemas/DocKey\"},\"required\":true},{\"in\":\"path\",\"name\":\"attachmentId\",\"schema\":{\"$ref\":\"#/components/schemas/AttachmentId\"},\"required\":true}],\"responses\":{\"200\":{\"description\":\"Attachment metadata\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/AttachmentMetadata\"}}}}}}},\"/docs/{docId}/attachments/{attachmentId}/download\":{\"get\":{\"tags\":[\"/attachments\"],\"summary\":\"Download the contents of an attachment\",\"parameters\":[{\"in\":\"path\",\"name\":\"docId\",\"schema\":{\"$ref\":\"#/components/schemas/DocKey\"},\"required\":true},{\"in\":\"path\",\"name\":\"attachmentId\",\"schema\":{\"$ref\":\"#/components/schemas/AttachmentId\"},\"required\":true}],\"responses\":{\"200\":{\"description\":\"Attachment contents, with suitable Content-Type.\"}}}},\"/docs/{docId}/tables/{tableId}/records\":{\"get\":{\"tags\":[\"/records\"],\"summary\":\"Fetch records from a table\",\"parameters\":[{\"$ref\":\"#/components/parameters/docIdPathParam\"},{\"$ref\":\"#/components/parameters/tableIdPathParam\"},{\"$ref\":\"#/components/parameters/filterQueryParam\"},{\"$ref\":\"#/components/parameters/sortQueryParam\"},{\"$ref\":\"#/components/parameters/limitQueryParam\"},{\"$ref\":\"#/components/parameters/sortHeaderParam\"},{\"$ref\":\"#/components/parameters/limitHeaderParam\"}],\"responses\":{\"200\":{\"description\":\"Records from the table\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/Records\"}}}}}},\"post\":{\"tags\":[\"/records\"],\"summary\":\"Add records to a table\",\"parameters\":[{\"$ref\":\"#/components/parameters/docIdPathParam\"},{\"$ref\":\"#/components/parameters/tableIdPathParam\"}],\"requestBody\":{\"description\":\"the records to add\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/RecordsWithoutId\"}}},\"required\":true},\"responses\":{\"200\":{\"description\":\"IDs of records added\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/RecordsWithoutFields\"}}}}}},\"patch\":{\"tags\":[\"/records\"],\"summary\":\"Modify records of a table\",\"parameters\":[{\"$ref\":\"#/components/parameters/docIdPathParam\"},{\"$ref\":\"#/components/parameters/tableIdPathParam\"}],\"requestBody\":{\"description\":\"the records to change, with ids\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/Records\"}}},\"required\":true},\"responses\":{\"200\":{\"description\":\"Success\"}}}},\"/docs/{docId}/tables/{tableId}/columns\":{\"get\":{\"tags\":[\"/columns\"],\"summary\":\"List columns in a table\",\"parameters\":[{\"$ref\":\"#/components/parameters/docIdPathParam\"},{\"$ref\":\"#/components/parameters/tableIdPathParam\"}],\"responses\":{\"200\":{\"description\":\"The columns in a table\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/Columns\"}}}}}}}},\"tags\":[{\"name\":\"/orgs\",\"description\":\"Team sites and personal spaces are called 'orgs' in the API.\"},{\"name\":\"/workspaces\",\"description\":\"Sites can be organized into groups of documents called workspaces.\"},{\"name\":\"/docs\",\"description\":\"Workspaces contain collections of Grist documents.\"},{\"name\":\"/records\",\"description\":\"Tables contain collections of records (also called rows).\"},{\"name\":\"/columns\",\"description\":\"Tables are structured as a collection of columns.\"},{\"name\":\"/data\",\"description\":\"Work with table data, using a (now deprecated) columnar format. We now recommend the `records` endpoints.\"},{\"name\":\"/attachments\",\"description\":\"Documents may include attached files. Data records can refer to these using a column of type `Attachments`.\"}],\"components\":{\"securitySchemes\":{\"API Key\":{\"type\":\"http\",\"scheme\":\"bearer\",\"bearerFormat\":\"Authorization: Bearer XXXXXXXXXXX\",\"description\":\"Access to the Grist API is controlled by an Authorization header, which should contain the word 'Bearer', followed by a space, followed by your API key.\"}},\"schemas\":{\"OrgKey\":{\"oneof\":[\"integer\",\"string\"],\"description\":\"This can be an integer id, or a string subdomain (e.g. `gristlabs`), or `current` if the org is implied by the domain in the url\"},\"WorkspaceKey\":{\"type\":\"integer\",\"description\":\"An integer id\"},\"DocKey\":{\"type\":\"string\",\"description\":\"A string id (UUID)\"},\"Org\":{\"type\":\"object\",\"required\":[\"id\",\"name\",\"domain\",\"owner\",\"createdAt\",\"updatedAt\",\"access\"],\"properties\":{\"id\":{\"type\":\"integer\",\"format\":\"int64\",\"example\":42},\"name\":{\"type\":\"string\",\"example\":\"Grist Labs\"},\"domain\":{\"type\":\"string\",\"nullable\":true,\"example\":\"gristlabs\"},\"owner\":{\"type\":\"object\",\"$ref\":\"#/components/schemas/User\",\"nullable\":true},\"access\":{\"type\":\"string\",\"$ref\":\"#/components/schemas/Access\"},\"createdAt\":{\"type\":\"string\",\"example\":\"2019-09-13T15:42:35.000Z\"},\"updatedAt\":{\"type\":\"string\",\"example\":\"2019-09-13T15:42:35.000Z\"}}},\"Orgs\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/components/schemas/Org\"}},\"Workspace\":{\"type\":\"object\",\"required\":[\"id\",\"name\",\"access\"],\"properties\":{\"id\":{\"type\":\"integer\",\"format\":\"int64\",\"example\":97},\"name\":{\"type\":\"string\",\"example\":\"Secret Plans\"},\"access\":{\"type\":\"string\",\"$ref\":\"#/components/schemas/Access\"}}},\"Doc\":{\"type\":\"object\",\"required\":[\"id\",\"name\",\"isPinned\",\"urlId\",\"access\"],\"properties\":{\"id\":{\"type\":\"string\",\"example\":145},\"name\":{\"type\":\"string\",\"example\":\"Project Lollipop\"},\"access\":{\"type\":\"string\",\"$ref\":\"#/components/schemas/Access\"},\"isPinned\":{\"type\":\"boolean\",\"example\":true},\"urlId\":{\"type\":\"string\",\"nullable\":true,\"example\":null}}},\"Workspaces\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/components/schemas/Workspace\"}},\"WorkspaceWithDocs\":{\"allOf\":[{\"$ref\":\"#/components/schemas/Workspace\"},{\"type\":\"object\",\"required\":[\"docs\"],\"properties\":{\"docs\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/components/schemas/Doc\"}}}}]},\"WorkspaceWithOrg\":{\"allOf\":[{\"$ref\":\"#/components/schemas/Workspace\"},{\"type\":\"object\",\"required\":[\"org\"],\"properties\":{\"org\":{\"$ref\":\"#/components/schemas/Org\"}}}]},\"OrgWithWorkspaces\":{\"allOf\":[{\"$ref\":\"#/components/schemas/Org\"},{\"type\":\"object\",\"required\":[\"workspaces\"],\"properties\":{\"workspaces\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/components/schemas/WorkspaceWithDocs\"}}}}]},\"DocWithWorkspace\":{\"allOf\":[{\"$ref\":\"#/components/schemas/Doc\"},{\"type\":\"object\",\"required\":[\"workspace\"],\"properties\":{\"workspace\":{\"$ref\":\"#/components/schemas/WorkspaceWithOrg\"}}}]},\"User\":{\"type\":\"object\",\"required\":[\"id\",\"name\",\"picture\"],\"properties\":{\"id\":{\"type\":\"integer\",\"format\":\"int64\",\"example\":101},\"name\":{\"type\":\"string\",\"example\":\"Helga Hufflepuff\"},\"picture\":{\"type\":\"string\",\"nullable\":true,\"example\":null}}},\"Access\":{\"type\":\"string\",\"enum\":[\"owners\",\"editors\",\"viewers\"]},\"Data\":{\"type\":\"object\",\"required\":[\"id\"],\"properties\":{\"id\":{\"type\":\"array\",\"items\":{\"type\":\"integer\"}}},\"additionalProperties\":{\"type\":\"array\",\"items\":{}},\"example\":{\"id\":[1,2],\"pet\":[\"cat\",\"dog\"],\"popularity\":[67,95]}},\"DataWithoutId\":{\"type\":\"object\",\"additionalProperties\":{\"type\":\"array\",\"items\":{}},\"example\":{\"pet\":[\"cat\",\"dog\"],\"popularity\":[67,95]}},\"Records\":{\"type\":\"object\",\"required\":[\"records\"],\"properties\":{\"records\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"required\":[\"id\",\"fields\"],\"properties\":{\"id\":{\"type\":\"number\",\"example\":1},\"fields\":{\"type\":\"object\"}}}}},\"example\":{\"records\":[{\"id\":1,\"fields\":{\"pet\":\"cat\",\"popularity\":67}},{\"id\":2,\"fields\":{\"pet\":\"dog\",\"popularity\":95}}]}},\"RecordsWithoutId\":{\"type\":\"object\",\"required\":[\"records\"],\"properties\":{\"records\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"required\":[\"fields\"],\"properties\":{\"fields\":{\"type\":\"object\"}}}}},\"example\":{\"records\":[{\"fields\":{\"pet\":\"cat\",\"popularity\":67}},{\"fields\":{\"pet\":\"dog\",\"popularity\":95}}]}},\"RecordsWithoutFields\":{\"type\":\"object\",\"required\":[\"records\"],\"properties\":{\"records\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"required\":[\"id\"],\"properties\":{\"id\":{\"type\":\"number\",\"example\":1}}}}},\"example\":{\"records\":[{\"id\":1},{\"id\":2}]}},\"Columns\":{\"type\":\"object\",\"required\":[\"columns\"],\"properties\":{\"columns\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"required\":[\"id\",\"fields\"],\"properties\":{\"id\":{\"type\":\"string\",\"example\":\"ColumnName\"},\"fields\":{\"type\":\"object\"}}}}},\"example\":{\"columns\":[{\"id\":\"pet\",\"fields\":{\"label\":\"Pet\"}},{\"id\":\"popularity\",\"fields\":{\"label\":\"Popularity \u2764\"}}]}},\"RowIds\":{\"type\":\"array\",\"example\":[101,102,103],\"items\":{\"type\":\"integer\"}},\"DocParameters\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\",\"example\":\"Competitive Analysis\"},\"isPinned\":{\"type\":\"boolean\",\"example\":false}}},\"WorkspaceParameters\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\",\"example\":\"Retreat Docs\"}}},\"OrgParameters\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\",\"example\":\"ACME Unlimited\"}}},\"OrgAccessRead\":{\"type\":\"object\",\"required\":[\"users\"],\"properties\":{\"users\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"required\":[\"id\",\"name\"],\"properties\":{\"id\":{\"type\":\"integer\",\"example\":1},\"name\":{\"type\":\"string\",\"example\":\"Andrea\"},\"email\":{\"type\":\"string\",\"example\":\"andrea@getgrist.com\"},\"access\":{\"$ref\":\"#/components/schemas/Access\"}}}}}},\"OrgAccessWrite\":{\"type\":\"object\",\"required\":[\"users\"],\"properties\":{\"users\":{\"type\":\"object\",\"additionalProperties\":{\"type\":\"string\",\"enum\":[\"owners\",\"editors\",\"viewers\",\"members\",null]},\"example\":{\"foo@getgrist.com\":\"owners\",\"bar@getgrist.com\":null}}}},\"WorkspaceAccessRead\":{\"type\":\"object\",\"required\":[\"maxInheritedRole\",\"users\"],\"properties\":{\"maxInheritedRole\":{\"$ref\":\"#/components/schemas/Access\"},\"users\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"required\":[\"id\",\"name\"],\"properties\":{\"id\":{\"type\":\"integer\",\"example\":1},\"name\":{\"type\":\"string\",\"example\":\"Andrea\"},\"email\":{\"type\":\"string\",\"example\":\"andrea@getgrist.com\"},\"access\":{\"$ref\":\"#/components/schemas/Access\"},\"parentAccess\":{\"$ref\":\"#/components/schemas/Access\"}}}}}},\"WorkspaceAccessWrite\":{\"type\":\"object\",\"properties\":{\"maxInheritedRole\":{\"$ref\":\"#/components/schemas/Access\"},\"users\":{\"type\":\"object\",\"additionalProperties\":{\"type\":\"string\",\"enum\":[\"owners\",\"editors\",\"viewers\",\"members\",null]},\"example\":{\"foo@getgrist.com\":\"owners\",\"bar@getgrist.com\":null}}}},\"DocAccessWrite\":{\"$ref\":\"#/components/schemas/WorkspaceAccessWrite\"},\"DocAccessRead\":{\"$ref\":\"#/components/schemas/WorkspaceAccessRead\"},\"AttachmentUpload\":{\"type\":\"object\",\"properties\":{\"upload\":{\"type\":\"array\",\"items\":{\"type\":\"File\"}}}},\"AttachmentId\":{\"type\":\"number\",\"description\":\"An integer ID\"},\"AttachmentMetadata\":{\"type\":\"object\",\"properties\":{\"fileName\":{\"type\":\"string\",\"example\":\"logo.png\"},\"fileSize\":{\"type\":\"number\",\"example\":12345},\"timeUploaded\":{\"type\":\"string\",\"example\":\"2020-02-13T12:17:19.000Z\"}}}},\"parameters\":{\"filterQueryParam\":{\"in\":\"query\",\"name\":\"filter\",\"schema\":{\"type\":\"string\",\"description\":\"This is a JSON object mapping column names to arrays of allowed values. For example, to filter column `pet` for values `cat` and `dog`, the filter would be `{\\\"pet\\\": [\\\"cat\\\", \\\"dog\\\"]}`. JSON contains characters that are not safe to place in a URL, so it is important to url-encode them. For this example, the url-encoding is `%7B%22pet%22%3A%20%5B%22cat%22%2C%20%22dog%22%5D%7D`. See https://rosettacode.org/wiki/URL_encoding for how to url-encode a string, or https://www.urlencoder.org/ to try some examples. Multiple columns can be filtered. For example the filter for `pet` being either `cat` or `dog`, AND `size` being either `tiny` or `outrageously small`, would be `{\\\"pet\\\": [\\\"cat\\\", \\\"dog\\\"], \\\"size\\\": [\\\"tiny\\\", \\\"outrageously small\\\"]}`.\",\"example\":\"{\\\"pet\\\": [\\\"cat\\\", \\\"dog\\\"]}\"},\"required\":false},\"sortQueryParam\":{\"in\":\"query\",\"name\":\"sort\",\"schema\":{\"type\":\"string\",\"description\":\"Order in which to return results. If a single column name is given (e.g. `pet`), results are placed in ascending order of values in that column. To get results in an order that was previously prepared manually in Grist, use the special `manualSort` column name. Multiple columns can be specified, separated by commas (e.g. `pet,age`). For descending order, prefix a column name with a `-` character (e.g. `pet,-age`). To include additional sorting options append them after a colon (e.g. `pet,-age:naturalSort;emptyFirst,owner`). Available options are: `choiceOrder`, `naturalSort`, `emptyFirst`. Without the `sort` parameter, the order of results is unspecified.\",\"example\":\"pet,-age\"},\"required\":false},\"limitQueryParam\":{\"in\":\"query\",\"name\":\"limit\",\"schema\":{\"type\":\"number\",\"description\":\"Return at most this number of rows. A value of 0 is equivalent to having no limit.\",\"example\":\"5\"},\"required\":false},\"sortHeaderParam\":{\"in\":\"header\",\"name\":\"X-Sort\",\"schema\":{\"type\":\"string\",\"description\":\"Same as `sort` query parameter.\",\"example\":\"pet,-age\"},\"required\":false},\"limitHeaderParam\":{\"in\":\"header\",\"name\":\"X-Limit\",\"schema\":{\"type\":\"number\",\"description\":\"Same as `limit` query parameter.\",\"example\":\"5\"},\"required\":false},\"tableIdPathParam\":{\"in\":\"path\",\"name\":\"tableId\",\"schema\":{\"type\":\"string\",\"description\":\"name of a table (normalized)\"},\"required\":true},\"docIdPathParam\":{\"in\":\"path\",\"name\":\"docId\",\"schema\":{\"$ref\":\"#/components/schemas/DocKey\"},\"required\":true}}}}},\"searchIndex\":{\"store\":[\"section/Authentication\",\"tag/orgs\",\"tag/orgs/paths/~1orgs/get\",\"tag/orgs/paths/~1orgs~1{orgId}/get\",\"tag/orgs/paths/~1orgs~1{orgId}/patch\",\"tag/orgs/paths/~1orgs~1{orgId}~1access/get\",\"tag/orgs/paths/~1orgs~1{orgId}~1access/patch\",\"tag/orgs/paths/~1orgs~1{orgId}~1workspaces/get\",\"tag/workspaces\",\"tag/workspaces/paths/~1orgs~1{orgId}~1workspaces/post\",\"tag/workspaces/paths/~1workspaces~1{workspaceId}/get\",\"tag/workspaces/paths/~1workspaces~1{workspaceId}/patch\",\"tag/workspaces/paths/~1workspaces~1{workspaceId}/delete\",\"tag/workspaces/paths/~1workspaces~1{workspaceId}~1access/get\",\"tag/workspaces/paths/~1workspaces~1{workspaceId}~1access/patch\",\"tag/docs\",\"tag/docs/paths/~1workspaces~1{workspaceId}~1docs/post\",\"tag/docs/paths/~1docs~1{docId}/get\",\"tag/docs/paths/~1docs~1{docId}/patch\",\"tag/docs/paths/~1docs~1{docId}/delete\",\"tag/docs/paths/~1docs~1{docId}~1move/patch\",\"tag/docs/paths/~1docs~1{docId}~1access/get\",\"tag/docs/paths/~1docs~1{docId}~1access/patch\",\"tag/docs/paths/~1docs~1{docId}~1download/get\",\"tag/docs/paths/~1docs~1{docId}~1download~1xlsx/get\",\"tag/docs/paths/~1docs~1{docId}~1download~1csv/get\",\"tag/records\",\"tag/records/paths/~1docs~1{docId}~1tables~1{tableId}~1records/get\",\"tag/records/paths/~1docs~1{docId}~1tables~1{tableId}~1records/post\",\"tag/records/paths/~1docs~1{docId}~1tables~1{tableId}~1records/patch\",\"tag/columns\",\"tag/columns/paths/~1docs~1{docId}~1tables~1{tableId}~1columns/get\",\"tag/data\",\"tag/data/paths/~1docs~1{docId}~1tables~1{tableId}~1data/get\",\"tag/data/paths/~1docs~1{docId}~1tables~1{tableId}~1data/post\",\"tag/data/paths/~1docs~1{docId}~1tables~1{tableId}~1data/patch\",\"tag/data/paths/~1docs~1{docId}~1tables~1{tableId}~1data~1delete/post\",\"tag/attachments\",\"tag/attachments/paths/~1docs~1{docId}~1attachments/post\",\"tag/attachments/paths/~1docs~1{docId}~1attachments~1{attachmentId}/get\",\"tag/attachments/paths/~1docs~1{docId}~1attachments~1{attachmentId}~1download/get\"],\"index\":{\"version\":\"2.3.8\",\"fields\":[\"title\",\"description\"],\"fieldVectors\":[[\"title/0\",[0,4.491]],[\"description/0\",[1,3.971,2,2.723,3,2.723]],[\"title/1\",[4,2.003]],[\"description/1\",[4,0.875,5,1.661,6,1.463,7,1.661,8,1.962,9,1.463,10,1.962]],[\"title/2\",[4,1.423,11,1.787,12,1.65]],[\"description/2\",[5,1.832,6,1.613,7,1.832,13,2.163,14,2.163,15,2.163]],[\"title/3\",[4,1.664,16,2.782]],[\"description/3\",[]],[\"title/4\",[4,1.664,17,2.276]],[\"description/4\",[]],[\"title/5\",[4,1.243,11,1.561,12,1.441,18,2.079]],[\"description/5\",[]],[\"title/6\",[4,1.423,12,1.65,19,2.38]],[\"description/6\",[]],[\"title/7\",[4,1.104,11,1.386,20,0.962,21,0.843,22,2.475]],[\"description/7\",[]],[\"title/8\",[20,1.746]],[\"description/8\",[6,1.613,9,1.613,20,0.841,21,0.737,23,2.163,24,2.163]],[\"title/9\",[20,1.24,25,2.702,26,2.702]],[\"description/9\",[]],[\"title/10\",[16,2.782,20,1.45]],[\"description/10\",[]],[\"title/11\",[17,2.276,20,1.45]],[\"description/11\",[]],[\"title/12\",[20,1.45,27,2.782]],[\"description/12\",[]],[\"title/13\",[11,1.561,12,1.441,18,2.079,20,1.084]],[\"description/13\",[]],[\"title/14\",[12,1.65,19,2.38,20,1.24]],[\"description/14\",[]],[\"title/15\",[28,3.802]],[\"description/15\",[20,0.937,21,0.821,29,2.041,30,1.798,31,2.411]],[\"title/16\",[21,1.087,25,2.702,26,2.702]],[\"description/16\",[]],[\"title/17\",[16,2.782,21,1.271]],[\"description/17\",[]],[\"title/18\",[17,1.701,21,0.95,32,2.36,33,1.701]],[\"description/18\",[]],[\"title/19\",[21,1.271,27,2.782]],[\"description/19\",[]],[\"title/20\",[4,0.993,20,0.865,21,0.758,34,2.225,35,2.225,36,2.225]],[\"description/20\",[]],[\"title/21\",[11,1.561,12,1.441,18,2.079,21,0.95]],[\"description/21\",[]],[\"title/22\",[12,1.65,19,2.38,21,1.087]],[\"description/22\",[]],[\"title/23\",[21,0.95,33,1.701,37,2.788,38,1.869]],[\"description/23\",[]],[\"title/24\",[21,0.95,33,1.701,38,1.869,39,2.788]],[\"description/24\",[]],[\"title/25\",[33,1.701,38,1.869,40,1.014,41,2.788]],[\"description/25\",[]],[\"title/26\",[42,1.868]],[\"description/26\",[9,1.613,29,1.832,30,1.613,40,0.787,42,0.9,43,1.45]],[\"title/27\",[40,1.161,42,1.328,44,2.702]],[\"description/27\",[]],[\"title/28\",[40,1.161,42,1.328,45,2.702]],[\"description/28\",[]],[\"title/29\",[17,1.947,40,1.161,42,1.328]],[\"description/29\",[]],[\"title/30\",[46,3.01]],[\"description/30\",[30,2.03,40,0.99,46,1.825,47,2.723]],[\"title/31\",[11,1.787,40,1.161,46,2.139]],[\"description/31\",[]],[\"title/32\",[48,3.01]],[\"description/32\",[40,0.487,42,0.557,48,0.897,49,1.338,50,1.133,51,2.264,52,0.897,53,1.338,54,1.338,55,1.338,56,0.897]],[\"title/33\",[40,1.161,44,2.702,48,2.139]],[\"description/33\",[42,0.811,52,0.753,56,1.307,57,0.838,58,0.838,59,0.838,60,0.838,61,0.838,62,0.838,63,0.838,64,0.838,65,0.838,66,0.838]],[\"title/34\",[40,1.161,43,2.139,45,2.702]],[\"description/34\",[42,0.811,52,0.753,56,1.307,57,0.838,58,0.838,59,0.838,60,0.838,61,0.838,62,0.838,63,0.838,64,0.838,65,0.838,66,0.838]],[\"title/35\",[17,1.947,40,1.161,43,2.139]],[\"description/35\",[42,0.811,52,0.753,56,1.307,57,0.838,58,0.838,59,0.838,60,0.838,61,0.838,62,0.838,63,0.838,64,0.838,65,0.838,66,0.838]],[\"title/36\",[27,2.38,40,1.161,43,2.139]],[\"description/36\",[]],[\"title/37\",[67,2.74]],[\"description/37\",[21,0.487,38,0.958,42,0.595,46,0.958,48,0.958,50,1.21,67,1.459,68,1.429,69,1.429,70,1.429]],[\"title/38\",[28,2.702,67,1.947,71,3.191]],[\"description/38\",[]],[\"title/39\",[32,3.159,67,2.276]],[\"description/39\",[]],[\"title/40\",[33,1.947,67,1.947,72,3.191]],[\"description/40\",[]]],\"invertedIndex\":[[\"\",{\"_index\":1,\"title\":{},\"description\":{\"0\":{}}}],[\"access\",{\"_index\":12,\"title\":{\"2\":{},\"5\":{},\"6\":{},\"13\":{},\"14\":{},\"21\":{},\"22\":{}},\"description\":{}}],[\"add\",{\"_index\":45,\"title\":{\"28\":{},\"34\":{}},\"description\":{}}],[\"anoth\",{\"_index\":35,\"title\":{\"20\":{}},\"description\":{}}],[\"api\",{\"_index\":10,\"title\":{},\"description\":{\"1\":{}}}],[\"area\",{\"_index\":14,\"title\":{},\"description\":{\"2\":{}}}],[\"attach\",{\"_index\":67,\"title\":{\"37\":{},\"38\":{},\"39\":{},\"40\":{}},\"description\":{\"37\":{}}}],[\"authent\",{\"_index\":0,\"title\":{\"0\":{}},\"description\":{}}],[\"avail\",{\"_index\":15,\"title\":{},\"description\":{\"2\":{}}}],[\"better\",{\"_index\":62,\"title\":{},\"description\":{\"33\":{},\"34\":{},\"35\":{}}}],[\"call\",{\"_index\":9,\"title\":{},\"description\":{\"1\":{},\"8\":{},\"26\":{}}}],[\"chang\",{\"_index\":19,\"title\":{\"6\":{},\"14\":{},\"22\":{}},\"description\":{}}],[\"collect\",{\"_index\":30,\"title\":{},\"description\":{\"15\":{},\"26\":{},\"30\":{}}}],[\"column\",{\"_index\":46,\"title\":{\"30\":{},\"31\":{}},\"description\":{\"30\":{},\"37\":{}}}],[\"columnar\",{\"_index\":53,\"title\":{},\"description\":{\"32\":{}}}],[\"consid\",{\"_index\":61,\"title\":{},\"description\":{\"33\":{},\"34\":{},\"35\":{}}}],[\"contain\",{\"_index\":29,\"title\":{},\"description\":{\"15\":{},\"26\":{}}}],[\"content\",{\"_index\":33,\"title\":{\"18\":{},\"23\":{},\"24\":{},\"25\":{},\"40\":{}},\"description\":{}}],[\"creat\",{\"_index\":25,\"title\":{\"9\":{},\"16\":{}},\"description\":{}}],[\"csv\",{\"_index\":41,\"title\":{\"25\":{}},\"description\":{}}],[\"data\",{\"_index\":48,\"title\":{\"32\":{},\"33\":{}},\"description\":{\"32\":{},\"37\":{}}}],[\"delet\",{\"_index\":27,\"title\":{\"12\":{},\"19\":{},\"36\":{}},\"description\":{}}],[\"deprec\",{\"_index\":52,\"title\":{},\"description\":{\"32\":{},\"33\":{},\"34\":{},\"35\":{}}}],[\"describ\",{\"_index\":16,\"title\":{\"3\":{},\"10\":{},\"17\":{}},\"description\":{}}],[\"doc\",{\"_index\":28,\"title\":{\"15\":{},\"38\":{}},\"description\":{}}],[\"document\",{\"_index\":21,\"title\":{\"7\":{},\"16\":{},\"17\":{},\"18\":{},\"19\":{},\"20\":{},\"21\":{},\"22\":{},\"23\":{},\"24\":{}},\"description\":{\"8\":{},\"15\":{},\"37\":{}}}],[\"download\",{\"_index\":72,\"title\":{\"40\":{}},\"description\":{}}],[\"empti\",{\"_index\":26,\"title\":{\"9\":{},\"16\":{}},\"description\":{}}],[\"endpoint\",{\"_index\":56,\"title\":{},\"description\":{\"32\":{},\"33\":{},\"34\":{},\"35\":{}}}],[\"enumer\",{\"_index\":13,\"title\":{},\"description\":{\"2\":{}}}],[\"excel\",{\"_index\":39,\"title\":{\"24\":{}},\"description\":{}}],[\"favor\",{\"_index\":57,\"title\":{},\"description\":{\"33\":{},\"34\":{},\"35\":{}}}],[\"fetch\",{\"_index\":44,\"title\":{\"27\":{},\"33\":{}},\"description\":{}}],[\"file\",{\"_index\":38,\"title\":{\"23\":{},\"24\":{},\"25\":{}},\"description\":{\"37\":{}}}],[\"format\",{\"_index\":54,\"title\":{},\"description\":{\"32\":{}}}],[\"grist\",{\"_index\":31,\"title\":{},\"description\":{\"15\":{}}}],[\"group\",{\"_index\":24,\"title\":{},\"description\":{\"8\":{}}}],[\"immedi\",{\"_index\":58,\"title\":{},\"description\":{\"33\":{},\"34\":{},\"35\":{}}}],[\"includ\",{\"_index\":68,\"title\":{},\"description\":{\"37\":{}}}],[\"list\",{\"_index\":11,\"title\":{\"2\":{},\"5\":{},\"7\":{},\"13\":{},\"21\":{},\"31\":{}},\"description\":{}}],[\"metadata\",{\"_index\":32,\"title\":{\"18\":{},\"39\":{}},\"description\":{}}],[\"modifi\",{\"_index\":17,\"title\":{\"4\":{},\"11\":{},\"18\":{},\"29\":{},\"35\":{}},\"description\":{}}],[\"move\",{\"_index\":34,\"title\":{\"20\":{}},\"description\":{}}],[\"new\",{\"_index\":65,\"title\":{},\"description\":{\"33\":{},\"34\":{},\"35\":{}}}],[\"now\",{\"_index\":51,\"title\":{},\"description\":{\"32\":{}}}],[\"org\",{\"_index\":4,\"title\":{\"1\":{},\"2\":{},\"3\":{},\"4\":{},\"5\":{},\"6\":{},\"7\":{},\"20\":{}},\"description\":{\"1\":{}}}],[\"organ\",{\"_index\":23,\"title\":{},\"description\":{\"8\":{}}}],[\"person\",{\"_index\":7,\"title\":{},\"description\":{\"1\":{},\"2\":{}}}],[\"plan\",{\"_index\":59,\"title\":{},\"description\":{\"33\":{},\"34\":{},\"35\":{}}}],[\"point\",{\"_index\":64,\"title\":{},\"description\":{\"33\":{},\"34\":{},\"35\":{}}}],[\"project\",{\"_index\":66,\"title\":{},\"description\":{\"33\":{},\"34\":{},\"35\":{}}}],[\"recommend\",{\"_index\":55,\"title\":{},\"description\":{\"32\":{}}}],[\"record\",{\"_index\":42,\"title\":{\"26\":{},\"27\":{},\"28\":{},\"29\":{}},\"description\":{\"26\":{},\"32\":{},\"33\":{},\"34\":{},\"35\":{},\"37\":{}}}],[\"redoc-inject\",{\"_index\":2,\"title\":{},\"description\":{\"0\":{}}}],[\"refer\",{\"_index\":69,\"title\":{},\"description\":{\"37\":{}}}],[\"remov\",{\"_index\":60,\"title\":{},\"description\":{\"33\":{},\"34\":{},\"35\":{}}}],[\"row\",{\"_index\":43,\"title\":{\"34\":{},\"35\":{},\"36\":{}},\"description\":{\"26\":{}}}],[\"same\",{\"_index\":36,\"title\":{\"20\":{}},\"description\":{}}],[\"security-definit\",{\"_index\":3,\"title\":{},\"description\":{\"0\":{}}}],[\"site\",{\"_index\":6,\"title\":{},\"description\":{\"1\":{},\"2\":{},\"8\":{}}}],[\"space\",{\"_index\":8,\"title\":{},\"description\":{\"1\":{}}}],[\"sqlite\",{\"_index\":37,\"title\":{\"23\":{}},\"description\":{}}],[\"start\",{\"_index\":63,\"title\":{},\"description\":{\"33\":{},\"34\":{},\"35\":{}}}],[\"structur\",{\"_index\":47,\"title\":{},\"description\":{\"30\":{}}}],[\"tabl\",{\"_index\":40,\"title\":{\"25\":{},\"27\":{},\"28\":{},\"29\":{},\"31\":{},\"33\":{},\"34\":{},\"35\":{},\"36\":{}},\"description\":{\"26\":{},\"30\":{},\"32\":{}}}],[\"team\",{\"_index\":5,\"title\":{},\"description\":{\"1\":{},\"2\":{}}}],[\"type\",{\"_index\":70,\"title\":{},\"description\":{\"37\":{}}}],[\"upload\",{\"_index\":71,\"title\":{\"38\":{}},\"description\":{}}],[\"us\",{\"_index\":50,\"title\":{},\"description\":{\"32\":{},\"37\":{}}}],[\"user\",{\"_index\":18,\"title\":{\"5\":{},\"13\":{},\"21\":{}},\"description\":{}}],[\"within\",{\"_index\":22,\"title\":{\"7\":{}},\"description\":{}}],[\"work\",{\"_index\":49,\"title\":{},\"description\":{\"32\":{}}}],[\"workspac\",{\"_index\":20,\"title\":{\"7\":{},\"8\":{},\"9\":{},\"10\":{},\"11\":{},\"12\":{},\"13\":{},\"14\":{},\"20\":{}},\"description\":{\"8\":{},\"15\":{}}}]],\"pipeline\":[]}},\"options\":{\"theme\":{\"spacing\":{\"sectionVertical\":2},\"breakpoints\":{\"medium\":\"50rem\",\"large\":\"50rem\"},\"menu\":{\"width\":\"0px\"},\"sidebar\":{\"width\":\"0px\"}},\"hideDownloadButton\":true,\"pathInMiddlePanel\":true,\"jsonSampleExpandLevel\":\"all\"}}; var container = document.getElementById('redoc'); Redoc.hydrate(__redoc_state, container);;","title":"API reference"},{"location":"authorship/","text":"Authorship columns # Sometimes it is useful to have columns that record who created individual records, and who last updated them. Grist lets you create such columns easily. It also automatically tracks document changes in the Activity tab of Document History, but nevertheless it is convenient to have that information in tabular form available to formulas and filters, and authorship columns let you do that. A \u201cCreated By\u201d column # Suppose we want to fill a column automatically with the name of the creator of each record as they are added. As a first step, add a column called (for example) Created By . In the column options in the side panel (see Columns for a refresher), click Set trigger formula action. Set user.Name as the column\u2019s formula. There are other possibilities, such as user.Email , a unique user.UserID , and so on. The user information available is the same as that in Access rule conditions . Time information is available as well (see Timestamp columns ). But let\u2019s stick with user.Name for now. Now, to set the column whenever a record is created, make sure that Apply to new records option is checked. And that\u2019s it! Now whenever a record is created, the Created At column will be set to the name of the user creating it: An \u201cUpdated By\u201d column # If we want a column that stores who last edited a record (as opposed to its creator), the procedure is similar to that for a \u201cCreated By\u201d column , but instead of Apply to new records , select Apply on record changes . Then select Any field (assuming you want any change in a record to count as an update) and press OK . You can alternatively pick and choose which columns, when updated, will trigger the formula. Here is an example the the new column at work - when Cotton Candy v Candy Floss is updated,a user name appears for that record: It is still possible for a user to manually edit cells in the Created By and Updated By columns. If you don\u2019t want that to be allowed, use access rules to forbid it.","title":"Authorship columns"},{"location":"authorship/#authorship-columns","text":"Sometimes it is useful to have columns that record who created individual records, and who last updated them. Grist lets you create such columns easily. It also automatically tracks document changes in the Activity tab of Document History, but nevertheless it is convenient to have that information in tabular form available to formulas and filters, and authorship columns let you do that.","title":"Authorship columns"},{"location":"authorship/#a-created-by-column","text":"Suppose we want to fill a column automatically with the name of the creator of each record as they are added. As a first step, add a column called (for example) Created By . In the column options in the side panel (see Columns for a refresher), click Set trigger formula action. Set user.Name as the column\u2019s formula. There are other possibilities, such as user.Email , a unique user.UserID , and so on. The user information available is the same as that in Access rule conditions . Time information is available as well (see Timestamp columns ). But let\u2019s stick with user.Name for now. Now, to set the column whenever a record is created, make sure that Apply to new records option is checked. And that\u2019s it! Now whenever a record is created, the Created At column will be set to the name of the user creating it:","title":"A \"Created By\" column"},{"location":"authorship/#an-updated-by-column","text":"If we want a column that stores who last edited a record (as opposed to its creator), the procedure is similar to that for a \u201cCreated By\u201d column , but instead of Apply to new records , select Apply on record changes . Then select Any field (assuming you want any change in a record to count as an update) and press OK . You can alternatively pick and choose which columns, when updated, will trigger the formula. Here is an example the the new column at work - when Cotton Candy v Candy Floss is updated,a user name appears for that record: It is still possible for a user to manually edit cells in the Created By and Updated By columns. If you don\u2019t want that to be allowed, use access rules to forbid it.","title":"An \"Updated By\" column"},{"location":"automatic-backups/","text":"Automatic Backups # Grist automatically saves backups of your documents as you work on them. These backups \u2013 or snapshots \u2013 of the document can be examined at any time. Grist retains more frequent snapshots of recent changes, and less frequent ones as you go back in time. For example, hourly snapshots are retained for about a day, but monthly snapshots are retained for more than a year. Examining Backups # To see the list of backups, click \u201cDocument History\u201d in the left panel, then click the \u201cSnapshots\u201d tab in the panel that opens on the right: You can open any of the listed snapshots to see the document as it existed at that time. Restoring an Older Version # While examining a snapshot, the \u201cShare\u201d menu has additional options; Use the \u201cReplace Current Version\u201d option to revert your document to the version you are looking at. You can also save the snapshot as a new document using the \u201cSave Copy\u201d option. Deleted Documents # When you delete a document, its history of backups is deleted with it. While the document is in Trash, you can still restore it for 30 days. If you do, you will find all the historical snapshots still there. If you choose \u201cDelete Forever\u201d for a document in Trash, or when a document in Trash is automatically purged after 30 days, the backups will be deleted forever with it.","title":"Automatic backups"},{"location":"automatic-backups/#automatic-backups","text":"Grist automatically saves backups of your documents as you work on them. These backups \u2013 or snapshots \u2013 of the document can be examined at any time. Grist retains more frequent snapshots of recent changes, and less frequent ones as you go back in time. For example, hourly snapshots are retained for about a day, but monthly snapshots are retained for more than a year.","title":"Automatic Backups"},{"location":"automatic-backups/#examining-backups","text":"To see the list of backups, click \u201cDocument History\u201d in the left panel, then click the \u201cSnapshots\u201d tab in the panel that opens on the right: You can open any of the listed snapshots to see the document as it existed at that time.","title":"Examining Backups"},{"location":"automatic-backups/#restoring-an-older-version","text":"While examining a snapshot, the \u201cShare\u201d menu has additional options; Use the \u201cReplace Current Version\u201d option to revert your document to the version you are looking at. You can also save the snapshot as a new document using the \u201cSave Copy\u201d option.","title":"Restoring an Older Version"},{"location":"automatic-backups/#deleted-documents","text":"When you delete a document, its history of backups is deleted with it. While the document is in Trash, you can still restore it for 30 days. If you do, you will find all the historical snapshots still there. If you choose \u201cDelete Forever\u201d for a document in Trash, or when a document in Trash is automatically purged after 30 days, the backups will be deleted forever with it.","title":"Deleted Documents"},{"location":"browser-support/","text":"Browser Support # Grist is officially supported and regularly tested on modern Firefox and Google Chrome browsers on all desktop platforms. These are available here: Get Firefox Get Chrome Other modern browsers will work to the degree they are standards compliant. In particular, Grist is reported to work on modern Safari and Microsoft Edge. If you encounter errors or unexpected behavior on these browsers, we encourage you to report them to us (at support@getgrist.com or using Give feedback link in the app). Mobile Support # You can use Grist quite comfortably in mobile browsers such as Chrome, Safari, and Firefox. On small screens, you can find the list of pages from the button in the bottom bar. For pages with multiple widgets, only the active widget is expanded. Other widgets are collapsed until you touch to expand them. To edit a cell, simply double-tap it. Mobile support is still a work in progress. To get back to the desktop version on a mobile device, open your account menu, and select \u201cToggle Mobile Mode\u201d option:","title":"Browser Support"},{"location":"browser-support/#browser-support","text":"Grist is officially supported and regularly tested on modern Firefox and Google Chrome browsers on all desktop platforms. These are available here: Get Firefox Get Chrome Other modern browsers will work to the degree they are standards compliant. In particular, Grist is reported to work on modern Safari and Microsoft Edge. If you encounter errors or unexpected behavior on these browsers, we encourage you to report them to us (at support@getgrist.com or using Give feedback link in the app).","title":"Browser Support"},{"location":"browser-support/#mobile-support","text":"You can use Grist quite comfortably in mobile browsers such as Chrome, Safari, and Firefox. On small screens, you can find the list of pages from the button in the bottom bar. For pages with multiple widgets, only the active widget is expanded. Other widgets are collapsed until you touch to expand them. To edit a cell, simply double-tap it. Mobile support is still a work in progress. To get back to the desktop version on a mobile device, open your account menu, and select \u201cToggle Mobile Mode\u201d option:","title":"Mobile Support"},{"location":"col-refs/","text":"Reference and Reference Lists # Overview # Reference and Reference List columns in Grist allow one table to create an explicit reference to another. In the database world this is similar to a foreign key. In the spreadsheet world this is similar to a VLOOKUP , but much more powerful and easier to use. In this guide we\u2019ll use the term underlying table for the table that lists all available values, and referencing table for the table that uses those values. Creating a new Reference column # Suppose we have a document with two tables, Clients and Projects. The Clients table lists our clients - names, contacts, signing dates - and the Projects table lists projects we do for clients. There are all sorts of things Grist can do for us if we let it know that the Client column in the Projects table is referring to clients listed in the Clients table. We can do this by converting the Client column to a \u201creference column\u201d. Open the Column Options side panel (see Specifying a type ) and set the \u201cColumn Type\u201d to \u201cReference\u201d. Adjust the \u201cData from Table\u201d option to be the correct table you want to cross-reference, and the \u201cShow Column\u201d option to match which column of that table you\u2019d like to show. Then hit \u201cApply\u201d when you\u2019re happy with the result. Understanding the reference The column value always references the entire record in the underlying table. The displayed value can be any column from that record, as selected in Show Column . You can also include additional columns to display as explained later. In our example, you can see little link icons appearing in the Client column cells, showing that they have been successfully cross-referenced with the Clients table. Once the column type is set, you can start typing into it or double-click it to see a dropdown list of all available values. Note that the table Clients and the column Client are related by the column type rather than by name. They can be named anything. Spotting reference columns You can tell that the values in a column represent a reference by the link icon that appears next to the values. If you accidentally type in a value that is not present in the Clients table, its value will be highlighted as invalid: Adding values to a Reference column # Sometimes it\u2019s useful to add a new value to the dropdown list without having to switch to the underlying table. Reference columns make it easy! Just type in the value you want add and select the + value in the dropdown list. Grist will automatically add a new record containing this value to the underlying table and insert the proper reference: Converting Text column to Reference # When working with existing data, it\u2019s common to have existing text values that should really be reference values. Don\u2019t worry, conversion is simple! Just change the column type to Reference and Grist will automatically find and substitute matching values for references. If some values are not found, they\u2019ll be shown as invalid. You can then either add them to the underlying table or select the proper values for them. In this example, the first three values match perfectly, but Forest Labs is invalid because it doesn\u2019t exist in the Clients table: Including multiple fields from a reference # A big benefit of reference columns is that they allow you to easily bring in multiple columns from the underlying table. In our example, if you wanted to bring in $Client.Contact to the Projects table, you can just select the Contact column from the Add Reference Columns section and it will be automatically added to the Projects table: If you\u2019re comfortable using formulas, you can see that the added column is just the formula =$Client.Contact . If you were so inclined, you could achieve the same result by manually adding the formula column. You can also use any other fields from Clients table by referencing $Client in formulas in the Projects table. Note that in formulas, we use the name of the reference column ( $Client ) to refer to a linked record, not the name of the table (which is Clients here). Don\u2019t let the similarity of the names in this example confuse you. Using references in formulas You may have noticed that the underlying table is Clients (plural) but the formula is $Client.Contact (singular). That\u2019s because the formula refers to the referencing column, not the underlying table. In our example, the referencing column is Client . Creating a new Reference List column # So far our example has only dealt with projects that have a single client. Suppose that we also have projects with multiple clients, and we\u2019d like to maintain references to them all from the Client column of the Projects table. We can let Grist know that the Client column contains multiple references by changing its type to \u201cReference List\u201d. This column type can reference multiple records, and can also be thought of as a multi-select. Open the Column Options side panel (see Specifying a type ) and set the \u201cColumn Type\u201d of Client to \u201cReference List\u201d. Grist will automatically convert any of your existing references to reference lists. Once you\u2019re happy with the result, just hit \u201cApply\u201d and the Client column will be ready to accept as many clients as your projects need. Editing values in a Reference List column # To make changes to a Reference List cell, simply double-click the cell or press the Enter key after you have selected the cell you want to edit. You can also start typing after selecting a cell if you\u2019d like to write over any existing contents. Doing so will open an editor like the one in the example below. Like with Reference columns, the autocomplete menu will populate with suggestions as you type. If you type in a value that\u2019s not present in the referenced table, you can select the + value to add a new row to the referenced table with your value. To delete existing references, simply press the Backspace key, or move your cursor over a reference and click the X icon. You can also rearrange references in the editor by dragging them with your mouse. To save your changes and close the editor, either press Enter or Tab , or click anywhere outside the editor. To close the editor and discard any changes you\u2019ve made, press Escape .","title":"Reference columns"},{"location":"col-refs/#reference-and-reference-lists","text":"","title":"Reference and Reference Lists"},{"location":"col-refs/#overview","text":"Reference and Reference List columns in Grist allow one table to create an explicit reference to another. In the database world this is similar to a foreign key. In the spreadsheet world this is similar to a VLOOKUP , but much more powerful and easier to use. In this guide we\u2019ll use the term underlying table for the table that lists all available values, and referencing table for the table that uses those values.","title":"Overview"},{"location":"col-refs/#creating-a-new-reference-column","text":"Suppose we have a document with two tables, Clients and Projects. The Clients table lists our clients - names, contacts, signing dates - and the Projects table lists projects we do for clients. There are all sorts of things Grist can do for us if we let it know that the Client column in the Projects table is referring to clients listed in the Clients table. We can do this by converting the Client column to a \u201creference column\u201d. Open the Column Options side panel (see Specifying a type ) and set the \u201cColumn Type\u201d to \u201cReference\u201d. Adjust the \u201cData from Table\u201d option to be the correct table you want to cross-reference, and the \u201cShow Column\u201d option to match which column of that table you\u2019d like to show. Then hit \u201cApply\u201d when you\u2019re happy with the result. Understanding the reference The column value always references the entire record in the underlying table. The displayed value can be any column from that record, as selected in Show Column . You can also include additional columns to display as explained later. In our example, you can see little link icons appearing in the Client column cells, showing that they have been successfully cross-referenced with the Clients table. Once the column type is set, you can start typing into it or double-click it to see a dropdown list of all available values. Note that the table Clients and the column Client are related by the column type rather than by name. They can be named anything. Spotting reference columns You can tell that the values in a column represent a reference by the link icon that appears next to the values. If you accidentally type in a value that is not present in the Clients table, its value will be highlighted as invalid:","title":"Creating a new Reference column"},{"location":"col-refs/#adding-values-to-a-reference-column","text":"Sometimes it\u2019s useful to add a new value to the dropdown list without having to switch to the underlying table. Reference columns make it easy! Just type in the value you want add and select the + value in the dropdown list. Grist will automatically add a new record containing this value to the underlying table and insert the proper reference:","title":"Adding values to a Reference column"},{"location":"col-refs/#converting-text-column-to-reference","text":"When working with existing data, it\u2019s common to have existing text values that should really be reference values. Don\u2019t worry, conversion is simple! Just change the column type to Reference and Grist will automatically find and substitute matching values for references. If some values are not found, they\u2019ll be shown as invalid. You can then either add them to the underlying table or select the proper values for them. In this example, the first three values match perfectly, but Forest Labs is invalid because it doesn\u2019t exist in the Clients table:","title":"Converting Text column to Reference"},{"location":"col-refs/#including-multiple-fields-from-a-reference","text":"A big benefit of reference columns is that they allow you to easily bring in multiple columns from the underlying table. In our example, if you wanted to bring in $Client.Contact to the Projects table, you can just select the Contact column from the Add Reference Columns section and it will be automatically added to the Projects table: If you\u2019re comfortable using formulas, you can see that the added column is just the formula =$Client.Contact . If you were so inclined, you could achieve the same result by manually adding the formula column. You can also use any other fields from Clients table by referencing $Client in formulas in the Projects table. Note that in formulas, we use the name of the reference column ( $Client ) to refer to a linked record, not the name of the table (which is Clients here). Don\u2019t let the similarity of the names in this example confuse you. Using references in formulas You may have noticed that the underlying table is Clients (plural) but the formula is $Client.Contact (singular). That\u2019s because the formula refers to the referencing column, not the underlying table. In our example, the referencing column is Client .","title":"Including multiple fields from a reference"},{"location":"col-refs/#creating-a-new-reference-list-column","text":"So far our example has only dealt with projects that have a single client. Suppose that we also have projects with multiple clients, and we\u2019d like to maintain references to them all from the Client column of the Projects table. We can let Grist know that the Client column contains multiple references by changing its type to \u201cReference List\u201d. This column type can reference multiple records, and can also be thought of as a multi-select. Open the Column Options side panel (see Specifying a type ) and set the \u201cColumn Type\u201d of Client to \u201cReference List\u201d. Grist will automatically convert any of your existing references to reference lists. Once you\u2019re happy with the result, just hit \u201cApply\u201d and the Client column will be ready to accept as many clients as your projects need.","title":"Creating a new Reference List column"},{"location":"col-refs/#editing-values-in-a-reference-list-column","text":"To make changes to a Reference List cell, simply double-click the cell or press the Enter key after you have selected the cell you want to edit. You can also start typing after selecting a cell if you\u2019d like to write over any existing contents. Doing so will open an editor like the one in the example below. Like with Reference columns, the autocomplete menu will populate with suggestions as you type. If you type in a value that\u2019s not present in the referenced table, you can select the + value to add a new row to the referenced table with your value. To delete existing references, simply press the Backspace key, or move your cursor over a reference and click the X icon. You can also rearrange references in the editor by dragging them with your mouse. To save your changes and close the editor, either press Enter or Tab , or click anywhere outside the editor. To close the editor and discard any changes you\u2019ve made, press Escape .","title":"Editing values in a Reference List column"},{"location":"col-transform/","text":"Column Transformations # Grist offers two ways to transform all values in a column. One is to change the type of the column, and the other is to apply a formula-based transformation. Type conversions # When converting between different column types, Grist has sensible default behavior, but makes that behavior easy to revise. For example, suppose you have a column of integers. To convert that column to text, open the column options as described in Specifying a type , and find the column type section. Change the column type to text in the dropdown. You\u2019ll notice that a \u201ccancel/revise/apply\u201d dialog opens beside the dropdown. To change how the conversion is done, click Revise . You\u2019ll see a formula box with the default conversion method, grist.Text.typeConvert($tally) . This means \u201cdo default conversion to text for the tally column\u201d. you can replace this with any formula you like. For example: Code for converting to unicode tally lines is left as an exercise to the reader. To preview the results of the conversion, click \u201cpreview\u201d. When you are satisfied with the conversion, click \u201capply\u201d. To abandon the conversion, click \u201ccancel\u201d. Formula-based transforms # Spreadsheets are convenient tools for cleaning up data using formulas . For example, imagine you had zip codes that have lost leading zeros - you can easily reformat them with a quick formula: We could now freeze the results and delete the original data if we don\u2019t need it anymore. If you know you\u2019re going to throw away the original data like this, Grist offers column transformations as a faster way to systematically modify all cells of a column. Find the \u201cTransform\u201d section at the bottom of the column options side panel (see Columns for how to open this panel). When you click the orange \u201clightning\u201d button, Grist prompts you with a formula, return $zip in this case. You can edit this formula to make some change to the selected column. For example return $zip + 1 would add one to the zip code. You can preview the effect your formula would have, and when you are happy, hit \u201cApply\u201d. In our case, where we want to add leading zeros, we\u2019ll need to first change our column type to be Text (assuming it is currently Integer - if it Numeric convert to Integer first and then to Text to avoid decimal points). Once done, we can use our formula for adding leading zeros: When happy, press \u201cApply\u201d to replace the cell values with their new versions. Likewise, the response column could be transformed with the formula into true/false values with $response[0] == 'y' , and then set as a toggle column .","title":"Transformations"},{"location":"col-transform/#column-transformations","text":"Grist offers two ways to transform all values in a column. One is to change the type of the column, and the other is to apply a formula-based transformation.","title":""},{"location":"col-transform/#type-conversions","text":"When converting between different column types, Grist has sensible default behavior, but makes that behavior easy to revise. For example, suppose you have a column of integers. To convert that column to text, open the column options as described in Specifying a type , and find the column type section. Change the column type to text in the dropdown. You\u2019ll notice that a \u201ccancel/revise/apply\u201d dialog opens beside the dropdown. To change how the conversion is done, click Revise . You\u2019ll see a formula box with the default conversion method, grist.Text.typeConvert($tally) . This means \u201cdo default conversion to text for the tally column\u201d. you can replace this with any formula you like. For example: Code for converting to unicode tally lines is left as an exercise to the reader. To preview the results of the conversion, click \u201cpreview\u201d. When you are satisfied with the conversion, click \u201capply\u201d. To abandon the conversion, click \u201ccancel\u201d.","title":"Type conversions"},{"location":"col-transform/#formula-based-transforms","text":"Spreadsheets are convenient tools for cleaning up data using formulas . For example, imagine you had zip codes that have lost leading zeros - you can easily reformat them with a quick formula: We could now freeze the results and delete the original data if we don\u2019t need it anymore. If you know you\u2019re going to throw away the original data like this, Grist offers column transformations as a faster way to systematically modify all cells of a column. Find the \u201cTransform\u201d section at the bottom of the column options side panel (see Columns for how to open this panel). When you click the orange \u201clightning\u201d button, Grist prompts you with a formula, return $zip in this case. You can edit this formula to make some change to the selected column. For example return $zip + 1 would add one to the zip code. You can preview the effect your formula would have, and when you are happy, hit \u201cApply\u201d. In our case, where we want to add leading zeros, we\u2019ll need to first change our column type to be Text (assuming it is currently Integer - if it Numeric convert to Integer first and then to Text to avoid decimal points). Once done, we can use our formula for adding leading zeros: When happy, press \u201cApply\u201d to replace the cell values with their new versions. Likewise, the response column could be transformed with the formula into true/false values with $response[0] == 'y' , and then set as a toggle column .","title":"Formula-based transforms"},{"location":"col-types/","text":"Columns and data types # Adding and removing columns # Every Grist table, when first created, has three columns called A, B, and C. To rename a column, hover on the column header, click on the drop-down, then select \u201cRename column\u201d (you can also just click on the column header twice). To delete a column, hover on the column header, click on the drop-down, then select \u201cDelete column\u201d. To add a column, click on the \u201c+\u201d symbol in the header row, then type in the column name. To reorder a column, first select the column if it isn\u2019t already selected, by clicking on the column header. Next, click and hold on the column header. After a second or two, you\u2019ll be able to drag the entire column to its new location. Another way to reorder columns is via the widget options: In the visible columns section, the columns can be dragged around freely to reorder them. You can also hide columns here. Renaming columns # You can rename columns in several ways. One way is to click on the column header when the column is already selected. Another is to hover on the column header, click on the drop-down, then select \u201cRename Column\u201d. Another is by selecting \u201cColumn Options\u201d in the same drop-down, and editing the \u201cField\u201d name shown at the top. A bonus with this method is that you can also control the identifier given to the column in formulas. By default this is based on the field name, with any characters Python doesn\u2019t like replaced with \u201c_\u201c, and a number added if needed to keep the name unique within your table. If you don\u2019t like this identifier, you can change it, though it will still need to be Python-friendly. To change the name, deselect \u201cUse Name as ID\u201d if it is selected, and edit the \u201cID\u201d entry now shown. Specifying a type # Grist columns have types, similar to other spreadsheets or databases. The type of a column controls its appearance and the help Grist will offer you when editing cells. When you create a new column, it initially has the Any type. When you enter the column\u2019s first cell, Grist tries to narrow this type. If you enter a number, the column will be changed to Numeric type, which is right-aligned by default. If you enter something that doesn\u2019t look like a number, the column will be changed to Text type, which is left-aligned by default. To inspect the type of a column, hover over the column header, then click on the drop-down, then select \u201cColumn Options\u201d. The \u201cColumn Type\u201d section is what you are looking for. You will often want to control the column type manually. You can change it in the \u201cColumn Type\u201d section. For example, here we set a column full of \u201cyes\u201d and \u201cno\u201d responses to be of type Toggle : One advantage of doing so is that Grist can now offer you ways to visualize the column that are specialized to on/off style values. Each column type has different options in the \u201cCell Format\u201d section of the side panel: Regardless of the column type, you can enter any value in cells. If a value entered is incompatible with the defined type, the cell will be highlighted with an error (and columns referencing the invalid value will also display an error): Supported types # Grist supports the following types: Type Description Text ( Default ) Any string of text. Numeric Floating point numbers. Integer Integers (whole numbers). Toggle Boolean (True / False) Date Valid date (without a time component). DateTime Valid date + time. Choice Single value from a list of pre-defined valid values. Choice List Multiple values from a list of pre-defined valid values. Reference A reference column to another table. Reference List A list of references to another table. Attachment Cells where you can place files or images. Text columns # You can put any text you like in this type of column. For formatting, you can control alignment and word-wrap, text color and background color. If the column is used for storing web links, you can turn on \u201cHyperLink\u201d formatting to make links prettier and to include a clickable link icon. Hyperlinks # When a Text column uses \u201cHyperLink\u201d formatting, values get formatted like so: https://getgrist.com will show https://getgrist.com . Grist Labs https://getgrist.com will show Grist Labs (linking to \u201chttps://getgrist.com\u201d with \u201cGrist Labs\u201d as the text). Email Help mailto:support@getgrist.com will show Email Help , a link which would open an email program to compose an email to support@getgrist.com. In general, the value until the last space is used as the link text, while the last word is used as the link destination. Link formatting is particularly useful when links are generated using a formula such as: $Company + \" \" + $Website Numeric columns # This type is for numbers, including floating-point numbers. In addition to controlling alignment and color, you can choose the number format, and the minimum and maximum number of digits to show after the decimal point. Choosing the \u201cSpinner\u201d option for CELL FORMAT will show arrows in each cell for increasing/decreasing the number. The options under NUMBER FORMAT include: $ : Format for currency amounts, such as dollars or euro. Selecting the $ will add a currency prefix, thousands separators, and default to 2 digits after the decimal point. It will also open a currency selector for international currencies. Tip: You can set a document\u2019s default timezone, locale, and currency in Document Settings. , : Turn on the display of thousands separators. % : Show numbers as percentages. E.g. \u201c0.5\u201d would show as \u201c50%\u201d. Exp : Show numbers in exponential (or scientific) notation. E.g. \u201c1234\u201d would be shown as \u201c1.234E3\u201d. (-) : Show negative numbers in parentheses, without a leading minus sign. This is commonly used in accounting, and usually combined with $ or , formats. Integer columns # This is strictly for whole numbers. It has the same options as the numeric type. Toggle columns # This type is for storing true/false values. The values can be shown as text, checkboxes, or switches. See also example in Specifying a type . Date columns # This type is for storing calendar dates (without a time of day component). More details in Working with dates . You can choose the format for dates, see the date formatting reference . DateTime columns # This type is for storing calendar dates plus time of day. More details in Working with dates . You can choose the format for dates, see the date and time formatting reference . You can also specify the timezone to display for. Choice columns # This type is for storing one of a set of valid values, where you get to specify the available values. There\u2019s an example of using this type of column in the Lightweight CRM example . If you start off with a populated text column, Grist will take all unique values from that column as the valid choices. You can add or remove choices by either clicking Edit or on the Choices box. To add a choice, type its value in the text field below the other choices and press Enter . To remove a choice, click the delete icon to the right of the choice or select the choice by clicking on it, and then press Backspace / Delete . To apply/save your changes, you can either click the Save button or press Enter . To discard your changes, you can either click the Cancel button or press Escape . Clicking the color dropdown to the left of a choice will open a color picker for customizing the fill and text color of a choice. Changes to colors are reflected inside cells and throughout the rest of your document once you save your changes. Choices can be re-arranged by clicking and dragging them, which determines the order in which they appear when typing into a cell. You can also rename a choice by clicking on it and typing a new name. Renaming a choice will also rename all the values that are used in your document. The configuration editor supports many convenient keyboard shortcuts. You can press the Up Arrow and Down Arrow keys to navigate between selected choices; hold the Shift key to bulk select adjacent choices while clicking or using the arrow keys; and hold the Command / Control key to multi-select choices while clicking. To select all choices, you can press Command / Control + A . Undo and redo are also supported in the configuration editor. While your cursor has focus on the editor text field, you can press Command / Control + Z to undo your last change, and Command / Control + Shift + Z to redo it. The configuration editor also supports copy and paste. To copy, select the choices you want copied and press Command / Control + C . To paste, focus on the text field and press Command / Control + V . Choices are pasted in bulk if the clipboard contains multiple lines of text. Choices can also be copied from one column\u2019s configuration editor and pasted into another, which will copy over both the values and their configured colors. When typing into a Choice column cell, your configured choices will be shown in an autocomplete menu. You can either click on a choice, or use the arrow keys and Enter to add a choice to a cell. If your input is not one of the valid choices, Grist will display a menu option for conveniently adding it as a valid choice and into the cell in one step. Choice List columns # This type is for storing multiple values from a set of valid values, where you get to specify the available values. If you start off with a populated text column, Grist will take all unique values from that column as the valid choices. Choice List columns are configured the same way Choice columns are, and support the same level of customization and keyboard shortcuts. They differ in the number of choices they allow to be entered in each cell. While Choice columns only allow at most one value in a cell, Choice List columns allow many. Like with Choice columns, when typing into a Choice List column cell, the valid choices will be shown in an autocomplete menu. Once you\u2019ve selected a value, you can continue adding choices to the same cell. Choices can be re-arranged inside their cells by clicking and dragging them while the cell is being edited. You can also use the arrow keys and the Delete key to navigate and delete choices, or simply click the delete icon when hovering your cursor over a choice. Reference columns # This sets up a cross-reference to another table. You can specify the table to reference, and a column within that table to show. There\u2019s a lot you can do with this kind of column, see Reference columns for details. Reference List columns # Like Reference columns , but can store multiple references in a single cell. There\u2019s a lot you can do with this kind of column, see Reference columns for details. Attachment columns # This column type lets you insert entire files and images in cells. When images are added in cells, a preview thumbnail is shown in the cell. The \u201cSize\u201d bar gives control of the scale of this thumbnail. When you create an attachment column, cells of that column will have a paperclip icon: When you click on a paperclip icon, you can select a file to attach. If it is an image, you\u2019ll see a thumbnail of it in the cell. If you hover over the image, you\u2019ll see a paperclip icon again, which you can use to add more files to the same cell. You\u2019ll also see an \u201copen-eye\u201d icon, which when clicked brings up a larger view of all of the cell\u2019s attachments, and gives you a way to rename them, download them, or remove them.","title":"Columns & types"},{"location":"col-types/#columns-and-data-types","text":"","title":"Columns and data types"},{"location":"col-types/#adding-and-removing-columns","text":"Every Grist table, when first created, has three columns called A, B, and C. To rename a column, hover on the column header, click on the drop-down, then select \u201cRename column\u201d (you can also just click on the column header twice). To delete a column, hover on the column header, click on the drop-down, then select \u201cDelete column\u201d. To add a column, click on the \u201c+\u201d symbol in the header row, then type in the column name. To reorder a column, first select the column if it isn\u2019t already selected, by clicking on the column header. Next, click and hold on the column header. After a second or two, you\u2019ll be able to drag the entire column to its new location. Another way to reorder columns is via the widget options: In the visible columns section, the columns can be dragged around freely to reorder them. You can also hide columns here.","title":"Adding and removing columns"},{"location":"col-types/#renaming-columns","text":"You can rename columns in several ways. One way is to click on the column header when the column is already selected. Another is to hover on the column header, click on the drop-down, then select \u201cRename Column\u201d. Another is by selecting \u201cColumn Options\u201d in the same drop-down, and editing the \u201cField\u201d name shown at the top. A bonus with this method is that you can also control the identifier given to the column in formulas. By default this is based on the field name, with any characters Python doesn\u2019t like replaced with \u201c_\u201c, and a number added if needed to keep the name unique within your table. If you don\u2019t like this identifier, you can change it, though it will still need to be Python-friendly. To change the name, deselect \u201cUse Name as ID\u201d if it is selected, and edit the \u201cID\u201d entry now shown.","title":"Renaming columns"},{"location":"col-types/#specifying-a-type","text":"Grist columns have types, similar to other spreadsheets or databases. The type of a column controls its appearance and the help Grist will offer you when editing cells. When you create a new column, it initially has the Any type. When you enter the column\u2019s first cell, Grist tries to narrow this type. If you enter a number, the column will be changed to Numeric type, which is right-aligned by default. If you enter something that doesn\u2019t look like a number, the column will be changed to Text type, which is left-aligned by default. To inspect the type of a column, hover over the column header, then click on the drop-down, then select \u201cColumn Options\u201d. The \u201cColumn Type\u201d section is what you are looking for. You will often want to control the column type manually. You can change it in the \u201cColumn Type\u201d section. For example, here we set a column full of \u201cyes\u201d and \u201cno\u201d responses to be of type Toggle : One advantage of doing so is that Grist can now offer you ways to visualize the column that are specialized to on/off style values. Each column type has different options in the \u201cCell Format\u201d section of the side panel: Regardless of the column type, you can enter any value in cells. If a value entered is incompatible with the defined type, the cell will be highlighted with an error (and columns referencing the invalid value will also display an error):","title":"Specifying a type"},{"location":"col-types/#supported-types","text":"Grist supports the following types: Type Description Text ( Default ) Any string of text. Numeric Floating point numbers. Integer Integers (whole numbers). Toggle Boolean (True / False) Date Valid date (without a time component). DateTime Valid date + time. Choice Single value from a list of pre-defined valid values. Choice List Multiple values from a list of pre-defined valid values. Reference A reference column to another table. Reference List A list of references to another table. Attachment Cells where you can place files or images.","title":"Supported types"},{"location":"col-types/#text-columns","text":"You can put any text you like in this type of column. For formatting, you can control alignment and word-wrap, text color and background color. If the column is used for storing web links, you can turn on \u201cHyperLink\u201d formatting to make links prettier and to include a clickable link icon.","title":"Text columns"},{"location":"col-types/#hyperlinks","text":"When a Text column uses \u201cHyperLink\u201d formatting, values get formatted like so: https://getgrist.com will show https://getgrist.com . Grist Labs https://getgrist.com will show Grist Labs (linking to \u201chttps://getgrist.com\u201d with \u201cGrist Labs\u201d as the text). Email Help mailto:support@getgrist.com will show Email Help , a link which would open an email program to compose an email to support@getgrist.com. In general, the value until the last space is used as the link text, while the last word is used as the link destination. Link formatting is particularly useful when links are generated using a formula such as: $Company + \" \" + $Website","title":"Hyperlinks"},{"location":"col-types/#numeric-columns","text":"This type is for numbers, including floating-point numbers. In addition to controlling alignment and color, you can choose the number format, and the minimum and maximum number of digits to show after the decimal point. Choosing the \u201cSpinner\u201d option for CELL FORMAT will show arrows in each cell for increasing/decreasing the number. The options under NUMBER FORMAT include: $ : Format for currency amounts, such as dollars or euro. Selecting the $ will add a currency prefix, thousands separators, and default to 2 digits after the decimal point. It will also open a currency selector for international currencies. Tip: You can set a document\u2019s default timezone, locale, and currency in Document Settings. , : Turn on the display of thousands separators. % : Show numbers as percentages. E.g. \u201c0.5\u201d would show as \u201c50%\u201d. Exp : Show numbers in exponential (or scientific) notation. E.g. \u201c1234\u201d would be shown as \u201c1.234E3\u201d. (-) : Show negative numbers in parentheses, without a leading minus sign. This is commonly used in accounting, and usually combined with $ or , formats.","title":"Numeric columns"},{"location":"col-types/#integer-columns","text":"This is strictly for whole numbers. It has the same options as the numeric type.","title":"Integer columns"},{"location":"col-types/#toggle-columns","text":"This type is for storing true/false values. The values can be shown as text, checkboxes, or switches. See also example in Specifying a type .","title":"Toggle columns"},{"location":"col-types/#date-columns","text":"This type is for storing calendar dates (without a time of day component). More details in Working with dates . You can choose the format for dates, see the date formatting reference .","title":"Date columns"},{"location":"col-types/#datetime-columns","text":"This type is for storing calendar dates plus time of day. More details in Working with dates . You can choose the format for dates, see the date and time formatting reference . You can also specify the timezone to display for.","title":"DateTime columns"},{"location":"col-types/#choice-columns","text":"This type is for storing one of a set of valid values, where you get to specify the available values. There\u2019s an example of using this type of column in the Lightweight CRM example . If you start off with a populated text column, Grist will take all unique values from that column as the valid choices. You can add or remove choices by either clicking Edit or on the Choices box. To add a choice, type its value in the text field below the other choices and press Enter . To remove a choice, click the delete icon to the right of the choice or select the choice by clicking on it, and then press Backspace / Delete . To apply/save your changes, you can either click the Save button or press Enter . To discard your changes, you can either click the Cancel button or press Escape . Clicking the color dropdown to the left of a choice will open a color picker for customizing the fill and text color of a choice. Changes to colors are reflected inside cells and throughout the rest of your document once you save your changes. Choices can be re-arranged by clicking and dragging them, which determines the order in which they appear when typing into a cell. You can also rename a choice by clicking on it and typing a new name. Renaming a choice will also rename all the values that are used in your document. The configuration editor supports many convenient keyboard shortcuts. You can press the Up Arrow and Down Arrow keys to navigate between selected choices; hold the Shift key to bulk select adjacent choices while clicking or using the arrow keys; and hold the Command / Control key to multi-select choices while clicking. To select all choices, you can press Command / Control + A . Undo and redo are also supported in the configuration editor. While your cursor has focus on the editor text field, you can press Command / Control + Z to undo your last change, and Command / Control + Shift + Z to redo it. The configuration editor also supports copy and paste. To copy, select the choices you want copied and press Command / Control + C . To paste, focus on the text field and press Command / Control + V . Choices are pasted in bulk if the clipboard contains multiple lines of text. Choices can also be copied from one column\u2019s configuration editor and pasted into another, which will copy over both the values and their configured colors. When typing into a Choice column cell, your configured choices will be shown in an autocomplete menu. You can either click on a choice, or use the arrow keys and Enter to add a choice to a cell. If your input is not one of the valid choices, Grist will display a menu option for conveniently adding it as a valid choice and into the cell in one step.","title":"Choice columns"},{"location":"col-types/#choice-list-columns","text":"This type is for storing multiple values from a set of valid values, where you get to specify the available values. If you start off with a populated text column, Grist will take all unique values from that column as the valid choices. Choice List columns are configured the same way Choice columns are, and support the same level of customization and keyboard shortcuts. They differ in the number of choices they allow to be entered in each cell. While Choice columns only allow at most one value in a cell, Choice List columns allow many. Like with Choice columns, when typing into a Choice List column cell, the valid choices will be shown in an autocomplete menu. Once you\u2019ve selected a value, you can continue adding choices to the same cell. Choices can be re-arranged inside their cells by clicking and dragging them while the cell is being edited. You can also use the arrow keys and the Delete key to navigate and delete choices, or simply click the delete icon when hovering your cursor over a choice.","title":"Choice List columns"},{"location":"col-types/#reference-columns","text":"This sets up a cross-reference to another table. You can specify the table to reference, and a column within that table to show. There\u2019s a lot you can do with this kind of column, see Reference columns for details.","title":"Reference columns"},{"location":"col-types/#reference-list-columns","text":"Like Reference columns , but can store multiple references in a single cell. There\u2019s a lot you can do with this kind of column, see Reference columns for details.","title":"Reference List columns"},{"location":"col-types/#attachment-columns","text":"This column type lets you insert entire files and images in cells. When images are added in cells, a preview thumbnail is shown in the cell. The \u201cSize\u201d bar gives control of the scale of this thumbnail. When you create an attachment column, cells of that column will have a paperclip icon: When you click on a paperclip icon, you can select a file to attach. If it is an image, you\u2019ll see a thumbnail of it in the cell. If you hover over the image, you\u2019ll see a paperclip icon again, which you can use to add more files to the same cell. You\u2019ll also see an \u201copen-eye\u201d icon, which when clicked brings up a larger view of all of the cell\u2019s attachments, and gives you a way to rename them, download them, or remove them.","title":"Attachment columns"},{"location":"copying-docs/","text":"Copying Documents # It is sometimes useful to make a copy of a Grist document. A few scenarios are described below. In all cases, you would start with the \u201cShare\u201d menu available from the top bar of an open document: Trying Out Changes # As your document grows in importance, it becomes riskier to make changes to its structure or logic. That\u2019s a good reason to work out such changes on a copy of the document, without fear of affecting the original. Open the Share menu and click the option \u201cWork on a Copy\u201d. You\u2019ll get an unsaved copy of your document. This copy is special in that it knows which original document it came from (you can see the original document ID included in its URL). You can experiment on this copy, making changes big or small, one or many. For those familiar with software development, this option is similar to a branch or a fork as used in version control systems like Git . When working on a copy, the Share menu has some new options. For example, you can view differences between the document copy and the original, using the \u201cCompare to Original\u201d menu item: New material will be highlighted in green, and old material in red. Once satisfied with your changes, click the option \u201cReplace Original\u201d. Your copy will replace the original document. Grist will warn you if the replacement risks overwriting any recent changes in the original. To discard your changes, simply go back to the original document using the \u201cReturn to Original\u201d option (or the Back button in your browser). Don\u2019t worry about cleaning up your copy. It does not count against any document limits, and will get cleaned up automatically if it has been unused for a while. You can also save your copy under a new name using the \u201cSave Copy\u201d option. Access to Unsaved Copies # When you create an experimental copy as described above, it gets a unique link. The copy isn\u2019t listed anywhere, so others will not find it unless you share this link. Anyone with a link to your copy and with access to the original document is allowed to view the copy, but you are the only user allowed to edit it. This means that you can share a link to your copy with others, who can review your changes. It also means that you can try out changes even if you cannot edit the original! You can then share a link to your copy with a collaborator who has edit access, who would be able to review your changes and apply them to the original document. Duplicating Documents # You can save your document under a new name using the \u201cDuplicate Document\u201d option in the Share menu. Clicking it opens a dialog: Type in the new name. If you have access to one or more team accounts, you may have a choice of a destination team and a destination workspace where to save the copy. Note that on a team plan, you would not be able to save the document outside of the team account unless you have owner-level access to the document. Copying as a Template # If you mark the \u201cAs Template\u201d checkbox when saving a copy, you\u2019ll get a document which has all the structure, formulas, and layouts of the original, but none of the data. It makes it easy to use the existing structure for a new set of data. Copying for Backup Purposes # You can use the \u201cDuplicate Document\u201d option to save the current version of the document as a backup, perhaps appending today\u2019s date to the name of the copy. That said, Grist already makes automatic backups regularly, which may be sufficient for most backup needs. See Automatic Backups . Copying Public Examples # When you open a public example from the Examples & Templates page , it will open the example in fiddle mode . Fiddle mode is similar to working on a copy, as described above in Trying Out Changes . You may make changes, but they remain private to you. You can save a copy of the example under a new name using the \u201cSave Copy\u201d button or menu option. You can use the \u201cAs Template\u201d checkbox to discard the data of the example, keeping only its structure. This makes it easy to start using it for your own data.","title":"Copying documents"},{"location":"copying-docs/#copying-documents","text":"It is sometimes useful to make a copy of a Grist document. A few scenarios are described below. In all cases, you would start with the \u201cShare\u201d menu available from the top bar of an open document:","title":"Copying Documents"},{"location":"copying-docs/#trying-out-changes","text":"As your document grows in importance, it becomes riskier to make changes to its structure or logic. That\u2019s a good reason to work out such changes on a copy of the document, without fear of affecting the original. Open the Share menu and click the option \u201cWork on a Copy\u201d. You\u2019ll get an unsaved copy of your document. This copy is special in that it knows which original document it came from (you can see the original document ID included in its URL). You can experiment on this copy, making changes big or small, one or many. For those familiar with software development, this option is similar to a branch or a fork as used in version control systems like Git . When working on a copy, the Share menu has some new options. For example, you can view differences between the document copy and the original, using the \u201cCompare to Original\u201d menu item: New material will be highlighted in green, and old material in red. Once satisfied with your changes, click the option \u201cReplace Original\u201d. Your copy will replace the original document. Grist will warn you if the replacement risks overwriting any recent changes in the original. To discard your changes, simply go back to the original document using the \u201cReturn to Original\u201d option (or the Back button in your browser). Don\u2019t worry about cleaning up your copy. It does not count against any document limits, and will get cleaned up automatically if it has been unused for a while. You can also save your copy under a new name using the \u201cSave Copy\u201d option.","title":"Trying Out Changes"},{"location":"copying-docs/#access-to-unsaved-copies","text":"When you create an experimental copy as described above, it gets a unique link. The copy isn\u2019t listed anywhere, so others will not find it unless you share this link. Anyone with a link to your copy and with access to the original document is allowed to view the copy, but you are the only user allowed to edit it. This means that you can share a link to your copy with others, who can review your changes. It also means that you can try out changes even if you cannot edit the original! You can then share a link to your copy with a collaborator who has edit access, who would be able to review your changes and apply them to the original document.","title":"Access to Unsaved Copies"},{"location":"copying-docs/#duplicating-documents","text":"You can save your document under a new name using the \u201cDuplicate Document\u201d option in the Share menu. Clicking it opens a dialog: Type in the new name. If you have access to one or more team accounts, you may have a choice of a destination team and a destination workspace where to save the copy. Note that on a team plan, you would not be able to save the document outside of the team account unless you have owner-level access to the document.","title":"Duplicating Documents"},{"location":"copying-docs/#copying-as-a-template","text":"If you mark the \u201cAs Template\u201d checkbox when saving a copy, you\u2019ll get a document which has all the structure, formulas, and layouts of the original, but none of the data. It makes it easy to use the existing structure for a new set of data.","title":"Copying as a Template"},{"location":"copying-docs/#copying-for-backup-purposes","text":"You can use the \u201cDuplicate Document\u201d option to save the current version of the document as a backup, perhaps appending today\u2019s date to the name of the copy. That said, Grist already makes automatic backups regularly, which may be sufficient for most backup needs. See Automatic Backups .","title":"Copying for Backup Purposes"},{"location":"copying-docs/#copying-public-examples","text":"When you open a public example from the Examples & Templates page , it will open the example in fiddle mode . Fiddle mode is similar to working on a copy, as described above in Trying Out Changes . You may make changes, but they remain private to you. You can save a copy of the example under a new name using the \u201cSave Copy\u201d button or menu option. You can use the \u201cAs Template\u201d checkbox to discard the data of the example, keeping only its structure. This makes it easy to start using it for your own data.","title":"Copying Public Examples"},{"location":"creating-doc/","text":"Creating a document # To get started with Grist you\u2019ll first need to create a document. Each document can store different kinds of data, so think of it as a collection of related data. You can start from scratch or import existing data. Click the \u201cAdd New\u201d button on the home screen and choose either \u201cCreate empty document\u201d or \u201cImport document\u201d. You can import spreadsheets in Excel format, as well as comma-separated value files or CSVs. If you import a spreadsheet that has multiple tabs, each tab will become a separate table in Grist. Examples and templates # The \u201cExamples & Templates\u201d list on the Grist homepage includes a number of Grist documents that demonstrate Grist features and use cases. These are always accessible via a link on the bottom left of the home page. For each example, there is a corresponding How-To Tutorial in the Grist Help Center, which describes how to use it or how to build such a document from scratch. When you open an example, you can make changes to it. You are editing a copy, and your changes are private to you. You can save your changes by clicking the \u201cSave Copy\u201d button on the top of the page. You can also use any of the examples as a template for a new document, whch will include the structure, layout, and formulas of the example, but none of the sample data. Simply use the \u201cSave Copy\u201d button and check the \u201cAs Template\u201d checkbox in the dialog that opens. Importing more data # Once you\u2019ve created a document, you can import more data into it by opening the document and selecting \u201cAdd New\u201d and then one of the Import options. You can read more about importing data at Importing more data . Document settings # While a document is open, you can access the document\u2019s settings from the user menu There you can find the document\u2019s ID for API use, as well as set the default timezone, locale, and currency for the document.","title":"Creating a document"},{"location":"creating-doc/#creating-a-document","text":"To get started with Grist you\u2019ll first need to create a document. Each document can store different kinds of data, so think of it as a collection of related data. You can start from scratch or import existing data. Click the \u201cAdd New\u201d button on the home screen and choose either \u201cCreate empty document\u201d or \u201cImport document\u201d. You can import spreadsheets in Excel format, as well as comma-separated value files or CSVs. If you import a spreadsheet that has multiple tabs, each tab will become a separate table in Grist.","title":"Creating a document"},{"location":"creating-doc/#examples-and-templates","text":"The \u201cExamples & Templates\u201d list on the Grist homepage includes a number of Grist documents that demonstrate Grist features and use cases. These are always accessible via a link on the bottom left of the home page. For each example, there is a corresponding How-To Tutorial in the Grist Help Center, which describes how to use it or how to build such a document from scratch. When you open an example, you can make changes to it. You are editing a copy, and your changes are private to you. You can save your changes by clicking the \u201cSave Copy\u201d button on the top of the page. You can also use any of the examples as a template for a new document, whch will include the structure, layout, and formulas of the example, but none of the sample data. Simply use the \u201cSave Copy\u201d button and check the \u201cAs Template\u201d checkbox in the dialog that opens.","title":"Examples and templates"},{"location":"creating-doc/#importing-more-data","text":"Once you\u2019ve created a document, you can import more data into it by opening the document and selecting \u201cAdd New\u201d and then one of the Import options. You can read more about importing data at Importing more data .","title":"Importing more data"},{"location":"creating-doc/#document-settings","text":"While a document is open, you can access the document\u2019s settings from the user menu There you can find the document\u2019s ID for API use, as well as set the default timezone, locale, and currency for the document.","title":"Document settings"},{"location":"custom-layouts/","text":"Custom Layouts # You can easily add multiple widgets to one page, as described in Page widgets , and link them as described in Linking widgets . It is also easy to customize their arrangement. Move the mouse cursor over the title of the widget. A small drag icon will appear over to the left of the title. When you press this icon, you can drag the entire widget to a different place on the screen. As you move it close to the edge of the screen, or the edge of another widget, you\u2019ll see a dashed outline \u2013 sometimes more than one \u2013 where the widget can be dropped. Release the mouse to reposition this widget. To resize widgets, move the mouse cursor between two widgets until a dashed line appear. Drag this dashed line to resize. Layout recommendations # While there is no limit to how complicated a layout you can create, you should aim for simple layouts that will be easy to use for your users (even when you are the only user!) One rule of thumb is that a widget controlled by another \u201cselector\u201d widget (see Linking widgets ) should be to the right or below it. Here are some common layouts. Layout: List and detail # The most common one is to have a list of items on the left, with one or more widgets on the right providing more information. For instance, the Lightweight CRM example includes a list of people on the left, with a person\u2019s card and a table of related interactions to the right of the list. In this usage, you might want to include in the list only the minimal information you need, perhaps only a contact\u2019s name. If your table has many columns, a quick way to leave only a few is via the widget options in the right-side panel. In the table widget, click the three-dot menu on the top right, and select \u201cWidget options\u201d. You\u2019ll see a list of \u201cVisible Columns\u201d. Click \u201cSelect all\u201d link on top of that list: Now uncheck the few fields you want to keep, and click \u201cHide columns\u201d to hide the rest. Layout: Spreadsheet plus # Sometimes a wide spreadsheet with many columns is convenient. If you\u2019d like to see more info associated with the rows of this spreadsheet, you can add widgets below it. These could be details linked to the spreadsheet, or summary tables that show totals or other global info. For instance, here is a possible layout based on the Lightweight CRM example. It shows contacts as a wide spreadsheet, and below that includes sections with an overall summary, and interactions for the selected contact. Layout: Summary and details # Sometimes it\u2019s useful to divide up a large dataset into subsets. For instance, you might have credit card transactions, and want a way to view them one month at a time. To do it, you\u2019ll use a \u201cMonth\u201d column, creating one with a formula if needed. Then create a summary table grouped by \u201cMonth\u201d (see Summary tables , and link the table of transactions to it. We can then select a month and see a spreadsheet of only the transactions in that month. Layout: Charts dashboard # If you have many charts, you can just lay them out in a grid to create a top-level dashboard. For dynamic charts in which data is selected by another table, a layout like List-and-detail above would work well. One tip is to include both a Table widget and a Chart widget, configured and linked the same way, and differing only in the widget type: Having a table alongside the chart can be a useful reference, as well as provide more context to what is visible in the chart.","title":"Custom layouts"},{"location":"custom-layouts/#custom-layouts","text":"You can easily add multiple widgets to one page, as described in Page widgets , and link them as described in Linking widgets . It is also easy to customize their arrangement. Move the mouse cursor over the title of the widget. A small drag icon will appear over to the left of the title. When you press this icon, you can drag the entire widget to a different place on the screen. As you move it close to the edge of the screen, or the edge of another widget, you\u2019ll see a dashed outline \u2013 sometimes more than one \u2013 where the widget can be dropped. Release the mouse to reposition this widget. To resize widgets, move the mouse cursor between two widgets until a dashed line appear. Drag this dashed line to resize.","title":"Custom Layouts"},{"location":"custom-layouts/#layout-recommendations","text":"While there is no limit to how complicated a layout you can create, you should aim for simple layouts that will be easy to use for your users (even when you are the only user!) One rule of thumb is that a widget controlled by another \u201cselector\u201d widget (see Linking widgets ) should be to the right or below it. Here are some common layouts.","title":"Layout recommendations"},{"location":"custom-layouts/#layout-list-and-detail","text":"The most common one is to have a list of items on the left, with one or more widgets on the right providing more information. For instance, the Lightweight CRM example includes a list of people on the left, with a person\u2019s card and a table of related interactions to the right of the list. In this usage, you might want to include in the list only the minimal information you need, perhaps only a contact\u2019s name. If your table has many columns, a quick way to leave only a few is via the widget options in the right-side panel. In the table widget, click the three-dot menu on the top right, and select \u201cWidget options\u201d. You\u2019ll see a list of \u201cVisible Columns\u201d. Click \u201cSelect all\u201d link on top of that list: Now uncheck the few fields you want to keep, and click \u201cHide columns\u201d to hide the rest.","title":"Layout: List and detail"},{"location":"custom-layouts/#layout-spreadsheet-plus","text":"Sometimes a wide spreadsheet with many columns is convenient. If you\u2019d like to see more info associated with the rows of this spreadsheet, you can add widgets below it. These could be details linked to the spreadsheet, or summary tables that show totals or other global info. For instance, here is a possible layout based on the Lightweight CRM example. It shows contacts as a wide spreadsheet, and below that includes sections with an overall summary, and interactions for the selected contact.","title":"Layout: Spreadsheet plus"},{"location":"custom-layouts/#layout-summary-and-details","text":"Sometimes it\u2019s useful to divide up a large dataset into subsets. For instance, you might have credit card transactions, and want a way to view them one month at a time. To do it, you\u2019ll use a \u201cMonth\u201d column, creating one with a formula if needed. Then create a summary table grouped by \u201cMonth\u201d (see Summary tables , and link the table of transactions to it. We can then select a month and see a spreadsheet of only the transactions in that month.","title":"Layout: Summary and details"},{"location":"custom-layouts/#layout-charts-dashboard","text":"If you have many charts, you can just lay them out in a grid to create a top-level dashboard. For dynamic charts in which data is selected by another table, a layout like List-and-detail above would work well. One tip is to include both a Table widget and a Chart widget, configured and linked the same way, and differing only in the widget type: Having a table alongside the chart can be a useful reference, as well as provide more context to what is visible in the chart.","title":"Layout: Charts dashboard"},{"location":"dates/","text":"Overview # Grist expresses dates and times in two ways. The first is the Date column type, which represents a calendar date, with no time of day, and not associated with any particular timezone. The second is the DateTime column type, which represents a calendar date with a time of day which can be linked with a timezone. The Date and DateTime column types support different formatting options. When a column is set to be a Date or a DateTime , a date-picker widget will let you select the date on a calendar when editing a cell. When working with dates in formulas, the dates are Python datetime objects . That allows you to do some powerful things, but can be unexpected if you\u2019re not familiar with them. Making a date/time column # For a general introduction to setting the type of columns, see Columns and data types . To tell Grist that you intend to enter only date/times in a column, over on the header for the column, find the drop-down, and select \u201cColumn Options\u201d. Then in the side panel that opens on the right, pick \u201cDate\u201d from the \u201cColumn Type\u201d drop-down. Or, if you want dates with times, pick \u201cDateTime\u201d. Then you can choose your preferred date/time format. For the \u201cDateTime\u201d type, you can also choose the timezone. When you convert a column from another type, such as \u201cText\u201d, you\u2019ll see a preview of the conversion results, and will need to click \u201cApply\u201d to complete conversion. You can come back and change settings at any time. Now when you edit a cell in this column, you will have help for selecting dates and times. Inserting the current date # You can insert the current date in a cell using \u2318 + ; (semicolon) (Mac) or Ctrl + ; (Windows). You can insert the current date and time using \u2318 + Shift + ; (Mac) or Ctrl + Shift + ; (Windows). When editing a date cell, the date entry widget has a \u201ctoday\u201d button for today\u2019s date. Parsing dates from strings # The DATEVALUE function converts a string that represents a date into a datetime object. It\u2019s simple to use and it will auto-detect different date formats: You can also use Python\u2019s datetime library, which provides two helpful functions: strptime() and strftime() . For example, let\u2019s say you have a table of movie sequels and their release dates (as strings). You\u2019d like to parse out the actual date to be able to sort the table properly. Here\u2019s how you would do that: First line imports the datetime library The second line splits the string into two parts and returns the second part (Python arrays are zero-based). The third line uses Python\u2019s strptime function to parse the date (e.g. \u201cMay 19, 1999\u201d) into a datetime object. The first parameter to the function is the string to parse, the second parameter is the date format that the string is in. Take a look at the format options to see if the example format string %B %d, %Y makes sense. (Note: You could\u2019ve also used DATEVALUE(d) to achieve the same result.) The result has a true date column and can now be properly sorted chronologically, with \u201cA New Hope\u201d at the top. For historical reasons, the first Star Wars movie is considered to be Episode 4. And, because the column type is selected as a date, you can use the \u201cDate Format\u201d in \u201cColumn Options\u201d to select the format in which to display the date. For some situations, you may wish to use the dateutil python library. For example, if you live in an area where dates typically start with the day and then the month, you could use this formula: import dateutil dateutil.parser.parse($date_text, dayfirst=True) Date arithmetic # Once you have a proper date column, often you\u2019ll want to do date arithmetic such as calculating the difference between two dates. The simplest way to do this is to use the DATEDIF function which takes two dates and the unit of information to return (Days, Months, or Years). You could also use the minus sign to subtract two dates, but you might be surprised at the result: This happens because subtracting two datetime objects as we did in the example above, results in a datetime.timedelta object which represents, \u201cA duration expressing the difference between two date, time, or datetime instances to microsecond resolution.\u201d In Grist (and Python) you have to be more specific above how you want to display the date difference. For example, to get the number of days from the returned timedelta object, use its .days property: If you want weeks or years, just divide by 7 or by 365. (Divide by 7.0 or 365.0 to include a fractional part in the result.) If you want hours, multiply by 24. You can also use specific functions to get what you want. For example, DAYS is a common function in spreadsheet apps that returns the difference between two dates: DAYS($Last_day, $First_day) Excel/Sheets formulas Grist supports many other common functions from other spreadsheet apps, including DATEADD , DATEDIF , DATEVALUE , MONTH , HOUR , and many more . Getting a part of the date # You\u2019ve seen how to parse the date, display it in different formats, and do date arithmetic. But what if you want to get more information about a specific date, such as getting its day of the week? One option is to use the WEEKDAY function, which behaves as it does in Excel, returning 1-7 for Sunday-Saturday. Alternatively, we can use the strftime function: Yet another option would be to reformat the date using Date Format in Column Options (see the date formatting reference ). Time zones # Values in DateTime columns represent moments in time. The same moment will look different in different timezones. In Grist, the timezone is set on each DateTime column. For instance, if the timezone is set to \u201cAmerica/New_York\u201d, it will show the values in New York timezone to collaborators anywhere in the world. A Grist document has a global timezone setting, which serves as the default timezone for when you create a new column of type DateTime . This global timezone is set to your local timezone when you first create a document. You can see or change it by clicking on your profile picture or icon, and selecting \u201cDocument Settings\u201d. If you insert the current date and time using \u2318 + Shift + ; (Mac) or Ctrl + Shift + ; (Windows) into a DateTime column, it will be inserted as a true timezone-aware timestamp, and shown with the timezone set for that column. If you do the same in a Text column, the date/time will be inserted as the text appropriate for the document\u2019s global timezone setting. Similarly, inserting the current date into a Date column will produce the current date according to the document\u2019s timezone. Additional resources # Python cheatsheet for strftime , for using with strftime() and strptime() in formulas. Date formatting cheatsheet , for specifying the date/time format in column settings. dateutil library , extensions to the Python standard datetime module.","title":"Working with dates"},{"location":"dates/#overview","text":"Grist expresses dates and times in two ways. The first is the Date column type, which represents a calendar date, with no time of day, and not associated with any particular timezone. The second is the DateTime column type, which represents a calendar date with a time of day which can be linked with a timezone. The Date and DateTime column types support different formatting options. When a column is set to be a Date or a DateTime , a date-picker widget will let you select the date on a calendar when editing a cell. When working with dates in formulas, the dates are Python datetime objects . That allows you to do some powerful things, but can be unexpected if you\u2019re not familiar with them.","title":"Overview"},{"location":"dates/#making-a-datetime-column","text":"For a general introduction to setting the type of columns, see Columns and data types . To tell Grist that you intend to enter only date/times in a column, over on the header for the column, find the drop-down, and select \u201cColumn Options\u201d. Then in the side panel that opens on the right, pick \u201cDate\u201d from the \u201cColumn Type\u201d drop-down. Or, if you want dates with times, pick \u201cDateTime\u201d. Then you can choose your preferred date/time format. For the \u201cDateTime\u201d type, you can also choose the timezone. When you convert a column from another type, such as \u201cText\u201d, you\u2019ll see a preview of the conversion results, and will need to click \u201cApply\u201d to complete conversion. You can come back and change settings at any time. Now when you edit a cell in this column, you will have help for selecting dates and times.","title":"Making a date/time column"},{"location":"dates/#inserting-the-current-date","text":"You can insert the current date in a cell using \u2318 + ; (semicolon) (Mac) or Ctrl + ; (Windows). You can insert the current date and time using \u2318 + Shift + ; (Mac) or Ctrl + Shift + ; (Windows). When editing a date cell, the date entry widget has a \u201ctoday\u201d button for today\u2019s date.","title":"Inserting the current date"},{"location":"dates/#parsing-dates-from-strings","text":"The DATEVALUE function converts a string that represents a date into a datetime object. It\u2019s simple to use and it will auto-detect different date formats: You can also use Python\u2019s datetime library, which provides two helpful functions: strptime() and strftime() . For example, let\u2019s say you have a table of movie sequels and their release dates (as strings). You\u2019d like to parse out the actual date to be able to sort the table properly. Here\u2019s how you would do that: First line imports the datetime library The second line splits the string into two parts and returns the second part (Python arrays are zero-based). The third line uses Python\u2019s strptime function to parse the date (e.g. \u201cMay 19, 1999\u201d) into a datetime object. The first parameter to the function is the string to parse, the second parameter is the date format that the string is in. Take a look at the format options to see if the example format string %B %d, %Y makes sense. (Note: You could\u2019ve also used DATEVALUE(d) to achieve the same result.) The result has a true date column and can now be properly sorted chronologically, with \u201cA New Hope\u201d at the top. For historical reasons, the first Star Wars movie is considered to be Episode 4. And, because the column type is selected as a date, you can use the \u201cDate Format\u201d in \u201cColumn Options\u201d to select the format in which to display the date. For some situations, you may wish to use the dateutil python library. For example, if you live in an area where dates typically start with the day and then the month, you could use this formula: import dateutil dateutil.parser.parse($date_text, dayfirst=True)","title":"Parsing dates from strings"},{"location":"dates/#date-arithmetic","text":"Once you have a proper date column, often you\u2019ll want to do date arithmetic such as calculating the difference between two dates. The simplest way to do this is to use the DATEDIF function which takes two dates and the unit of information to return (Days, Months, or Years). You could also use the minus sign to subtract two dates, but you might be surprised at the result: This happens because subtracting two datetime objects as we did in the example above, results in a datetime.timedelta object which represents, \u201cA duration expressing the difference between two date, time, or datetime instances to microsecond resolution.\u201d In Grist (and Python) you have to be more specific above how you want to display the date difference. For example, to get the number of days from the returned timedelta object, use its .days property: If you want weeks or years, just divide by 7 or by 365. (Divide by 7.0 or 365.0 to include a fractional part in the result.) If you want hours, multiply by 24. You can also use specific functions to get what you want. For example, DAYS is a common function in spreadsheet apps that returns the difference between two dates: DAYS($Last_day, $First_day) Excel/Sheets formulas Grist supports many other common functions from other spreadsheet apps, including DATEADD , DATEDIF , DATEVALUE , MONTH , HOUR , and many more .","title":"Date arithmetic"},{"location":"dates/#getting-a-part-of-the-date","text":"You\u2019ve seen how to parse the date, display it in different formats, and do date arithmetic. But what if you want to get more information about a specific date, such as getting its day of the week? One option is to use the WEEKDAY function, which behaves as it does in Excel, returning 1-7 for Sunday-Saturday. Alternatively, we can use the strftime function: Yet another option would be to reformat the date using Date Format in Column Options (see the date formatting reference ).","title":"Getting a part of the date"},{"location":"dates/#time-zones","text":"Values in DateTime columns represent moments in time. The same moment will look different in different timezones. In Grist, the timezone is set on each DateTime column. For instance, if the timezone is set to \u201cAmerica/New_York\u201d, it will show the values in New York timezone to collaborators anywhere in the world. A Grist document has a global timezone setting, which serves as the default timezone for when you create a new column of type DateTime . This global timezone is set to your local timezone when you first create a document. You can see or change it by clicking on your profile picture or icon, and selecting \u201cDocument Settings\u201d. If you insert the current date and time using \u2318 + Shift + ; (Mac) or Ctrl + Shift + ; (Windows) into a DateTime column, it will be inserted as a true timezone-aware timestamp, and shown with the timezone set for that column. If you do the same in a Text column, the date/time will be inserted as the text appropriate for the document\u2019s global timezone setting. Similarly, inserting the current date into a Date column will produce the current date according to the document\u2019s timezone.","title":"Time zones"},{"location":"dates/#additional-resources","text":"Python cheatsheet for strftime , for using with strftime() and strptime() in formulas. Date formatting cheatsheet , for specifying the date/time format in column settings. dateutil library , extensions to the Python standard datetime module.","title":"Additional resources"},{"location":"document-history/","text":"Document history # To access information about a document\u2019s history, click \u201cDocument History\u201d in the left panel. The right panel will then offer two tabs, \u201cActivity\u201d and \u201cSnapshots\u201d. Snapshots # Grist automatically saves complete backups of your documents as you work on them, making them available on the Snapshots tab. Read Automatic Backups for details on using this tab to examine, compare, and restore from older versions of a document. Activity # The Activity tab lists all recent changes for the table associated with the widget you\u2019re currently looking at. Select the \u201cAll tables\u201d checkbox to see recent changes in the document regardless of table. Changes are shown as small table extracts. The cells are clickable, and bring you to the current version of the cell (if it still exists) in the \u201cprimary\u201d widget for the table containing it (this is typically the first widget created showing the table).","title":"Document history"},{"location":"document-history/#document-history","text":"To access information about a document\u2019s history, click \u201cDocument History\u201d in the left panel. The right panel will then offer two tabs, \u201cActivity\u201d and \u201cSnapshots\u201d.","title":"Document history"},{"location":"document-history/#snapshots","text":"Grist automatically saves complete backups of your documents as you work on them, making them available on the Snapshots tab. Read Automatic Backups for details on using this tab to examine, compare, and restore from older versions of a document.","title":"Snapshots"},{"location":"document-history/#activity","text":"The Activity tab lists all recent changes for the table associated with the widget you\u2019re currently looking at. Select the \u201cAll tables\u201d checkbox to see recent changes in the document regardless of table. Changes are shown as small table extracts. The cells are clickable, and bring you to the current version of the cell (if it still exists) in the \u201cprimary\u201d widget for the table containing it (this is typically the first widget created showing the table).","title":"Activity"},{"location":"embedding/","text":"Embedding Grist # This is an experimental feature The design of this feature is likely to evolve. Keep an eye on our Roadmap for updates. Perhaps you\u2019d like to list your product, prices and quantities on your website, or you want to display a pie chart of voting results that updates live. With public access turned on, you may embed your Grist document on your own site. To do that, you first need to make it public and have access to your website\u2019s code in order to place some HTML code in the desired location. If your site is hosted on some popular cloud CMS platform (like Blogger or WordPress), you may find HTML code blocks in your theme editor, or may need to use a plugin to access your site\u2019s code. If you have any problems editing your site, feel free to ask us or post a question on our Community Forum . Once you have decided where to embed your document, paste this code snippet in your HTML file: <iframe src=\"https://templates.getgrist.com/6D8E2h2DQNwS/Task-Management/p/6?embed=true\" height=\"250px\" width=\"100%\" frameborder=\"0\"> </iframe> The src attribute points to the URL of the page you want to embed. To get the URL for your document, simply navigate to the page you want to share and copy the URL from the browser\u2019s address bar. Appending the ?embed=true parameter at the end tells Grist that it should show only the content of your page, removing any elements that are not necessary for the embedded version. You may wish to adjust height and width attributes to make it look better on your site. Since this Help Center document is a regular HTML file, we can try it right away! Below you should be able to see an embedded live table (not a screenshot) from one of our examples : This is live, read-only view of the Grist page and it gets updated as soon as someone edits it. You can, of course, embed any page you wish, including card view, charts and any page with multiple sections. Here are two more examples with a chart and a card list view: Embedding editable documents is not yet supported, but we are working on it and will make it available soon. You can track our progress on our Roadmap .","title":"Embedding"},{"location":"embedding/#embedding-grist","text":"This is an experimental feature The design of this feature is likely to evolve. Keep an eye on our Roadmap for updates. Perhaps you\u2019d like to list your product, prices and quantities on your website, or you want to display a pie chart of voting results that updates live. With public access turned on, you may embed your Grist document on your own site. To do that, you first need to make it public and have access to your website\u2019s code in order to place some HTML code in the desired location. If your site is hosted on some popular cloud CMS platform (like Blogger or WordPress), you may find HTML code blocks in your theme editor, or may need to use a plugin to access your site\u2019s code. If you have any problems editing your site, feel free to ask us or post a question on our Community Forum . Once you have decided where to embed your document, paste this code snippet in your HTML file: <iframe src=\"https://templates.getgrist.com/6D8E2h2DQNwS/Task-Management/p/6?embed=true\" height=\"250px\" width=\"100%\" frameborder=\"0\"> </iframe> The src attribute points to the URL of the page you want to embed. To get the URL for your document, simply navigate to the page you want to share and copy the URL from the browser\u2019s address bar. Appending the ?embed=true parameter at the end tells Grist that it should show only the content of your page, removing any elements that are not necessary for the embedded version. You may wish to adjust height and width attributes to make it look better on your site. Since this Help Center document is a regular HTML file, we can try it right away! Below you should be able to see an embedded live table (not a screenshot) from one of our examples : This is live, read-only view of the Grist page and it gets updated as soon as someone edits it. You can, of course, embed any page you wish, including card view, charts and any page with multiple sections. Here are two more examples with a chart and a card list view: Embedding editable documents is not yet supported, but we are working on it and will make it available soon. You can track our progress on our Roadmap .","title":"Embedding Grist"},{"location":"enter-data/","text":"Entering data # A spreadsheet-like grid is a great way to see data. In Grist, this is the view offered by the default page widget called \u201cTable\u201d. As in a spreadsheet, you can use the mouse or arrow keys to move around the cells of a table. To start entering data into a selecte cell, either start typing, hit Enter , or double-click the cell. Editing cells # While editing a cell, several keys are special: Escape cancels the operation and restores the previous value in the cell. Tab , Shift + Tab saves your entry and moves your cursor to the next or previous cell. Enter saves your entry and moves your cursor to the next row. Shift + Enter adds a newline inside your cell. Copying and pasting # You can copy data from Grist or paste data into it. If the pasted range is longer than the available records, new records will be added. Note that Grist does not create new columns automatically. If the pasted data has more columns than the grid displays, extra columns will be omitted. Data entry widgets # In Grist, columns have types. In addition to typing in values, many column types offer specialized widgets for entering data more conveniently. Here are some of the most useful ones: Toggle . A \u201cToggle\u201d column shows True/False values, and can show them as a \u201cCheckbox\u201d or as a \u201cSwitch\u201d widget, which you can select in the column options. You can toggle a value in such a cell by clicking the check mark or the switch, or by hitting Space . Date and DateTime . Hitting Enter on such a cell will open a calendar to pick a date. Choice and Reference . Typing into a cell of one of these types will produce an auto-complete dropdown menu. Linking to cells # You can make a sharable link to a cell by pressing \u2318 \u21e7 A (Mac) or Ctrl + Shift + A (Windows) while the cell is selected. This option is also available via the row menu as \u201cCopy anchor link.\u201d The link will be placed in your clipboard, ready to paste into an email or an instant messaging app. The link will open only for people with access to the document.","title":"Entering data"},{"location":"enter-data/#entering-data","text":"A spreadsheet-like grid is a great way to see data. In Grist, this is the view offered by the default page widget called \u201cTable\u201d. As in a spreadsheet, you can use the mouse or arrow keys to move around the cells of a table. To start entering data into a selecte cell, either start typing, hit Enter , or double-click the cell.","title":"Entering data"},{"location":"enter-data/#editing-cells","text":"While editing a cell, several keys are special: Escape cancels the operation and restores the previous value in the cell. Tab , Shift + Tab saves your entry and moves your cursor to the next or previous cell. Enter saves your entry and moves your cursor to the next row. Shift + Enter adds a newline inside your cell.","title":"Editing cells"},{"location":"enter-data/#copying-and-pasting","text":"You can copy data from Grist or paste data into it. If the pasted range is longer than the available records, new records will be added. Note that Grist does not create new columns automatically. If the pasted data has more columns than the grid displays, extra columns will be omitted.","title":"Copying and pasting"},{"location":"enter-data/#data-entry-widgets","text":"In Grist, columns have types. In addition to typing in values, many column types offer specialized widgets for entering data more conveniently. Here are some of the most useful ones: Toggle . A \u201cToggle\u201d column shows True/False values, and can show them as a \u201cCheckbox\u201d or as a \u201cSwitch\u201d widget, which you can select in the column options. You can toggle a value in such a cell by clicking the check mark or the switch, or by hitting Space . Date and DateTime . Hitting Enter on such a cell will open a calendar to pick a date. Choice and Reference . Typing into a cell of one of these types will produce an auto-complete dropdown menu.","title":"Data entry widgets"},{"location":"enter-data/#linking-to-cells","text":"You can make a sharable link to a cell by pressing \u2318 \u21e7 A (Mac) or Ctrl + Shift + A (Windows) while the cell is selected. This option is also available via the row menu as \u201cCopy anchor link.\u201d The link will be placed in your clipboard, ready to paste into an email or an instant messaging app. The link will open only for people with access to the document.","title":"Linking to cells"},{"location":"examples/","text":"More Examples # Here we will post useful examples of what you can do with Grist, sometimes with ready-to-use templates. Slicing and Dicing Credit Card Expenses : Grist offers a handy way to explore your credit card transactions quickly. American Express card members can use the ready-made template in the example. Book Lists with Library and Store Look-ups : Grist\u2019s link handling and formulas can help you with your book club, by adding automatic links to libraries, stores, review sites, and other references. The same ideas could work with Ikea furniture, food orders, whatever you like. Prepare Emails using Formulas : Turn cells into links that open an email program to compose a new message, and prefill its recipients, subject, and more. Preparing Invoices : Preview printable invoices side by side with your client data. Tracking Payroll : Keep track of employee rates, roles, and hours conveniently, with up-to-date reliable payroll summaries, and detailed history. Print Mailing Labels : Print mailing labels easily. A custom widget supporting popular label sizes makes it quick to generate labels and print from Grist. Treasure Hunt : Plan a treasure hunt without losing track. Brainstorm clues, then assemble them into a consistent trail. Map : Show locations listed in a table on a map. Task Management for Teams : This glorified To-Do list \u2013 similar to the one we use internally at Grist labs \u2013 works well to manage a team\u2019s tasks. Lead List : A very simple list of leads, assigned to individuals to follow up, with control of assignments reserved for document owners. Understanding Link Keys : Learn how to create unique links that share limited views of your Grist document. Reference Columns Guide : Mastering Reference Columns in 3 Steps Summary Tables Guide : Master Summary Tables with 2 Concepts, using the example of a timesheet tracker, with detailed account tracking. Auto Time and User Stamps : Learn to create columns that stamp the time or a user\u2019s name to a record when it is created or updated. Have something to share? # Have your own template to share with the world? Email us at support@getgrist.com , and we may feature it in a future post.","title":"More examples"},{"location":"examples/#more-examples","text":"Here we will post useful examples of what you can do with Grist, sometimes with ready-to-use templates. Slicing and Dicing Credit Card Expenses : Grist offers a handy way to explore your credit card transactions quickly. American Express card members can use the ready-made template in the example. Book Lists with Library and Store Look-ups : Grist\u2019s link handling and formulas can help you with your book club, by adding automatic links to libraries, stores, review sites, and other references. The same ideas could work with Ikea furniture, food orders, whatever you like. Prepare Emails using Formulas : Turn cells into links that open an email program to compose a new message, and prefill its recipients, subject, and more. Preparing Invoices : Preview printable invoices side by side with your client data. Tracking Payroll : Keep track of employee rates, roles, and hours conveniently, with up-to-date reliable payroll summaries, and detailed history. Print Mailing Labels : Print mailing labels easily. A custom widget supporting popular label sizes makes it quick to generate labels and print from Grist. Treasure Hunt : Plan a treasure hunt without losing track. Brainstorm clues, then assemble them into a consistent trail. Map : Show locations listed in a table on a map. Task Management for Teams : This glorified To-Do list \u2013 similar to the one we use internally at Grist labs \u2013 works well to manage a team\u2019s tasks. Lead List : A very simple list of leads, assigned to individuals to follow up, with control of assignments reserved for document owners. Understanding Link Keys : Learn how to create unique links that share limited views of your Grist document. Reference Columns Guide : Mastering Reference Columns in 3 Steps Summary Tables Guide : Master Summary Tables with 2 Concepts, using the example of a timesheet tracker, with detailed account tracking. Auto Time and User Stamps : Learn to create columns that stamp the time or a user\u2019s name to a record when it is created or updated.","title":"More Examples"},{"location":"examples/#have-something-to-share","text":"Have your own template to share with the world? Email us at support@getgrist.com , and we may feature it in a future post.","title":"Have something to share?"},{"location":"exports/","text":"Exporting # Exporting a table # If you want to export a table to another spreadsheet or database, one option is to export that table in CSV format, a common interchange format for data. To do this, open your document to the desired table. Then click the sharing icon ( ) on the top right of the screen. It opens the menu with sharing and export options. Select \u201cExport CSV\u201d. Your browser will then download a CSV file containing a header row naming your columns, excluding any hidden columns, followed by all the rows of data in the table in text format. When on a page with multiple page widgets, \u201cExport CSV\u201d will export only the data in the currently-selected widget, to export all your data use \u201cExport XLSX\u201d option. Exporting a document # If you want to export all tables to Excel format, click the sharing icon ( ) on the top right of the screen and select \u201cExport XLSX\u201d. Your browser will then download an Excel file, where each table is a separate sheet containing all rows, without any filters applied. To use this option you need to have full read access for all tables in a document. Sending to Google Drive # If you want to export a document to Google Drive as a Google Sheet file, click the sharing icon ( ) on the top right of the screen and select \u201cSend to Google Drive\u201d. Grist will first ask you to log in to your Google Account (or use an account you already signed in) and then for permission to create a file in your Google Drive. Grist will be able to create new files and manage them but will not be able to access any other files in your drive. Once you accept the permission request, Grist will export your document to an Excel file and then save it in your Google Drive as a Google Sheet file. To use this option, you need to have full read access for all tables in a document. Backing up an entire document # Grist makes regular backups of documents automatically, as described in Automatic Backups . You can also make manual backups by saving copies of documents in your Grist account. In addition, Grist documents can be downloaded in their entirety as an SQLite database file with a .grist extension. SQLite is a popular database format. The downloaded file will contain all your tabular data, any attached files within those tables, metadata about your tables, pages, and widgets, and a history of recent modifications of the document. It will not contain information about who the document is shared with. To download a Grist document, click the sharing icon ( ) on the top right of the screen, and select \u201cDownload\u201d. Restoring from backup # A downloaded .grist file can be uploaded again to provide an exact copy of the original. To upload the file, open the team or personal site where you want to place it, and optionally select also a workspace. Then click on \u201cAdd New\u201d in the top left, and select \u201cImport document\u201d. You may also import CSV and Excel files as new Grist documents this way.","title":"Exports & backups"},{"location":"exports/#exporting","text":"","title":"Exporting"},{"location":"exports/#exporting-a-table","text":"If you want to export a table to another spreadsheet or database, one option is to export that table in CSV format, a common interchange format for data. To do this, open your document to the desired table. Then click the sharing icon ( ) on the top right of the screen. It opens the menu with sharing and export options. Select \u201cExport CSV\u201d. Your browser will then download a CSV file containing a header row naming your columns, excluding any hidden columns, followed by all the rows of data in the table in text format. When on a page with multiple page widgets, \u201cExport CSV\u201d will export only the data in the currently-selected widget, to export all your data use \u201cExport XLSX\u201d option.","title":"Exporting a table"},{"location":"exports/#exporting-a-document","text":"If you want to export all tables to Excel format, click the sharing icon ( ) on the top right of the screen and select \u201cExport XLSX\u201d. Your browser will then download an Excel file, where each table is a separate sheet containing all rows, without any filters applied. To use this option you need to have full read access for all tables in a document.","title":"Exporting a document"},{"location":"exports/#sending-to-google-drive","text":"If you want to export a document to Google Drive as a Google Sheet file, click the sharing icon ( ) on the top right of the screen and select \u201cSend to Google Drive\u201d. Grist will first ask you to log in to your Google Account (or use an account you already signed in) and then for permission to create a file in your Google Drive. Grist will be able to create new files and manage them but will not be able to access any other files in your drive. Once you accept the permission request, Grist will export your document to an Excel file and then save it in your Google Drive as a Google Sheet file. To use this option, you need to have full read access for all tables in a document.","title":"Sending to Google Drive"},{"location":"exports/#backing-up-an-entire-document","text":"Grist makes regular backups of documents automatically, as described in Automatic Backups . You can also make manual backups by saving copies of documents in your Grist account. In addition, Grist documents can be downloaded in their entirety as an SQLite database file with a .grist extension. SQLite is a popular database format. The downloaded file will contain all your tabular data, any attached files within those tables, metadata about your tables, pages, and widgets, and a history of recent modifications of the document. It will not contain information about who the document is shared with. To download a Grist document, click the sharing icon ( ) on the top right of the screen, and select \u201cDownload\u201d.","title":"Backing up an entire document"},{"location":"exports/#restoring-from-backup","text":"A downloaded .grist file can be uploaded again to provide an exact copy of the original. To upload the file, open the team or personal site where you want to place it, and optionally select also a workspace. Then click on \u201cAdd New\u201d in the top left, and select \u201cImport document\u201d. You may also import CSV and Excel files as new Grist documents this way.","title":"Restoring from backup"},{"location":"formulas/","text":"Formulas # Grist has a powerful data engine to calculate the cells of your tables using formulas. If you\u2019ve used spreadsheets before, or database expressions, you\u2019ll be on familiar territory - but there are some wrinkles you\u2019ll want to know about, so hang around. Let\u2019s start with a classic use of spreadsheets. Suppose you have a list of products you\u2019ve ordered, the quantity you ordered, and the unit price of each. You\u2019ve made a column to show the quantity times the unit price, but want the computer to do that part for you. Just select a cell in the column you want to fill, and hit = key to tell Grist you want to enter a formula, rather than a value. Did you notice, when you did that, the labels of the columns changed a little? \u201cProduct\u201d became \u201c$Product\u201d, and \u201cUnit Price\u201d became \u201c$Unit_Price\u201d. This is Grist telling you how to refer to those columns in your formula. Just type $Quantity * $Unit_Price . You\u2019ll find an auto-complete feature ready to help you. Or if you don\u2019t like typing, click on the Quantity column, type the multiplication symbol, and then click on the Unit Price column. Your formula should look like this: To control the column ID, like \u201c$Unit_Price\u201d, that\u2019s used in formulas, see Renaming columns . Press Enter , and your formula is applied to all cells in the column. If you\u2019ve worked with spreadsheets before, you may be surprised that you don\u2019t need to specify row numbers, like B1 * C1 . In Grist, a single formula applies to a whole column. You don\u2019t have to worry about filling it in for all rows, and can refer to values in the same row without fuss. Column behavior # When we provide a formula for a column we tell Grist to update its value on every change in a document. We can no longer type a value into the cell, because its value is determined purely by the formula. A formula column is one of three possible column behaviors, which you can control using the COLUMN BEHAVIOR section in the creator panel: Data column maintains data, which you can manually update or clear, or optionally calculate using trigger formulas . Formula column always reflects the result of formula calculation, and is kept up-to-date by Grist. Empty column is a state for a new column. Typing any value into it will turn it into a Data Column, while typing in a formula will turn it into a Formula Column Using the COLUMN BEHAVIOR section, you can manually change the column behavior. The most common options are available as green action buttons at the bottom, and other options are available under the behavior menu. Depending on the current column behavior, those are: Set formula action converts an empty column to a formula column. Set trigger formula or Convert to trigger formula action sets a trigger on a column (more on triggers in the next Trigger formulas section ). Make into data column action converts an empty column to a regular data column. Convert column to data converts a formula column to regular data column (you can read more about this feature in the Freeze a formula column section ). Clear and make into formula clears all the data in a column and converts it to a formula column. (We say \u201cclear\u201d as a reminder that existing data in the column will be lost. They\u2019ll be replaced by the calculation results from the formula.) Clear and reset clears all data and completely resets the column to its initial Empty Column state. Python # Grist formulas are written in Python, the most popular language for data science. The entirety of Python\u2019s standard library is available to you. For those with a spreadsheet background, we\u2019ve also added a suite of Excel-like functions, with all-uppercase names. Here\u2019s the full list of functions . Grist documents may use Python 2 or Python 3, see our Python guide for details. Formulas that operate over many rows # If you are a spreadsheet user, you may find yourself wanting to have some special rows at the end of your table that have formulas different to the rest. In Grist, we\u2019d like you to consider adding a widget to your page instead. For common use cases, Summary tables may be exactly what you need. Or if you want to set things up yourself, you can add an extra table widget like this (see Page widgets for details): This is just another table, giving us a place to put formulas outside of the structure of the Materials table. For example, if we wanted to count how many products there are in that table, we could use this formula: len(Materials.all) Every table in your document is available by its name in formulas, as a UserTable . This formula uses the all method to access the rows of the table, but doesn\u2019t do anything with them but count them. Here\u2019s a formula to compute the average price, using the Excel-like function AVERAGE : AVERAGE(Materials.all.Price) The all method returns a RecordSet , which supports iterating over individual columns this way. Equivalently, we could use a Python list comprehension : AVERAGE(material.Price for material in Materials.all) If you are not familiar with Python, it is worth following a tutorial. There are thousands online, including this official one . Python will be useful to you for all sorts of data work, not just Grist. List comprehension is useful once we\u2019re doing anything nuanced. For example, here\u2019s a formula to list the names of products with a quantity greater than 80: [m.Product for m in Materials.all if m.Quantity > 80] This is a list comprehension, but now with a conditional. The result is a list, which is rendered as text in a cell. Python can help in other ways in your search for rows. For example, here\u2019s a formula to find the name of the product with the highest quantity: max(Materials.all, key=lambda m: m.Quantity).Product Formulas are case-sensitive, with Excel-like functions being all-caps ( MAX ), and regular Python generally all lowercase ( max ). For exact matches, there is a shortcut to avoid iteration called lookupRecords , or lookupOne for single matches. Just pass the the values of columns you require to be matched. For example, here is a formula to look up the product name of a material with a quantity of 52: Materials.lookupOne(Quantity=52).Product For very large tables, it is wise to use lookups as much as you can, rather than iterating through rows. Returning to our example document, you can now see how we calculated the Total Spent , Average Quantity , and Most Ordered Product columns: Column Formula Total Spent SUM(Materials.all.Price) Average Quantity AVERAGE(Materials.all.Quantity) Most Ordered Product max(Materials.all, key=lambda m: m.Quantity).Product Separating out calculations like this from the body of your data can take some getting used to, but working this way can help keep your document more organized. And it brings other advantages. For example we could switch the formatting of the summary widget via the side panel: Varying formula by row # Having a formula apply to all rows is convenient and reduces the changes of mistakes. If you need to have a column change its behavior on different rows, it is possible using a conditional in the formula. For example, here is a replacement for the Materials.Price formula that ignores the price and shows zero for products whose name ends in \u201c(Sample)\u201d: if $Product.endswith(\"(Sample)\"): return 0 else: return $Quantity * $Unit_Price Code viewer # Once you have a lot of formulas, or if you have been invited to a document and want to get an overview of its formulas, there is a code viewer available with a pure Python summary of the document. Special values available in formulas # For those familiar with Python, here are the extra values available to you in Grist: rec is the current row. The $column syntax is shorthand for rec.column . The rec variable is of type Record . table is the current table, and is of type UserTable . Tables in your document are available by their name, and are also of type UserTable . Many extra spreadsheet functions are available, see the full function list . If your table or column has a space in its name, or other characters that are awkward in Python, those characters are replaced with an underscore. Auto-complete may help you if you\u2019re not sure. You can also control the \u201cids\u201d of columns and tables in the right side panel. Freeze a formula column # If you\u2019d like to save the output of your formula as plain values, you can simply change column behavior from Formula Column to Data Column . First open the column options in the side panel: Now click on the Formula Column and select Convert column to data option. Notice that there is no = sign in the column cells any more, showing that it is no longer a formula. The cells will no longer change if other cells they used to depend on change. The original formula is saved but stays inactive. It may come useful again if you wish to convert the column back to a formula column, or use it as a Trigger Formula . The side panel has lots of other handy settings, such as cell formatting (number of digits after decimal point, color, etc). The options apply just as much to formula columns as to regular columns. Lookups # Grist functions lookupOne and lookupRecords are useful for enumerating subsets of your data. For example, suppose we added a Category column to our Materials table, and wished to list all products belonging to a specific category. We can do this using TABLE.lookupRecords , where TABLE is the table of interest, and supplying it with the column values to match. For example, Materials.lookupRecords(Category='Ship') , as here: If you are following on, see Adding a field for details of how to add a new field to a card. If you care about the order of results, lookupRecords takes an optional sort_by parameter. For example, we could use this formula to sort by the product name itself: list(Materials.lookupRecords(Category='Ship', sort_by='Product').Product) If you want to sort by multiple columns, remember that you can create a hidden formula column that combines data in any way you like, and then sort by that. The order of records returned by lookupRecords may not match the order of rows you see in a table. To get that order, use sort_by='manualSort' . This is an internal column that is updated with the manually established sort order of rows. If you find yourself doing a lot of look-ups, please consider whether Summary tables and Summary formulas might be what you are looking for. Recursion # Lookups are handy for recursive formulas. Suppose we have a table counting how many events we have per day, and want to add a cumulative sum of those event counts. One way to do that is with a formula like this: yesterday = Events.lookupOne(date=$date - datetime.timedelta(days=1)) $events + (yesterday.cumulative or 0) For clarity, we\u2019ve split this formula into two lines. The first line makes a variable pointing to the row of the day before. The second line computes the value we want in the cell. Python note: the value of the last line is automatically returned (you could prefix it with return if you like). Notice the yesterday.cumulative or 0 . For the earliest row in the table, there will be no yesterday. In this case, lookupOne returns a special empty record, for which yesterday.cumulative will be None . If you\u2019d like to simplify this formula, or find yourself using the same lookup in multiple formulas, it would be worth making yesterday a reference column . Simply add a reference column, and give a formula for it that matches how we defined yesterday here. To actually enter this formula in a cell, you\u2019d use Shift + Enter to divide the lines. Trigger Formulas # Formula columns are great for calculated values \u2013 those determined by other data in the document. It may also be useful to store independent data in a column, but still use a formula to calculate it in some situations. This is exactly what Trigger Formulas offer. It is a very powerful feature that allows you to create a Timestamp or Authorship column, recalculate your data based on a set of conditions that you decide , clean data when a new value is entered, or provide sensible default value for a column. To create a Trigger Formula column, you first need to open the creator panel and click on the Set trigger formula action. If you want to convert an existing formula, use the Convert to trigger formula action available in the COLUMN BEHAVIOR section. To control when the formula is evaluated, use the two checkbox options below: Apply to new records triggers the formula only when a new record is created (a default cell value). Apply on record changes triggers the formula when a record is updated. Applying to new records is self-explanatory, the formula will be evaluated only once when you add a new record. It is a perfect solution to provide default values to the empty cells. Second option allows you to fine grain the conditions and specify which columns, when updated, will trigger the evaluation: You probably noticed the first option Current field . At first glance, you probably wonder: \u201cWhy would I want to trigger the column on its own change?\u201d. This option allows you to react to a value that is being entered into the column, just before it is saved! In the formula editor, you have access to two variables that are not available to regular formulas: value which is the value that a user wants to enter, user which represents a user object that is making the change (you will also see this in the Access rules section). This allows you to make your application even smarter, track when a record was updated , or see who made the last change to a row . Simple examples: Ensure that the value in a column is always written in capital letters: With the trigger formula of value.upper() , the value typed into this column will be converted to upper case automatically. Format a value that the user enters to sanitize the data before saving: With the formula like value if value.startswith(\"SK\") else \"SK\" + value , the value typed into this column will always be prefixed with \u201cSK\u201d. Overwrite a default value from a referenced table: You can use a formula like value or $Client.Phone , to provide a default value from a referenced table, but still allow the user to type a new one. In each of these examples, when the user tries to modify a cell, Grist (before updating the record) will evaluate the formula and store its result in the column instead of the value provided by the user. For a detailed, real-life example read our guide on how to create time and user stamps.","title":"Intro to formulas"},{"location":"formulas/#formulas","text":"Grist has a powerful data engine to calculate the cells of your tables using formulas. If you\u2019ve used spreadsheets before, or database expressions, you\u2019ll be on familiar territory - but there are some wrinkles you\u2019ll want to know about, so hang around. Let\u2019s start with a classic use of spreadsheets. Suppose you have a list of products you\u2019ve ordered, the quantity you ordered, and the unit price of each. You\u2019ve made a column to show the quantity times the unit price, but want the computer to do that part for you. Just select a cell in the column you want to fill, and hit = key to tell Grist you want to enter a formula, rather than a value. Did you notice, when you did that, the labels of the columns changed a little? \u201cProduct\u201d became \u201c$Product\u201d, and \u201cUnit Price\u201d became \u201c$Unit_Price\u201d. This is Grist telling you how to refer to those columns in your formula. Just type $Quantity * $Unit_Price . You\u2019ll find an auto-complete feature ready to help you. Or if you don\u2019t like typing, click on the Quantity column, type the multiplication symbol, and then click on the Unit Price column. Your formula should look like this: To control the column ID, like \u201c$Unit_Price\u201d, that\u2019s used in formulas, see Renaming columns . Press Enter , and your formula is applied to all cells in the column. If you\u2019ve worked with spreadsheets before, you may be surprised that you don\u2019t need to specify row numbers, like B1 * C1 . In Grist, a single formula applies to a whole column. You don\u2019t have to worry about filling it in for all rows, and can refer to values in the same row without fuss.","title":"Formulas"},{"location":"formulas/#column-behavior","text":"When we provide a formula for a column we tell Grist to update its value on every change in a document. We can no longer type a value into the cell, because its value is determined purely by the formula. A formula column is one of three possible column behaviors, which you can control using the COLUMN BEHAVIOR section in the creator panel: Data column maintains data, which you can manually update or clear, or optionally calculate using trigger formulas . Formula column always reflects the result of formula calculation, and is kept up-to-date by Grist. Empty column is a state for a new column. Typing any value into it will turn it into a Data Column, while typing in a formula will turn it into a Formula Column Using the COLUMN BEHAVIOR section, you can manually change the column behavior. The most common options are available as green action buttons at the bottom, and other options are available under the behavior menu. Depending on the current column behavior, those are: Set formula action converts an empty column to a formula column. Set trigger formula or Convert to trigger formula action sets a trigger on a column (more on triggers in the next Trigger formulas section ). Make into data column action converts an empty column to a regular data column. Convert column to data converts a formula column to regular data column (you can read more about this feature in the Freeze a formula column section ). Clear and make into formula clears all the data in a column and converts it to a formula column. (We say \u201cclear\u201d as a reminder that existing data in the column will be lost. They\u2019ll be replaced by the calculation results from the formula.) Clear and reset clears all data and completely resets the column to its initial Empty Column state.","title":"Column behavior"},{"location":"formulas/#python","text":"Grist formulas are written in Python, the most popular language for data science. The entirety of Python\u2019s standard library is available to you. For those with a spreadsheet background, we\u2019ve also added a suite of Excel-like functions, with all-uppercase names. Here\u2019s the full list of functions . Grist documents may use Python 2 or Python 3, see our Python guide for details.","title":"Python"},{"location":"formulas/#formulas-that-operate-over-many-rows","text":"If you are a spreadsheet user, you may find yourself wanting to have some special rows at the end of your table that have formulas different to the rest. In Grist, we\u2019d like you to consider adding a widget to your page instead. For common use cases, Summary tables may be exactly what you need. Or if you want to set things up yourself, you can add an extra table widget like this (see Page widgets for details): This is just another table, giving us a place to put formulas outside of the structure of the Materials table. For example, if we wanted to count how many products there are in that table, we could use this formula: len(Materials.all) Every table in your document is available by its name in formulas, as a UserTable . This formula uses the all method to access the rows of the table, but doesn\u2019t do anything with them but count them. Here\u2019s a formula to compute the average price, using the Excel-like function AVERAGE : AVERAGE(Materials.all.Price) The all method returns a RecordSet , which supports iterating over individual columns this way. Equivalently, we could use a Python list comprehension : AVERAGE(material.Price for material in Materials.all) If you are not familiar with Python, it is worth following a tutorial. There are thousands online, including this official one . Python will be useful to you for all sorts of data work, not just Grist. List comprehension is useful once we\u2019re doing anything nuanced. For example, here\u2019s a formula to list the names of products with a quantity greater than 80: [m.Product for m in Materials.all if m.Quantity > 80] This is a list comprehension, but now with a conditional. The result is a list, which is rendered as text in a cell. Python can help in other ways in your search for rows. For example, here\u2019s a formula to find the name of the product with the highest quantity: max(Materials.all, key=lambda m: m.Quantity).Product Formulas are case-sensitive, with Excel-like functions being all-caps ( MAX ), and regular Python generally all lowercase ( max ). For exact matches, there is a shortcut to avoid iteration called lookupRecords , or lookupOne for single matches. Just pass the the values of columns you require to be matched. For example, here is a formula to look up the product name of a material with a quantity of 52: Materials.lookupOne(Quantity=52).Product For very large tables, it is wise to use lookups as much as you can, rather than iterating through rows. Returning to our example document, you can now see how we calculated the Total Spent , Average Quantity , and Most Ordered Product columns: Column Formula Total Spent SUM(Materials.all.Price) Average Quantity AVERAGE(Materials.all.Quantity) Most Ordered Product max(Materials.all, key=lambda m: m.Quantity).Product Separating out calculations like this from the body of your data can take some getting used to, but working this way can help keep your document more organized. And it brings other advantages. For example we could switch the formatting of the summary widget via the side panel:","title":"Formulas that operate over many rows"},{"location":"formulas/#varying-formula-by-row","text":"Having a formula apply to all rows is convenient and reduces the changes of mistakes. If you need to have a column change its behavior on different rows, it is possible using a conditional in the formula. For example, here is a replacement for the Materials.Price formula that ignores the price and shows zero for products whose name ends in \u201c(Sample)\u201d: if $Product.endswith(\"(Sample)\"): return 0 else: return $Quantity * $Unit_Price","title":"Varying formula by row"},{"location":"formulas/#code-viewer","text":"Once you have a lot of formulas, or if you have been invited to a document and want to get an overview of its formulas, there is a code viewer available with a pure Python summary of the document.","title":"Code viewer"},{"location":"formulas/#special-values-available-in-formulas","text":"For those familiar with Python, here are the extra values available to you in Grist: rec is the current row. The $column syntax is shorthand for rec.column . The rec variable is of type Record . table is the current table, and is of type UserTable . Tables in your document are available by their name, and are also of type UserTable . Many extra spreadsheet functions are available, see the full function list . If your table or column has a space in its name, or other characters that are awkward in Python, those characters are replaced with an underscore. Auto-complete may help you if you\u2019re not sure. You can also control the \u201cids\u201d of columns and tables in the right side panel.","title":"Special values available in formulas"},{"location":"formulas/#freeze-a-formula-column","text":"If you\u2019d like to save the output of your formula as plain values, you can simply change column behavior from Formula Column to Data Column . First open the column options in the side panel: Now click on the Formula Column and select Convert column to data option. Notice that there is no = sign in the column cells any more, showing that it is no longer a formula. The cells will no longer change if other cells they used to depend on change. The original formula is saved but stays inactive. It may come useful again if you wish to convert the column back to a formula column, or use it as a Trigger Formula . The side panel has lots of other handy settings, such as cell formatting (number of digits after decimal point, color, etc). The options apply just as much to formula columns as to regular columns.","title":"Freeze a formula column"},{"location":"formulas/#lookups","text":"Grist functions lookupOne and lookupRecords are useful for enumerating subsets of your data. For example, suppose we added a Category column to our Materials table, and wished to list all products belonging to a specific category. We can do this using TABLE.lookupRecords , where TABLE is the table of interest, and supplying it with the column values to match. For example, Materials.lookupRecords(Category='Ship') , as here: If you are following on, see Adding a field for details of how to add a new field to a card. If you care about the order of results, lookupRecords takes an optional sort_by parameter. For example, we could use this formula to sort by the product name itself: list(Materials.lookupRecords(Category='Ship', sort_by='Product').Product) If you want to sort by multiple columns, remember that you can create a hidden formula column that combines data in any way you like, and then sort by that. The order of records returned by lookupRecords may not match the order of rows you see in a table. To get that order, use sort_by='manualSort' . This is an internal column that is updated with the manually established sort order of rows. If you find yourself doing a lot of look-ups, please consider whether Summary tables and Summary formulas might be what you are looking for.","title":"Lookups"},{"location":"formulas/#recursion","text":"Lookups are handy for recursive formulas. Suppose we have a table counting how many events we have per day, and want to add a cumulative sum of those event counts. One way to do that is with a formula like this: yesterday = Events.lookupOne(date=$date - datetime.timedelta(days=1)) $events + (yesterday.cumulative or 0) For clarity, we\u2019ve split this formula into two lines. The first line makes a variable pointing to the row of the day before. The second line computes the value we want in the cell. Python note: the value of the last line is automatically returned (you could prefix it with return if you like). Notice the yesterday.cumulative or 0 . For the earliest row in the table, there will be no yesterday. In this case, lookupOne returns a special empty record, for which yesterday.cumulative will be None . If you\u2019d like to simplify this formula, or find yourself using the same lookup in multiple formulas, it would be worth making yesterday a reference column . Simply add a reference column, and give a formula for it that matches how we defined yesterday here. To actually enter this formula in a cell, you\u2019d use Shift + Enter to divide the lines.","title":"Recursion"},{"location":"formulas/#trigger-formulas","text":"Formula columns are great for calculated values \u2013 those determined by other data in the document. It may also be useful to store independent data in a column, but still use a formula to calculate it in some situations. This is exactly what Trigger Formulas offer. It is a very powerful feature that allows you to create a Timestamp or Authorship column, recalculate your data based on a set of conditions that you decide , clean data when a new value is entered, or provide sensible default value for a column. To create a Trigger Formula column, you first need to open the creator panel and click on the Set trigger formula action. If you want to convert an existing formula, use the Convert to trigger formula action available in the COLUMN BEHAVIOR section. To control when the formula is evaluated, use the two checkbox options below: Apply to new records triggers the formula only when a new record is created (a default cell value). Apply on record changes triggers the formula when a record is updated. Applying to new records is self-explanatory, the formula will be evaluated only once when you add a new record. It is a perfect solution to provide default values to the empty cells. Second option allows you to fine grain the conditions and specify which columns, when updated, will trigger the evaluation: You probably noticed the first option Current field . At first glance, you probably wonder: \u201cWhy would I want to trigger the column on its own change?\u201d. This option allows you to react to a value that is being entered into the column, just before it is saved! In the formula editor, you have access to two variables that are not available to regular formulas: value which is the value that a user wants to enter, user which represents a user object that is making the change (you will also see this in the Access rules section). This allows you to make your application even smarter, track when a record was updated , or see who made the last change to a row . Simple examples: Ensure that the value in a column is always written in capital letters: With the trigger formula of value.upper() , the value typed into this column will be converted to upper case automatically. Format a value that the user enters to sanitize the data before saving: With the formula like value if value.startswith(\"SK\") else \"SK\" + value , the value typed into this column will always be prefixed with \u201cSK\u201d. Overwrite a default value from a referenced table: You can use a formula like value or $Client.Phone , to provide a default value from a referenced table, but still allow the user to type a new one. In each of these examples, when the user tries to modify a cell, Grist (before updating the record) will evaluate the formula and store its result in the column instead of the value provided by the user. For a detailed, real-life example read our guide on how to create time and user stamps.","title":"Trigger Formulas"},{"location":"functions/","text":"Function Reference # Grist formulas support most Excel functions, as well as the Python programming language. The table below lists Grist-specific functions, and the suite of the included Excel-like functions. In addition, the entire Python standard library is available. For more about using formulas in Grist, see Intro to Formulas . Grist uses Python (version 3.9) for formulas. You can use nearly all features of Python (see Python documentation ). Here are some helpful notes: Python is case-sensitive, including for Grist table and column names. Excel-like functions are always in uppercase. E.g. if is a Python keyword, while IF is an Excel-like function. Compare for equality using == , in place of Excel\u2019s single = (which in Python means assignment). \u201cNot equal\u201d uses != in place of Excel\u2019s <> . You may write multi-line Python in formulas (use Shift + Enter to add lines), including statements, variables, imports, etc. Grist code runs in a secure sandbox, with no access to anything outside your document. Category Functions Grist Record or rec , $Field or rec.Field , $group or rec.group , RecordSet , UserTable , all , lookupOne , lookupRecords Date DATE , DATEADD , DATEDIF , DATEVALUE , DATE_TO_XL , DAY , DAYS , DTIME , EDATE , EOMONTH , HOUR , ISOWEEKNUM , MINUTE , MONTH , NOW , SECOND , TODAY , WEEKDAY , WEEKNUM , XL_TO_DATE , YEAR , YEARFRAC Info CELL , CURRENT_CONVERSION , ISBLANK , ISEMAIL , ISERR , ISERROR , ISLOGICAL , ISNA , ISNONTEXT , ISNUMBER , ISREF , ISREFLIST , ISTEXT , ISURL , N , NA , RECORD , TYPE Logical AND , FALSE , IF , IFERROR , NOT , OR , TRUE Lookup lookupOne , lookupRecords , ADDRESS , CHOOSE , COLUMN , COLUMNS , CONTAINS , GETPIVOTDATA , HLOOKUP , HYPERLINK , INDEX , INDIRECT , LOOKUP , MATCH , OFFSET , ROW , ROWS , SELF_HYPERLINK , VLOOKUP Math ABS , ACOS , ACOSH , ARABIC , ASIN , ASINH , ATAN , ATAN2 , ATANH , CEILING , COMBIN , COS , COSH , DEGREES , EVEN , EXP , FACT , FACTDOUBLE , FLOOR , GCD , INT , LCM , LN , LOG , LOG10 , MOD , MROUND , MULTINOMIAL , ODD , PI , POWER , PRODUCT , QUOTIENT , RADIANS , RAND , RANDBETWEEN , ROMAN , ROUND , ROUNDDOWN , ROUNDUP , SERIESSUM , SIGN , SIN , SINH , SQRT , SQRTPI , SUBTOTAL , SUM , SUMIF , SUMIFS , SUMPRODUCT , SUMSQ , TAN , TANH , TRUNC , UUID Schedule SCHEDULE Stats AVEDEV , AVERAGE , AVERAGEA , AVERAGEIF , AVERAGEIFS , AVERAGE_WEIGHTED , BINOMDIST , CONFIDENCE , CORREL , COUNT , COUNTA , COVAR , CRITBINOM , DEVSQ , EXPONDIST , FDIST , FISHER , FISHERINV , FORECAST , F_DIST , F_DIST_RT , GEOMEAN , HARMEAN , HYPGEOMDIST , INTERCEPT , KURT , LARGE , LOGINV , LOGNORMDIST , MAX , MAXA , MEDIAN , MIN , MINA , MODE , NEGBINOMDIST , NORMDIST , NORMINV , NORMSDIST , NORMSINV , PEARSON , PERCENTILE , PERCENTRANK , PERCENTRANK_EXC , PERCENTRANK_INC , PERMUT , POISSON , PROB , QUARTILE , RANK , RANK_AVG , RANK_EQ , RSQ , SKEW , SLOPE , SMALL , STANDARDIZE , STDEV , STDEVA , STDEVP , STDEVPA , STEYX , TDIST , TINV , TRIMMEAN , TTEST , T_INV , T_INV_2T , VAR , VARA , VARP , VARPA , WEIBULL , ZTEST Text CHAR , CLEAN , CODE , CONCAT , CONCATENATE , DOLLAR , EXACT , FIND , FIXED , LEFT , LEN , LOWER , MID , PROPER , REGEXEXTRACT , REGEXMATCH , REGEXREPLACE , REPLACE , REPT , RIGHT , SEARCH , SUBSTITUTE , T , TEXT , TRIM , UPPER , VALUE Grist # Record # class Record # A Record represents a record of data. It is the primary means of accessing values in formulas. A Record for a particular table has a property for each data and formula column in the table. In a formula, $field is translated to rec.field , where rec is the Record for which the formula is being evaluated. For example: def Full_Name(rec, table): return rec.First_Name + ' ' + rec.LastName def Name_Length(rec, table): return len(rec.Full_Name) $Field # $ Field or rec .Field # Access the field named \u201cField\u201d of the current record. E.g. $First_Name or rec.First_Name . $group # $group # In a summary table , $group is a special field containing the list of Records that are summarized by the current summary line. E.g. the formula len($group) counts the number of those records being summarized in each row. See RecordSet for useful properties offered by the returned object. Examples: sum($group.Amount) # Sum of the Amount field in the matching records sum(r.Amount for r in $group) # Same as sum($group.Amount) sum(r.Amount for r in $group if r > 0) # Sum of only the positive amounts sum(r.Shares * r.Price for r in $group) # Sum of shares * price products RecordSet # class RecordSet # A RecordSet represents a collection of records, as returned by Table.lookupRecords() or $group property in summary views. A RecordSet allows iterating through the records: sum(r.Amount for r in Students.lookupRecords(First_Name=\"John\", Last_Name=\"Doe\")) min(r.DueDate for r in Tasks.lookupRecords(Owner=\"Bob\")) RecordSets also provide a convenient way to access the list of values for a particular field for all the records, as record_set.Field . For example, the examples above are equivalent to: sum(Students.lookupRecords(First_Name=\"John\", Last_Name=\"Doe\").Amount) min(Tasks.lookupRecords(Owner=\"Bob\").DueDate) You can get the number of records in a RecordSet using len , e.g. len($group) . UserTable # class UserTable # Each data table in the document is represented in the code by an instance of UserTable class. These names are always capitalized. A UserTable provides access to all the records in the table, as well as methods to look up particular records. Every table in the document is available to all formulas. all # UserTable. all # The list of all the records in this table. For example, this evaluates to the number of records in the table Students . len(Students.all) This evaluates to the sum of the Population field for every record in the table Countries . sum(r.Population for r in Countries.all) lookupOne # UserTable. lookupOne (Field_In_Lookup_Table=value, \u2026) # Returns a Record matching the given field=value arguments. The value may be any expression, most commonly a field in the current row (e.g. $SomeField ) or a constant (e.g. a quoted string like \"Some Value\" ). If multiple records match, returns one of them. If none match, returns the special empty record. For example: People.lookupOne(First_Name=\"Lewis\", Last_Name=\"Carroll\") People.lookupOne(Email=$Work_Email) lookupRecords # UserTable. lookupRecords (Field_In_Lookup_Table=value, \u2026) # Returns a RecordSet matching the given field=value arguments. The value may be any expression, most commonly a field in the current row (e.g. $SomeField ) or a constant (e.g. a quoted string like \"Some Value\" ) (examples below). If sort_by=field is given, sort the results by that field. For example: People.lookupRecords(Email=$Work_Email) People.lookupRecords(First_Name=\"George\", Last_Name=\"Washington\") People.lookupRecords(Last_Name=\"Johnson\", sort_by=\"First_Name\") See RecordSet for useful properties offered by the returned object. See CONTAINS for an example utilizing UserTable.lookupRecords to find records where a field of a list type (such as Choice List or Reference List ) contains the given value. Date # DATE # DATE (year, month, day) # Returns the datetime.datetime object that represents a particular date. The DATE function is most useful in formulas where year, month, and day are formulas, not constants. If year is between 0 and 1899 (inclusive), adds 1900 to calculate the year. >>> DATE(108, 1, 2) datetime.date(2008, 1, 2) >>> DATE(2008, 1, 2) datetime.date(2008, 1, 2) If month is greater than 12, rolls into the following year. >>> DATE(2008, 14, 2) datetime.date(2009, 2, 2) If month is less than 1, subtracts that many months plus 1, from the first month in the year. >>> DATE(2008, -3, 2) datetime.date(2007, 9, 2) If day is greater than the number of days in the given month, rolls into the following months. >>> DATE(2008, 1, 35) datetime.date(2008, 2, 4) If day is less than 1, subtracts that many days plus 1, from the first day of the given month. >>> DATE(2008, 1, -15) datetime.date(2007, 12, 16) DATEADD # DATEADD (start_date, days=0, months=0, years=0, weeks=0) # Returns the date a given number of days, months, years, or weeks away from start_date . You may specify arguments in any order if you specify argument names. Use negative values to subtract. For example, DATEADD(date, 1) is the same as DATEADD(date, days=1) , ands adds one day to date . DATEADD(date, years=1, days=-1) adds one year minus one day. >>> DATEADD(DATE(2011, 1, 15), 1) datetime.date(2011, 1, 16) >>> DATEADD(DATE(2011, 1, 15), months=1, days=-1) datetime.date(2011, 2, 14) >>> DATEADD(DATE(2011, 1, 15), years=-2, months=1, days=3, weeks=2) datetime.date(2009, 3, 4) >>> DATEADD(DATE(1975, 4, 30), years=50, weeks=-5) datetime.date(2025, 3, 26) DATEDIF # DATEDIF (start_date, end_date, unit) # Calculates the number of days, months, or years between two dates. Unit indicates the type of information that you want returned: \u201cY\u201d: The number of complete years in the period. \u201cM\u201d: The number of complete months in the period. \u201cD\u201d: The number of days in the period. \u201cMD\u201d: The difference between the days in start_date and end_date. The months and years of the dates are ignored. \u201cYM\u201d: The difference between the months in start_date and end_date. The days and years of the dates are ignored. \u201cYD\u201d: The difference between the days of start_date and end_date. The years of the dates are ignored. Two complete years in the period (2) >>> DATEDIF(DATE(2001, 1, 1), DATE(2003, 1, 1), \"Y\") 2 440 days between June 1, 2001, and August 15, 2002 (440) >>> DATEDIF(DATE(2001, 6, 1), DATE(2002, 8, 15), \"D\") 440 75 days between June 1 and August 15, ignoring the years of the dates (75) >>> DATEDIF(DATE(2001, 6, 1), DATE(2012, 8, 15), \"YD\") 75 The difference between 1 and 15, ignoring the months and the years of the dates (14) >>> DATEDIF(DATE(2001, 6, 1), DATE(2002, 8, 15), \"MD\") 14 DATEVALUE # DATEVALUE (date_string, tz=None) # Converts a date that is stored as text to a datetime object. >>> DATEVALUE(\"1/1/2008\") datetime.datetime(2008, 1, 1, 0, 0, tzinfo=moment.tzinfo('America/New_York')) >>> DATEVALUE(\"30-Jan-2008\") datetime.datetime(2008, 1, 30, 0, 0, tzinfo=moment.tzinfo('America/New_York')) >>> DATEVALUE(\"2008-12-11\") datetime.datetime(2008, 12, 11, 0, 0, tzinfo=moment.tzinfo('America/New_York')) >>> DATEVALUE(\"5-JUL\").replace(year=2000) datetime.datetime(2000, 7, 5, 0, 0, tzinfo=moment.tzinfo('America/New_York')) In case of ambiguity, prefer M/D/Y format. >>> DATEVALUE(\"1/2/3\") datetime.datetime(2003, 1, 2, 0, 0, tzinfo=moment.tzinfo('America/New_York')) DATE_TO_XL # DATE_TO_XL (date_value) # Converts a Python date or datetime object to the serial number as used by Excel, with December 30, 1899 as serial number 1. See XL_TO_DATE for more explanation. >>> DATE_TO_XL(datetime.date(2008, 1, 1)) 39448.0 >>> DATE_TO_XL(datetime.date(2012, 3, 14)) 40982.0 >>> DATE_TO_XL(datetime.datetime(2012, 3, 14, 1, 30)) 40982.0625 DAY # DAY (date) # Returns the day of a date, as an integer ranging from 1 to 31. Same as date.day . >>> DAY(DATE(2011, 4, 15)) 15 >>> DAY(\"5/31/2012\") 31 >>> DAY(datetime.datetime(1900, 1, 1)) 1 DAYS # DAYS (end_date, start_date) # Returns the number of days between two dates. Same as (end_date - start_date).days . >>> DAYS(\"3/15/11\",\"2/1/11\") 42 >>> DAYS(DATE(2011, 12, 31), DATE(2011, 1, 1)) 364 >>> DAYS(\"2/1/11\", \"3/15/11\") -42 DTIME # DTIME (value, tz=None) # Returns the value converted to a python datetime object. The value may be a string , date (interpreted as midnight on that day), time (interpreted as a time-of-day today), or an existing datetime . The returned datetime will have its timezone set to the tz argument, or the document\u2019s default timezone when tz is omitted or None. If the input is itself a datetime with the timezone set, it is returned unchanged (no changes to its timezone). >>> DTIME(datetime.date(2017, 1, 1)) datetime.datetime(2017, 1, 1, 0, 0, tzinfo=moment.tzinfo('America/New_York')) >>> DTIME(datetime.date(2017, 1, 1), 'Europe/Paris') datetime.datetime(2017, 1, 1, 0, 0, tzinfo=moment.tzinfo('Europe/Paris')) >>> DTIME(datetime.datetime(2017, 1, 1)) datetime.datetime(2017, 1, 1, 0, 0, tzinfo=moment.tzinfo('America/New_York')) >>> DTIME(datetime.datetime(2017, 1, 1, tzinfo=moment.tzinfo('UTC'))) datetime.datetime(2017, 1, 1, 0, 0, tzinfo=moment.tzinfo('UTC')) >>> DTIME(datetime.datetime(2017, 1, 1, tzinfo=moment.tzinfo('UTC')), 'Europe/Paris') datetime.datetime(2017, 1, 1, 0, 0, tzinfo=moment.tzinfo('UTC')) >>> DTIME(\"1/1/2008\") datetime.datetime(2008, 1, 1, 0, 0, tzinfo=moment.tzinfo('America/New_York')) EDATE # EDATE (start_date, months) # Returns the date that is the given number of months before or after start_date . Use EDATE to calculate maturity dates or due dates that fall on the same day of the month as the date of issue. >>> EDATE(DATE(2011, 1, 15), 1) datetime.date(2011, 2, 15) >>> EDATE(DATE(2011, 1, 15), -1) datetime.date(2010, 12, 15) >>> EDATE(DATE(2011, 1, 15), 2) datetime.date(2011, 3, 15) >>> EDATE(DATE(2012, 3, 1), 10) datetime.date(2013, 1, 1) >>> EDATE(DATE(2012, 5, 1), -2) datetime.date(2012, 3, 1) EOMONTH # EOMONTH (start_date, months) # Returns the date for the last day of the month that is the indicated number of months before or after start_date. Use EOMONTH to calculate maturity dates or due dates that fall on the last day of the month. >>> EOMONTH(DATE(2011, 1, 1), 1) datetime.date(2011, 2, 28) >>> EOMONTH(DATE(2011, 1, 15), -3) datetime.date(2010, 10, 31) >>> EOMONTH(DATE(2012, 3, 1), 10) datetime.date(2013, 1, 31) >>> EOMONTH(DATE(2012, 5, 1), -2) datetime.date(2012, 3, 31) HOUR # HOUR (time) # Same as time.hour . >>> HOUR(XL_TO_DATE(0.75)) 18 >>> HOUR(\"7/18/2011 7:45\") 7 >>> HOUR(\"4/21/2012\") 0 ISOWEEKNUM # ISOWEEKNUM (date) # Returns the ISO week number of the year for a given date. >>> ISOWEEKNUM(\"3/9/2012\") 10 >>> [ISOWEEKNUM(DATE(2000 + y, 1, 1)) for y in [0,1,2,3,4,5,6,7,8]] [52, 1, 1, 1, 1, 53, 52, 1, 1] MINUTE # MINUTE (time) # Returns the minutes of datetime , as an integer from 0 to 59. Same as time.minute . >>> MINUTE(XL_TO_DATE(0.75)) 0 >>> MINUTE(\"7/18/2011 7:45\") 45 >>> MINUTE(\"12:59:00 PM\") 59 >>> MINUTE(datetime.time(12, 58, 59)) 58 MONTH # MONTH (date) # Returns the month of a date represented, as an integer from from 1 (January) to 12 (December). Same as date.month . >>> MONTH(DATE(2011, 4, 15)) 4 >>> MONTH(\"5/31/2012\") 5 >>> MONTH(datetime.datetime(1900, 1, 1)) 1 NOW # NOW (tz=None) # Returns the datetime object for the current time. SECOND # SECOND (time) # Returns the seconds of datetime , as an integer from 0 to 59. Same as time.second . >>> SECOND(XL_TO_DATE(0.75)) 0 >>> SECOND(\"7/18/2011 7:45:13\") 13 >>> SECOND(datetime.time(12, 58, 59)) 59 TODAY # TODAY (tz=None) # Returns the date object for the current date. WEEKDAY # WEEKDAY (date, return_type=1) # Returns the day of the week corresponding to a date. The day is given as an integer, ranging from 1 (Sunday) to 7 (Saturday), by default. Return_type determines the type of the returned value. 1 (default) - Returns 1 (Sunday) through 7 (Saturday). 2 - Returns 1 (Monday) through 7 (Sunday). 3 - Returns 0 (Monday) through 6 (Sunday). 11 - Returns 1 (Monday) through 7 (Sunday). 12 - Returns 1 (Tuesday) through 7 (Monday). 13 - Returns 1 (Wednesday) through 7 (Tuesday). 14 - Returns 1 (Thursday) through 7 (Wednesday). 15 - Returns 1 (Friday) through 7 (Thursday). 16 - Returns 1 (Saturday) through 7 (Friday). 17 - Returns 1 (Sunday) through 7 (Saturday). >>> WEEKDAY(DATE(2008, 2, 14)) 5 >>> WEEKDAY(DATE(2012, 3, 1)) 5 >>> WEEKDAY(DATE(2012, 3, 1), 1) 5 >>> WEEKDAY(DATE(2012, 3, 1), 2) 4 >>> WEEKDAY(\"3/1/2012\", 3) 3 WEEKNUM # WEEKNUM (date, return_type=1) # Returns the week number of a specific date. For example, the week containing January 1 is the first week of the year, and is numbered week 1. Return_type determines which week is considered the first week of the year. 1 (default) - Week 1 is the first week starting Sunday that contains January 1. 2 - Week 1 is the first week starting Monday that contains January 1. 11 - Week 1 is the first week starting Monday that contains January 1. 12 - Week 1 is the first week starting Tuesday that contains January 1. 13 - Week 1 is the first week starting Wednesday that contains January 1. 14 - Week 1 is the first week starting Thursday that contains January 1. 15 - Week 1 is the first week starting Friday that contains January 1. 16 - Week 1 is the first week starting Saturday that contains January 1. 17 - Week 1 is the first week starting Sunday that contains January 1. 21 - ISO 8601 Approach: Week 1 is the first week starting Monday that contains January 4. Equivalently, it is the week that contains the first Thursday of the year. >>> WEEKNUM(DATE(2012, 3, 9)) 10 >>> WEEKNUM(DATE(2012, 3, 9), 2) 11 >>> WEEKNUM('1/1/1900') 1 >>> WEEKNUM('2/1/1900') 5 XL_TO_DATE # XL_TO_DATE (value, tz=None) # Converts a provided Excel serial number representing a date into a datetime object. Value is interpreted as the number of days since December 30, 1899. (This corresponds to Google Sheets interpretation. Excel starts with Dec. 31, 1899 but wrongly considers 1900 to be a leap year. Excel for Mac should be configured to use 1900 date system, i.e. uncheck \u201cUse the 1904 date system\u201d option.) The returned datetime will have its timezone set to the tz argument, or the document\u2019s default timezone when tz is omitted or None. >>> XL_TO_DATE(41100.1875) datetime.datetime(2012, 7, 10, 4, 30, tzinfo=moment.tzinfo('America/New_York')) >>> XL_TO_DATE(39448) datetime.datetime(2008, 1, 1, 0, 0, tzinfo=moment.tzinfo('America/New_York')) >>> XL_TO_DATE(40982.0625) datetime.datetime(2012, 3, 14, 1, 30, tzinfo=moment.tzinfo('America/New_York')) YEAR # YEAR (date) # Returns the year corresponding to a date as an integer. Same as date.year . >>> YEAR(DATE(2011, 4, 15)) 2011 >>> YEAR(\"5/31/2030\") 2030 >>> YEAR(datetime.datetime(1900, 1, 1)) 1900 YEARFRAC # YEARFRAC (start_date, end_date, basis=0) # Calculates the fraction of the year represented by the number of whole days between two dates. Basis is the type of day count basis to use. 0 (default) - US (NASD) 30/360 1 - Actual/actual 2 - Actual/360 3 - Actual/365 4 - European 30/360 -1 - Actual/actual (Google Sheets variation) This function is useful for financial calculations. For compatibility with Excel, it defaults to using the NASD standard calendar. For use in non-financial settings, option -1 is likely the best choice. See https://en.wikipedia.org/wiki/360-day_calendar for explanation of the US 30/360 and European 30/360 methods. See http://www.dwheeler.com/yearfrac/ for analysis of Excel\u2019s particular implementation. Basis -1 is similar to 1 , but differs from Excel when dates span both leap and non-leap years. It matches the calculation in Google Sheets, counting the days in each year as a fraction of that year\u2019s length. Fraction of the year between 1/1/2012 and 7/30/12, omitting the Basis argument. >>> \"%.8f\" % YEARFRAC(DATE(2012, 1, 1), DATE(2012, 7, 30)) '0.58055556' Fraction between same dates, using the Actual/Actual basis argument. Because 2012 is a Leap year, it has a 366 day basis. >>> \"%.8f\" % YEARFRAC(DATE(2012, 1, 1), DATE(2012, 7, 30), 1) '0.57650273' Fraction between same dates, using the Actual/365 basis argument. Uses a 365 day basis. >>> \"%.8f\" % YEARFRAC(DATE(2012, 1, 1), DATE(2012, 7, 30), 3) '0.57808219' Info # CELL # CELL (info_type, reference) # Returns the requested information about the specified cell. This is not implemented in Grist Note This function is not currently implemented in Grist. CURRENT_CONVERSION # CURRENT_CONVERSION (rec) # Internal function used by Grist during column type conversions. Not available for use in formulas. ISBLANK # ISBLANK (value) # Returns whether a value refers to an empty cell. It isn\u2019t implemented in Grist. To check for an empty string, use value == \"\" . Note This function is not currently implemented in Grist. ISEMAIL # ISEMAIL (value) # Returns whether a value is a valid email address. Note that checking email validity is not an exact science. The technical standard considers many email addresses valid that are not used in practice, and would not be considered valid by most users. Instead, we follow Google Sheets implementation, with some differences, noted below. >>> ISEMAIL(\"Abc.123@example.com\") True >>> ISEMAIL(\"Bob_O-Reilly+tag@example.com\") True >>> ISEMAIL(\"John Doe\") False >>> ISEMAIL(\"john@aol...com\") False ISERR # ISERR (value) # Checks whether a value is an error. In other words, it returns true if using value directly would raise an exception. NOTE: Grist implements this by automatically wrapping the argument to use lazy evaluation. A more Pythonic approach to checking for errors is: try: ... value ... except Exception, err: ... do something about the error ... For example: >>> ISERR(\"Hello\") False ISERROR # ISERROR (value) # Checks whether a value is an error or an invalid value. It is similar to ISERR , but also returns true for an invalid value such as NaN or a text value in a Numeric column. NOTE: Grist implements this by automatically wrapping the argument to use lazy evaluation. >>> ISERROR(\"Hello\") False >>> ISERROR(AltText(\"fail\")) True >>> ISERROR(float('nan')) True ISLOGICAL # ISLOGICAL (value) # Checks whether a value is True or False . >>> ISLOGICAL(True) True >>> ISLOGICAL(False) True >>> ISLOGICAL(0) False >>> ISLOGICAL(None) False >>> ISLOGICAL(\"Test\") False ISNA # ISNA (value) # Checks whether a value is the error #N/A . >>> ISNA(float('nan')) True >>> ISNA(0.0) False >>> ISNA('text') False >>> ISNA(float('-inf')) False ISNONTEXT # ISNONTEXT (value) # Checks whether a value is non-textual. >>> ISNONTEXT(\"asdf\") False >>> ISNONTEXT(\"\") False >>> ISNONTEXT(AltText(\"text\")) False >>> ISNONTEXT(17.0) True >>> ISNONTEXT(None) True >>> ISNONTEXT(datetime.date(2011, 1, 1)) True ISNUMBER # ISNUMBER (value) # Checks whether a value is a number. >>> ISNUMBER(17) True >>> ISNUMBER(-123.123423) True >>> ISNUMBER(False) True >>> ISNUMBER(float('nan')) True >>> ISNUMBER(float('inf')) True >>> ISNUMBER('17') False >>> ISNUMBER(None) False >>> ISNUMBER(datetime.date(2011, 1, 1)) False ISREF # ISREF (value) # Checks whether a value is a table record. For example, if a column person is of type Reference to the People table, then ISREF($person) is True . Similarly, ISREF(People.lookupOne(name=$name)) is True . For any other type of value, ISREF() would evaluate to False . >>> ISREF(17) False >>> ISREF(\"Roger\") False ISREFLIST # ISREFLIST (value) # Checks whether a value is a RecordSet , the type of values in Reference List columns. For example, if a column people is of type Reference List to the People table, then ISREFLIST($people) is True . Similarly, ISREFLIST(People.lookupRecords(name=$name)) is True . For any other type of value, ISREFLIST() would evaluate to False . >>> ISREFLIST(17) False >>> ISREFLIST(\"Roger\") False ISTEXT # ISTEXT (value) # Checks whether a value is text. >>> ISTEXT(\"asdf\") True >>> ISTEXT(\"\") True >>> ISTEXT(AltText(\"text\")) True >>> ISTEXT(17.0) False >>> ISTEXT(None) False >>> ISTEXT(datetime.date(2011, 1, 1)) False ISURL # ISURL (value) # Checks whether a value is a valid URL. It does not need to be fully qualified, or to include \u201chttp://\u201d and \u201cwww\u201d. It does not follow a standard, but attempts to work similarly to ISURL in Google Sheets, and to return True for text that is likely a URL. Valid protocols include ftp, http, https, gopher, mailto, news, telnet, and aim. >>> ISURL(\"http://www.getgrist.com\") True >>> ISURL(\"https://foo.com/test_(wikipedia)#cite-1\") True >>> ISURL(\"mailto://user@example.com\") True >>> ISURL(\"http:///a\") False N # N (value) # Returns the value converted to a number. True/False are converted to 1/0. A date is converted to Excel-style serial number of the date. Anything else is converted to 0. >>> N(7) 7 >>> N(7.1) 7.1 >>> N(\"Even\") 0 >>> N(\"7\") 0 >>> N(True) 1 >>> N(datetime.datetime(2011, 4, 17)) 40650.0 NA # NA () # Returns the \u201cvalue not available\u201d error, #N/A . >>> math.isnan(NA()) True RECORD # RECORD (record_or_list, dates_as_iso=False, expand_refs=0) # Returns a Python dictionary with all fields in the given record. If a list of records is given, returns a list of corresponding Python dictionaries. If dates_as_iso is set, Date and DateTime values are converted to string using ISO 8601 format. If expand_refs is set to 1 or higher, Reference values are replaced with a RECORD representation of the referenced record, expanding the given number of levels. Error values present in cells of the record are replaced with None value, and a special key of \u201c error \u201d gets added containing the error messages for those cells. For example: {\"Ratio\": None, \"_error_\": {\"Ratio\": \"ZeroDivisionError: integer division or modulo by zero\"}} Note that care is needed to avoid circular references when using RECORD(), since it creates a dependency on every cell in the record. In case of RECORD(rec), the cell containing this call will be omitted from the resulting dictionary. For example: RECORD($Person) RECORD(rec) RECORD(People.lookupOne(First_Name=\"Alice\")) RECORD(People.lookupRecords(Department=\"HR\")) TYPE # TYPE (value) # Returns a number associated with the type of data passed into the function. This is not implemented in Grist. Use isinstance(value, type) or type(value) . Note This function is not currently implemented in Grist. Logical # AND # AND (logical_expression, *logical_expressions) # Returns True if all of the arguments are logically true, and False if any are false. Same as all([value1, value2, ...]) . >>> AND(1) True >>> AND(0) False >>> AND(1, 1) True >>> AND(1,2,3,4) True >>> AND(1,2,3,4,0) False FALSE # FALSE () # Returns the logical value False . You may also use the value False directly. This function is provided primarily for compatibility with other spreadsheet programs. >>> FALSE() False IF # IF (logical_expression, value_if_true, value_if_false) # Returns one value if a logical expression is True and another if it is False . The equivalent Python expression is: value_if_true if logical_expression else value_if_false Since Grist supports multi-line formulas, you may also use Python blocks such as: if logical_expression: return value_if_true else: return value_if_false NOTE: Grist follows Excel model by only evaluating one of the value expressions, by automatically wrapping the expressions to use lazy evaluation. This allows IF(False, 1/0, 1) to evaluate to 1 rather than raise an exception. >>> IF(12, \"Yes\", \"No\") 'Yes' >>> IF(None, \"Yes\", \"No\") 'No' >>> IF(True, 0.85, 0.0) 0.85 >>> IF(False, 0.85, 0.0) 0.0 IFERROR # IFERROR (value, value_if_error=\u2019\u2018) # Returns the first argument if it is not an error value, otherwise returns the second argument if present, or a blank if the second argument is absent. NOTE: Grist handles values that raise an exception by wrapping them to use lazy evaluation. >>> IFERROR(float('nan'), \"**NAN**\") '**NAN**' >>> IFERROR(17.17, \"**NAN**\") 17.17 >>> IFERROR(\"Text\") 'Text' >>> IFERROR(AltText(\"hello\")) '' NOT # NOT (logical_expression) # True . Same as not logical_expression . >>> NOT(123) False >>> NOT(0) True OR # OR (logical_expression, *logical_expressions) # Returns True if any of the arguments is logically true, and false if all of the arguments are false. Same as any([value1, value2, ...]) . >>> OR(1) True >>> OR(0) False >>> OR(1, 1) True >>> OR(0, 1) True >>> OR(0, 0) False >>> OR(0,False,0.0,\"\",None) False >>> OR(0,None,3,0) True TRUE # TRUE () # Returns the logical value True . You may also use the value True directly. This function is provided primarily for compatibility with other spreadsheet programs. >>> TRUE() True Lookup # lookupOne # UserTable. lookupOne (Field_In_Lookup_Table=value, \u2026) # Returns a Record matching the given field=value arguments. The value may be any expression, most commonly a field in the current row (e.g. $SomeField ) or a constant (e.g. a quoted string like \"Some Value\" ). If multiple records match, returns one of them. If none match, returns the special empty record. For example: People.lookupOne(First_Name=\"Lewis\", Last_Name=\"Carroll\") People.lookupOne(Email=$Work_Email) lookupRecords # UserTable. lookupRecords (Field_In_Lookup_Table=value, \u2026) # Returns a RecordSet matching the given field=value arguments. The value may be any expression, most commonly a field in the current row (e.g. $SomeField ) or a constant (e.g. a quoted string like \"Some Value\" ) (examples below). If sort_by=field is given, sort the results by that field. For example: People.lookupRecords(Email=$Work_Email) People.lookupRecords(First_Name=\"George\", Last_Name=\"Washington\") People.lookupRecords(Last_Name=\"Johnson\", sort_by=\"First_Name\") See RecordSet for useful properties offered by the returned object. See CONTAINS for an example utilizing UserTable.lookupRecords to find records where a field of a list type (such as Choice List or Reference List ) contains the given value. ADDRESS # ADDRESS (row, column, absolute_relative_mode, use_a1_notation, sheet) # Returns a cell reference as a string. Note This function is not currently implemented in Grist. CHOOSE # CHOOSE (index, choice1, choice2) # Returns an element from a list of choices based on index. Note This function is not currently implemented in Grist. COLUMN # COLUMN (cell_reference=None) # Returns the column number of a specified cell, with A=1 . Note This function is not currently implemented in Grist. COLUMNS # COLUMNS (range) # Returns the number of columns in a specified array or range. Note This function is not currently implemented in Grist. CONTAINS # CONTAINS (value) # Use this marker with UserTable.lookupRecords to find records where a field of a list type (such as Choice List or Reference List ) contains the given value. For example: MoviesTable.lookupRecords(genre=CONTAINS(\"Drama\")) will return records in MoviesTable where the column genre is a list or other container such as [\"Comedy\", \"Drama\"] , i.e. \"Drama\" in $genre . Note that the column being looked up (e.g. genre ) must have values of a container type such as list, tuple, or set. In particular the values mustn\u2019t be strings, e.g. \"Comedy-Drama\" won\u2019t match even though \"Drama\" in \"Comedy-Drama\" is True in Python. It also won\u2019t match substrings within container elements, e.g. [\"Comedy-Drama\"] . GETPIVOTDATA # GETPIVOTDATA (value_name, any_pivot_table_cell, original_column_1, pivot_item_1=None, *args) # Extracts an aggregated value from a pivot table that corresponds to the specified row and column headings. Note This function is not currently implemented in Grist. HLOOKUP # HLOOKUP (search_key, range, index, is_sorted) # Horizontal lookup. Searches across the first row of a range for a key and returns the value of a specified cell in the column found. Note This function is not currently implemented in Grist. HYPERLINK # HYPERLINK (url, link_label) # Creates a hyperlink inside a cell. Note This function is not currently implemented in Grist. INDEX # INDEX (reference, row, column) # Returns the content of a cell, specified by row and column offset. Note This function is not currently implemented in Grist. INDIRECT # INDIRECT (cell_reference_as_string) # Returns a cell reference specified by a string. Note This function is not currently implemented in Grist. LOOKUP # LOOKUP (search_key, search_range_or_search_result_array, result_range=None) # Looks through a row or column for a key and returns the value of the cell in a result range located in the same position as the search row or column. Note This function is not currently implemented in Grist. MATCH # MATCH (search_key, range, search_type) # Returns the relative position of an item in a range that matches a specified value. Note This function is not currently implemented in Grist. OFFSET # OFFSET (cell_reference, offset_rows, offset_columns, height, width) # Returns a range reference shifted a specified number of rows and columns from a starting cell reference. Note This function is not currently implemented in Grist. ROW # ROW (cell_reference) # Returns the row number of a specified cell. Note This function is not currently implemented in Grist. ROWS # ROWS (range) # Returns the number of rows in a specified array or range. Note This function is not currently implemented in Grist. SELF_HYPERLINK # SELF_HYPERLINK (label=None, page=None, **kwargs) # Creates a link to the current document. All parameters are optional. The returned string is in URL format, optionally preceded by a label and a space (the format expected for Grist Text columns with the HyperLink option enabled). A numeric page number can be supplied, which will create a link to the specified page. To find the numeric page number you need, visit a page and examine its URL for a /p/NN part. Any number of arguments of the form LinkKey_NAME may be provided, to set user.LinkKey.NAME values that will be available in access rules. For example, if a rule allows users to view rows when user.LinkKey.Code == rec.Code , we might want to create links with SELF_HYPERLINK(LinkKey_Code=$Code) . >>> SELF_HYPERLINK() u'https://docs.getgrist.com/sbaltsirg/Example' >>> SELF_HYPERLINK(label='doc') u'doc https://docs.getgrist.com/sbaltsirg/Example' >>> SELF_HYPERLINK(page=2) u'https://docs.getgrist.com/sbaltsirg/Example/p/2' >>> SELF_HYPERLINK(LinkKey_Code='X1234') u'https://docs.getgrist.com/sbaltsirg/Example?Code_=X1234' >>> SELF_HYPERLINK(label='order', page=3, LinkKey_Code='X1234', LinkKey_Name='Bi Ngo') u'order https://docs.getgrist.com/sbaltsirg/Example/p/3?Code_=X1234&Name_=Bi+Ngo' >>> SELF_HYPERLINK(Linky_Link='Link') Traceback (most recent call last): ... TypeError: unexpected keyword argument 'Linky_Link' (not of form LinkKey_NAME) VLOOKUP # VLOOKUP (table, **field_value_pairs) # Vertical lookup. Searches the given table for a record matching the given field=value arguments. If multiple records match, returns one of them. If none match, returns the special empty record. The returned object is a record whose fields are available using .field syntax. For example, VLOOKUP(Employees, EmployeeID=$EmpID).Salary . Note that VLOOKUP isn\u2019t commonly needed in Grist, since Reference columns are the best way to link data between tables, and allow simple efficient usage such as $Person.Age . VLOOKUP is exactly quivalent to table.lookupOne(**field_value_pairs) . See lookupOne . For example: VLOOKUP(People, First_Name=\"Lewis\", Last_Name=\"Carroll\") VLOOKUP(People, First_Name=\"Lewis\", Last_Name=\"Carroll\").Age Math # ABS # ABS (value) # Returns the absolute value of a number. >>> ABS(2) 2 >>> ABS(-2) 2 >>> ABS(-4) 4 ACOS # ACOS (value) # Returns the inverse cosine of a value, in radians. >>> round(ACOS(-0.5), 9) 2.094395102 >>> round(ACOS(-0.5)*180/PI(), 10) 120.0 ACOSH # ACOSH (value) # Returns the inverse hyperbolic cosine of a number. >>> ACOSH(1) 0.0 >>> round(ACOSH(10), 7) 2.9932228 ARABIC # ARABIC (roman_numeral) # Computes the value of a Roman numeral. >>> ARABIC(\"LVII\") 57 >>> ARABIC('mcmxii') 1912 ASIN # ASIN (value) # Returns the inverse sine of a value, in radians. >>> round(ASIN(-0.5), 9) -0.523598776 >>> round(ASIN(-0.5)*180/PI(), 10) -30.0 >>> round(DEGREES(ASIN(-0.5)), 10) -30.0 ASINH # ASINH (value) # Returns the inverse hyperbolic sine of a number. >>> round(ASINH(-2.5), 9) -1.647231146 >>> round(ASINH(10), 9) 2.99822295 ATAN # ATAN (value) # Returns the inverse tangent of a value, in radians. >>> round(ATAN(1), 9) 0.785398163 >>> ATAN(1)*180/PI() 45.0 >>> DEGREES(ATAN(1)) 45.0 ATAN2 # ATAN2 (x, y) # Returns the angle between the x-axis and a line segment from the origin (0,0) to specified coordinate pair ( x , y ), in radians. >>> round(ATAN2(1, 1), 9) 0.785398163 >>> round(ATAN2(-1, -1), 9) -2.35619449 >>> ATAN2(-1, -1)*180/PI() -135.0 >>> DEGREES(ATAN2(-1, -1)) -135.0 >>> round(ATAN2(1,2), 9) 1.107148718 ATANH # ATANH (value) # Returns the inverse hyperbolic tangent of a number. >>> round(ATANH(0.76159416), 9) 1.00000001 >>> round(ATANH(-0.1), 9) -0.100335348 CEILING # CEILING (value, factor=1) # Rounds a number up to the nearest multiple of factor, or the nearest integer if the factor is omitted or 1. >>> CEILING(2.5, 1) 3 >>> CEILING(-2.5, -2) -4 >>> CEILING(-2.5, 2) -2 >>> CEILING(1.5, 0.1) 1.5 >>> CEILING(0.234, 0.01) 0.24 COMBIN # COMBIN (n, k) # Returns the number of ways to choose some number of objects from a pool of a given size of objects. >>> COMBIN(8,2) 28 >>> COMBIN(4,2) 6 >>> COMBIN(10,7) 120 COS # COS (angle) # Returns the cosine of an angle provided in radians. >>> round(COS(1.047), 7) 0.5001711 >>> round(COS(60*PI()/180), 10) 0.5 >>> round(COS(RADIANS(60)), 10) 0.5 COSH # COSH (value) # Returns the hyperbolic cosine of any real number. >>> round(COSH(4), 6) 27.308233 >>> round(COSH(EXP(1)), 7) 7.6101251 DEGREES # DEGREES (angle) # Converts an angle value in radians to degrees. >>> round(DEGREES(ACOS(-0.5)), 10) 120.0 >>> DEGREES(PI()) 180.0 EVEN # EVEN (value) # Rounds a number up to the nearest even integer, rounding away from zero. >>> EVEN(1.5) 2 >>> EVEN(3) 4 >>> EVEN(2) 2 >>> EVEN(-1) -2 EXP # EXP (exponent) # Returns Euler\u2019s number, e (~2.718) raised to a power. >>> round(EXP(1), 8) 2.71828183 >>> round(EXP(2), 7) 7.3890561 FACT # FACT (value) # Returns the factorial of a number. >>> FACT(5) 120 >>> FACT(1.9) 1 >>> FACT(0) 1 >>> FACT(1) 1 >>> FACT(-1) Traceback (most recent call last): ... ValueError: factorial() not defined for negative values FACTDOUBLE # FACTDOUBLE (value) # Returns the \u201cdouble factorial\u201d of a number. >>> FACTDOUBLE(6) 48 >>> FACTDOUBLE(7) 105 >>> FACTDOUBLE(3) 3 >>> FACTDOUBLE(4) 8 FLOOR # FLOOR (value, factor=1) # Rounds a number down to the nearest integer multiple of specified significance. >>> FLOOR(3.7,2) 2 >>> FLOOR(-2.5,-2) -2 >>> FLOOR(2.5,-2) Traceback (most recent call last): ... ValueError: factor argument invalid >>> FLOOR(1.58,0.1) 1.5 >>> FLOOR(0.234,0.01) 0.23 GCD # GCD (value1, *more_values) # Returns the greatest common divisor of one or more integers. >>> GCD(5, 2) 1 >>> GCD(24, 36) 12 >>> GCD(7, 1) 1 >>> GCD(5, 0) 5 >>> GCD(0, 5) 5 >>> GCD(5) 5 >>> GCD(14, 42, 21) 7 INT # INT (value) # Rounds a number down to the nearest integer that is less than or equal to it. >>> INT(8.9) 8 >>> INT(-8.9) -9 >>> 19.5-INT(19.5) 0.5 LCM # LCM (value1, *more_values) # Returns the least common multiple of one or more integers. >>> LCM(5, 2) 10 >>> LCM(24, 36) 72 >>> LCM(0, 5) 0 >>> LCM(5) 5 >>> LCM(10, 100) 100 >>> LCM(12, 18) 36 >>> LCM(12, 18, 24) 72 LN # LN (value) # Returns the the logarithm of a number, base e (Euler\u2019s number). >>> round(LN(86), 7) 4.4543473 >>> round(LN(2.7182818), 7) 1.0 >>> round(LN(EXP(3)), 10) 3.0 LOG # LOG (value, base=10) # Returns the the logarithm of a number given a base. >>> LOG(10) 1.0 >>> LOG(8, 2) 3.0 >>> round(LOG(86, 2.7182818), 7) 4.4543473 LOG10 # LOG10 (value) # Returns the the logarithm of a number, base 10. >>> round(LOG10(86), 9) 1.934498451 >>> LOG10(10) 1.0 >>> LOG10(100000) 5.0 >>> LOG10(10**5) 5.0 MOD # MOD (dividend, divisor) # Returns the result of the modulo operator, the remainder after a division operation. >>> MOD(3, 2) 1 >>> MOD(-3, 2) 1 >>> MOD(3, -2) -1 >>> MOD(-3, -2) -1 MROUND # MROUND (value, factor) # Rounds one number to the nearest integer multiple of another. >>> MROUND(10, 3) 9 >>> MROUND(-10, -3) -9 >>> round(MROUND(1.3, 0.2), 10) 1.4 >>> MROUND(5, -2) Traceback (most recent call last): ... ValueError: factor argument invalid MULTINOMIAL # MULTINOMIAL (value1, *more_values) # Returns the factorial of the sum of values divided by the product of the values\u2019 factorials. >>> MULTINOMIAL(2, 3, 4) 1260 >>> MULTINOMIAL(3) 1 >>> MULTINOMIAL(1,2,3) 60 >>> MULTINOMIAL(0,2,4,6) 13860 ODD # ODD (value) # Rounds a number up to the nearest odd integer. >>> ODD(1.5) 3 >>> ODD(3) 3 >>> ODD(2) 3 >>> ODD(-1) -1 >>> ODD(-2) -3 PI # PI () # Returns the value of Pi to 14 decimal places. >>> round(PI(), 9) 3.141592654 >>> round(PI()/2, 9) 1.570796327 >>> round(PI()*9, 8) 28.27433388 POWER # POWER (base, exponent) # Returns a number raised to a power. >>> POWER(5,2) 25.0 >>> round(POWER(98.6,3.2), 3) 2401077.222 >>> round(POWER(4,5.0/4), 9) 5.656854249 PRODUCT # PRODUCT (factor1, *more_factors) # Returns the result of multiplying a series of numbers together. Each argument may be a number or an array. >>> PRODUCT([5,15,30]) 2250 >>> PRODUCT([5,15,30], 2) 4500 >>> PRODUCT(5,15,[30],[2]) 4500 QUOTIENT # QUOTIENT (dividend, divisor) # Returns one number divided by another, without the remainder. >>> QUOTIENT(5, 2) 2 >>> QUOTIENT(4.5, 3.1) 1 >>> QUOTIENT(-10, 3) -3 RADIANS # RADIANS (angle) # Converts an angle value in degrees to radians. >>> round(RADIANS(270), 6) 4.712389 RAND # RAND () # Returns a random number between 0 inclusive and 1 exclusive. RANDBETWEEN # RANDBETWEEN (low, high) # Returns a uniformly random integer between two values, inclusive. ROMAN # ROMAN (number, form_unused=None) # Formats a number in Roman numerals. The second argument is ignored in this implementation. >>> ROMAN(499,0) 'CDXCIX' >>> ROMAN(499.2,0) 'CDXCIX' >>> ROMAN(57) 'LVII' >>> ROMAN(1912) 'MCMXII' ROUND # ROUND (value, places=0) # Rounds a number to a certain number of decimal places, by default to the nearest whole number if the number of places is not given. Rounds away from zero (\u2018up\u2019 for positive numbers) in the case of a tie, i.e. when the last digit is 5. >>> ROUND(1.4) 1.0 >>> ROUND(1.5) 2.0 >>> ROUND(2.5) 3.0 >>> ROUND(-2.5) -3.0 >>> ROUND(2.15, 1) 2.2 >>> ROUND(-1.475, 2) -1.48 >>> ROUND(21.5, -1) 20.0 >>> ROUND(626.3,-3) 1000.0 >>> ROUND(1.98,-1) 0.0 >>> ROUND(-50.55,-2) -100.0 >>> ROUND(0) 0.0 ROUNDDOWN # ROUNDDOWN (value, places=0) # Rounds a number to a certain number of decimal places, always rounding down towards zero. >>> ROUNDDOWN(3.2, 0) 3 >>> ROUNDDOWN(76.9,0) 76 >>> ROUNDDOWN(3.14159, 3) 3.141 >>> ROUNDDOWN(-3.14159, 1) -3.1 >>> ROUNDDOWN(31415.92654, -2) 31400 ROUNDUP # ROUNDUP (value, places=0) # Rounds a number to a certain number of decimal places, always rounding up away from zero. >>> ROUNDUP(3.2,0) 4 >>> ROUNDUP(76.9,0) 77 >>> ROUNDUP(3.14159, 3) 3.142 >>> ROUNDUP(-3.14159, 1) -3.2 >>> ROUNDUP(31415.92654, -2) 31500 SERIESSUM # SERIESSUM (x, n, m, a) # Given parameters x, n, m, and a, returns the power series sum a_1 x^n + a_2 x^(n+m) + \u2026 + a_i*x^(n+(i-1)m), where i is the number of entries in range a . >>> SERIESSUM(1,0,1,1) 1 >>> SERIESSUM(2,1,0,[1,2,3]) 12 >>> SERIESSUM(-3,1,1,[2,4,6]) -132 >>> round(SERIESSUM(PI()/4,0,2,[1,-1./FACT(2),1./FACT(4),-1./FACT(6)]), 6) 0.707103 SIGN # SIGN (value) # Given an input number, returns -1 if it is negative, 1 if positive, and 0 if it is zero. >>> SIGN(10) 1 >>> SIGN(4.0-4.0) 0 >>> SIGN(-0.00001) -1 SIN # SIN (angle) # Returns the sine of an angle provided in radians. >>> round(SIN(PI()), 10) 0.0 >>> SIN(PI()/2) 1.0 >>> round(SIN(30*PI()/180), 10) 0.5 >>> round(SIN(RADIANS(30)), 10) 0.5 SINH # SINH (value) # Returns the hyperbolic sine of any real number. >>> round(2.868*SINH(0.0342*1.03), 7) 0.1010491 SQRT # SQRT (value) # Returns the positive square root of a positive number. >>> SQRT(16) 4.0 >>> SQRT(-16) Traceback (most recent call last): ... ValueError: math domain error >>> SQRT(ABS(-16)) 4.0 SQRTPI # SQRTPI (value) # Returns the positive square root of the product of Pi and the given positive number. >>> round(SQRTPI(1), 6) 1.772454 >>> round(SQRTPI(2), 6) 2.506628 SUBTOTAL # SUBTOTAL (function_code, range1, range2) # Returns a subtotal for a vertical range of cells using a specified aggregation function. Note This function is not currently implemented in Grist. SUM # SUM (value1, *more_values) # Returns the sum of a series of numbers. Each argument may be a number or an array. Non-numeric values are ignored. >>> SUM([5,15,30]) 50 >>> SUM([5.,15,30], 2) 52.0 >>> SUM(5,15,[30],[2]) 52 SUMIF # SUMIF (records, criterion, sum_range) # Returns a conditional sum across a range. Note This function is not currently implemented in Grist. SUMIFS # SUMIFS (sum_range, criteria_range1, criterion1, *args) # Returns the sum of a range depending on multiple criteria. Note This function is not currently implemented in Grist. SUMPRODUCT # SUMPRODUCT (array1, *more_arrays) # Multiplies corresponding components in two equally-sized arrays, and returns the sum of those products. >>> SUMPRODUCT([3,8,1,4,6,9], [2,6,5,7,7,3]) 156 >>> SUMPRODUCT([], [], []) 0 >>> SUMPRODUCT([-0.25], [-2], [-3]) -1.5 >>> SUMPRODUCT([-0.25, -0.25], [-2, -2], [-3, -3]) -3.0 SUMSQ # SUMSQ (value1, value2) # Returns the sum of the squares of a series of numbers and/or cells. Note This function is not currently implemented in Grist. TAN # TAN (angle) # Returns the tangent of an angle provided in radians. >>> round(TAN(0.785), 8) 0.99920399 >>> round(TAN(45*PI()/180), 10) 1.0 >>> round(TAN(RADIANS(45)), 10) 1.0 TANH # TANH (value) # Returns the hyperbolic tangent of any real number. >>> round(TANH(-2), 6) -0.964028 >>> TANH(0) 0.0 >>> round(TANH(0.5), 6) 0.462117 TRUNC # TRUNC (value, places=0) # Truncates a number to a certain number of significant digits by omitting less significant digits. >>> TRUNC(8.9) 8 >>> TRUNC(-8.9) -8 >>> TRUNC(0.45) 0 UUID # UUID () # Generate a random UUID-formatted string identifier. Since UUID() produces a different value each time it\u2019s called, it is best to use it in trigger formula for new records. This would only calculate UUID() once and freeze the calculated value. By contrast, a regular formula may get recalculated any time the document is reloaded, producing a different value for UUID() each time. Schedule # SCHEDULE # SCHEDULE (schedule, start=None, count=10, end=None) # Returns the list of datetime objects generated according to the schedule string. Starts at start , which defaults to NOW(). Generates at most count results (10 by default). If end is given, stops there. The schedule has the format \u201cINTERVAL: SLOTS, \u2026\u201d. For example: annual: Jan-15, Apr-15, Jul-15 -- Three times a year on given dates at midnight. annual: 1/15, 4/15, 7/15 -- Same as above. monthly: /1 2pm, /15 2pm -- The 1st and the 15th of each month, at 2pm. 3-months: /10, +1m /20 -- Every 3 months on the 10th of month 1, 20th of month 2. weekly: Mo 9am, Tu 9am, Fr 2pm -- Three times a week at specified times. 2-weeks: Mo, +1w Tu -- Every 2 weeks on Monday of week 1, Tuesday of week 2. daily: 07:30, 21:00 -- Twice a day at specified times. 2-day: 12am, 4pm, +1d 8am -- Three times every two days, evenly spaced. hourly: :15, :45 -- 15 minutes before and after each hour. 4-hour: :00, 1:20, 2:40 -- Three times every 4 hours, evenly spaced. 10-minute: +0s -- Every 10 minutes on the minute. INTERVAL must be either of the form N-unit where N is a number and unit is one of year , month , week , day , hour ; or one of the aliases: annual , monthly , weekly , daily , hourly , which mean 1-year , 1-month , etc. SLOTS support the following units: `Jan-15` or `1/15` -- Month and day of the month; available when INTERVAL is year-based. `/15` -- Day of the month, available when INTERVAL is month-based. `Mon`, `Mo`, `Friday` -- Day of the week (or abbreviation), when INTERVAL is week-based. 10am, 1:30pm, 15:45 -- Time of day, available for day-based or longer intervals. :45, :00 -- Minutes of the hour, available when INTERVAL is hour-based. +1d, +15d -- How many days to add to start of INTERVAL. +1w -- How many weeks to add to start of INTERVAL. +1m -- How many months to add to start of INTERVAL. The SLOTS are always relative to the INTERVAL rather than to start . Week-based intervals start on Sunday. E.g. weekly: +1d, +4d is the same as weekly: Mon, Thu , and generates times on Mondays and Thursdays regardless of start . The first generated time is determined by the unit of the INTERVAL without regard to the multiple. E.g. both \u201c2-week: Mon\u201d and \u201c3-week: Mon\u201d start on the first Monday after start , and then generate either every second or every third Monday after that. Similarly, 24-hour: :00 starts with the first top-of-the-hour after start (not with midnight), and then repeats every 24 hours. To start with the midnight after start , use daily: 0:00 . For interval units of a day or longer, if time-of-day is not specified, it defaults to midnight. The time zone of start determines the time zone of the generated times. >>> def show(dates): return [d.strftime(\"%Y-%m-%d %H:%M\") for d in dates] >>> start = datetime(2018, 9, 4, 14, 0); # 2pm on Tue, Sep 4 2018. >>> show(SCHEDULE('annual: Jan-15, Apr-15, Jul-15, Oct-15', start=start, count=4)) ['2018-10-15 00:00', '2019-01-15 00:00', '2019-04-15 00:00', '2019-07-15 00:00'] >>> show(SCHEDULE('annual: 1/15, 4/15, 7/15', start=start, count=4)) ['2019-01-15 00:00', '2019-04-15 00:00', '2019-07-15 00:00', '2020-01-15 00:00'] >>> show(SCHEDULE('monthly: /1 2pm, /15 5pm', start=start, count=4)) ['2018-09-15 17:00', '2018-10-01 14:00', '2018-10-15 17:00', '2018-11-01 14:00'] >>> show(SCHEDULE('3-months: /10, +1m /20', start=start, count=4)) ['2018-09-10 00:00', '2018-10-20 00:00', '2018-12-10 00:00', '2019-01-20 00:00'] >>> show(SCHEDULE('weekly: Mo 9am, Tu 9am, Fr 2pm', start=start, count=4)) ['2018-09-07 14:00', '2018-09-10 09:00', '2018-09-11 09:00', '2018-09-14 14:00'] >>> show(SCHEDULE('2-weeks: Mo, +1w Tu', start=start, count=4)) ['2018-09-11 00:00', '2018-09-17 00:00', '2018-09-25 00:00', '2018-10-01 00:00'] >>> show(SCHEDULE('daily: 07:30, 21:00', start=start, count=4)) ['2018-09-04 21:00', '2018-09-05 07:30', '2018-09-05 21:00', '2018-09-06 07:30'] >>> show(SCHEDULE('2-day: 12am, 4pm, +1d 8am', start=start, count=4)) ['2018-09-04 16:00', '2018-09-05 08:00', '2018-09-06 00:00', '2018-09-06 16:00'] >>> show(SCHEDULE('hourly: :15, :45', start=start, count=4)) ['2018-09-04 14:15', '2018-09-04 14:45', '2018-09-04 15:15', '2018-09-04 15:45'] >>> show(SCHEDULE('4-hour: :00, +1H :20, +2H :40', start=start, count=4)) ['2018-09-04 14:00', '2018-09-04 15:20', '2018-09-04 16:40', '2018-09-04 18:00'] Stats # AVEDEV # AVEDEV (value1, value2) # Calculates the average of the magnitudes of deviations of data from a dataset\u2019s mean. Note This function is not currently implemented in Grist. AVERAGE # AVERAGE (value, *more_values) # Returns the numerical average value in a dataset, ignoring non-numerical values. Each argument may be a value or an array. Values that are not numbers, including logical and blank values, and text representations of numbers, are ignored. >>> AVERAGE([2, -1.0, 11]) 4.0 >>> AVERAGE([2, -1, 11, \"Hello\"]) 4.0 >>> AVERAGE([2, -1, \"Hello\", DATE(2015,1,1)], True, [False, \"123\", \"\", 11]) 4.0 >>> AVERAGE(False, True) Traceback (most recent call last): ... ZeroDivisionError: float division by zero AVERAGEA # AVERAGEA (value, *more_values) # Returns the numerical average value in a dataset, counting non-numerical values as 0. Each argument may be a value of an array. Values that are not numbers, including dates and text representations of numbers, are counted as 0 (zero). Logical value of True is counted as 1, and False as 0. >>> AVERAGEA([2, -1.0, 11]) 4.0 >>> AVERAGEA([2, -1, 11, \"Hello\"]) 3.0 >>> AVERAGEA([2, -1, \"Hello\", DATE(2015,1,1)], True, [False, \"123\", \"\", 11.5]) 1.5 >>> AVERAGEA(False, True) 0.5 AVERAGEIF # AVERAGEIF (criteria_range, criterion, average_range=None) # Returns the average of a range depending on criteria. Note This function is not currently implemented in Grist. AVERAGEIFS # AVERAGEIFS (average_range, criteria_range1, criterion1, *args) # Returns the average of a range depending on multiple criteria. Note This function is not currently implemented in Grist. AVERAGE_WEIGHTED # AVERAGE_WEIGHTED (pairs) # Given a list of (value, weight) pairs, finds the average of the values weighted by the corresponding weights. Ignores any pairs with a non-numerical value or weight. If you have two lists, of values and weights, use the Python built-in zip() function to create a list of pairs. >>> AVERAGE_WEIGHTED(((95, .25), (90, .1), (\"X\", .5), (85, .15), (88, .2), (82, .3), (70, None))) 87.7 >>> AVERAGE_WEIGHTED(zip([95, 90, \"X\", 85, 88, 82, 70], [25, 10, 50, 15, 20, 30, None])) 87.7 >>> AVERAGE_WEIGHTED(zip([95, 90, False, 85, 88, 82, 70], [.25, .1, .5, .15, .2, .3, True])) 87.7 BINOMDIST # BINOMDIST (num_successes, num_trials, prob_success, cumulative) # Calculates the probability of drawing a certain number of successes (or a maximum number of successes) in a certain number of tries given a population of a certain size containing a certain number of successes, with replacement of draws. Note This function is not currently implemented in Grist. CONFIDENCE # CONFIDENCE (alpha, standard_deviation, pop_size) # Calculates the width of half the confidence interval for a normal distribution. Note This function is not currently implemented in Grist. CORREL # CORREL (data_y, data_x) # Calculates r, the Pearson product-moment correlation coefficient of a dataset. Note This function is not currently implemented in Grist. COUNT # COUNT (value, *more_values) # Returns the count of numerical values in a dataset, ignoring non-numerical values. Each argument may be a value or an array. Values that are not numbers, including logical and blank values, and text representations of numbers, are ignored. >>> COUNT([2, -1.0, 11]) 3 >>> COUNT([2, -1, 11, \"Hello\"]) 3 >>> COUNT([2, -1, \"Hello\", DATE(2015,1,1)], True, [False, \"123\", \"\", 11.5]) 3 >>> COUNT(False, True) 0 COUNTA # COUNTA (value, *more_values) # Returns the count of all values in a dataset, including non-numerical values. Each argument may be a value or an array. >>> COUNTA([2, -1.0, 11]) 3 >>> COUNTA([2, -1, 11, \"Hello\"]) 4 >>> COUNTA([2, -1, \"Hello\", DATE(2015,1,1)], True, [False, \"123\", \"\", 11.5]) 9 >>> COUNTA(False, True) 2 COVAR # COVAR (data_y, data_x) # Calculates the covariance of a dataset. Note This function is not currently implemented in Grist. CRITBINOM # CRITBINOM (num_trials, prob_success, target_prob) # Calculates the smallest value for which the cumulative binomial distribution is greater than or equal to a specified criteria. Note This function is not currently implemented in Grist. DEVSQ # DEVSQ (value1, value2) # Calculates the sum of squares of deviations based on a sample. Note This function is not currently implemented in Grist. EXPONDIST # EXPONDIST (x, lambda_, cumulative) # Returns the value of the exponential distribution function with a specified lambda at a specified value. Note This function is not currently implemented in Grist. FDIST # FDIST (x, degrees_freedom1, degrees_freedom2) # Calculates the right-tailed F probability distribution (degree of diversity) for two data sets with given input x. Alternately called Fisher-Snedecor distribution or Snedecor\u2019s F distribution. Note This function is not currently implemented in Grist. FISHER # FISHER (value) # Returns the Fisher transformation of a specified value. Note This function is not currently implemented in Grist. FISHERINV # FISHERINV (value) # Returns the inverse Fisher transformation of a specified value. Note This function is not currently implemented in Grist. FORECAST # FORECAST (x, data_y, data_x) # Calculates the expected y-value for a specified x based on a linear regression of a dataset. Note This function is not currently implemented in Grist. F_DIST # F_DIST (x, degrees_freedom1, degrees_freedom2, cumulative) # Calculates the left-tailed F probability distribution (degree of diversity) for two data sets with given input x. Alternately called Fisher-Snedecor distribution or Snedecor\u2019s F distribution. Note This function is not currently implemented in Grist. F_DIST_RT # F_DIST_RT (x, degrees_freedom1, degrees_freedom2) # Calculates the right-tailed F probability distribution (degree of diversity) for two data sets with given input x. Alternately called Fisher-Snedecor distribution or Snedecor\u2019s F distribution. Note This function is not currently implemented in Grist. GEOMEAN # GEOMEAN (value1, value2) # Calculates the geometric mean of a dataset. Note This function is not currently implemented in Grist. HARMEAN # HARMEAN (value1, value2) # Calculates the harmonic mean of a dataset. Note This function is not currently implemented in Grist. HYPGEOMDIST # HYPGEOMDIST (num_successes, num_draws, successes_in_pop, pop_size) # Calculates the probability of drawing a certain number of successes in a certain number of tries given a population of a certain size containing a certain number of successes, without replacement of draws. Note This function is not currently implemented in Grist. INTERCEPT # INTERCEPT (data_y, data_x) # Calculates the y-value at which the line resulting from linear regression of a dataset will intersect the y-axis (x=0). Note This function is not currently implemented in Grist. KURT # KURT (value1, value2) # Calculates the kurtosis of a dataset, which describes the shape, and in particular the \u201cpeakedness\u201d of that dataset. Note This function is not currently implemented in Grist. LARGE # LARGE (data, n) # Returns the nth largest element from a data set, where n is user-defined. Note This function is not currently implemented in Grist. LOGINV # LOGINV (x, mean, standard_deviation) # Returns the value of the inverse log-normal cumulative distribution with given mean and standard deviation at a specified value. Note This function is not currently implemented in Grist. LOGNORMDIST # LOGNORMDIST (x, mean, standard_deviation) # Returns the value of the log-normal cumulative distribution with given mean and standard deviation at a specified value. Note This function is not currently implemented in Grist. MAX # MAX (value, *more_values) # Returns the maximum value in a dataset, ignoring non-numerical values. Each argument may be a value or an array. Values that are not numbers, including logical and blank values, and text representations of numbers, are ignored. Returns 0 if the arguments contain no numbers. >>> MAX([2, -1.5, 11.5]) 11.5 >>> MAX([2, -1.5, \"Hello\", DATE(2015, 1, 1)], True, [False, \"123\", \"\", 11.5]) 11.5 >>> MAX(True, -123) -123 >>> MAX(\"123\", -123) -123 >>> MAX(\"Hello\", \"123\", DATE(2015, 1, 1)) 0 MAXA # MAXA (value, *more_values) # Returns the maximum numeric value in a dataset. Each argument may be a value of an array. Values that are not numbers, including dates and text representations of numbers, are counted as 0 (zero). Logical value of True is counted as 1, and False as 0. Returns 0 if the arguments contain no numbers. >>> MAXA([2, -1.5, 11.5]) 11.5 >>> MAXA([2, -1.5, \"Hello\", DATE(2015, 1, 1)], True, [False, \"123\", \"\", 11.5]) 11.5 >>> MAXA(True, -123) 1 >>> MAXA(\"123\", -123) 0 >>> MAXA(\"Hello\", \"123\", DATE(2015, 1, 1)) 0 MEDIAN # MEDIAN (value, *more_values) # Returns the median value in a numeric dataset, ignoring non-numerical values. Each argument may be a value or an array. Values that are not numbers, including logical and blank values, and text representations of numbers, are ignored. Produces an error if the arguments contain no numbers. The median is the middle number when all values are sorted. So half of the values in the dataset are less than the median, and half of the values are greater. If there is an even number of values in the dataset, returns the average of the two numbers in the middle. >>> MEDIAN(1, 2, 3, 4, 5) 3 >>> MEDIAN(3, 5, 1, 4, 2) 3 >>> MEDIAN(range(10)) 4.5 >>> MEDIAN(\"Hello\", \"123\", DATE(2015, 1, 1), 12.3) 12.3 >>> MEDIAN(\"Hello\", \"123\", DATE(2015, 1, 1)) Traceback (most recent call last): ... ValueError: MEDIAN requires at least one number MIN # MIN (value, *more_values) # Returns the minimum value in a dataset, ignoring non-numerical values. Each argument may be a value or an array. Values that are not numbers, including logical and blank values, and text representations of numbers, are ignored. Returns 0 if the arguments contain no numbers. >>> MIN([2, -1.5, 11.5]) -1.5 >>> MIN([2, -1.5, \"Hello\", DATE(2015, 1, 1)], True, [False, \"123\", \"\", 11.5]) -1.5 >>> MIN(True, 123) 123 >>> MIN(\"-123\", 123) 123 >>> MIN(\"Hello\", \"123\", DATE(2015, 1, 1)) 0 MINA # MINA (value, *more_values) # Returns the minimum numeric value in a dataset. Each argument may be a value of an array. Values that are not numbers, including dates and text representations of numbers, are counted as 0 (zero). Logical value of True is counted as 1, and False as 0. Returns 0 if the arguments contain no numbers. >>> MINA([2, -1.5, 11.5]) -1.5 >>> MINA([2, -1.5, \"Hello\", DATE(2015, 1, 1)], True, [False, \"123\", \"\", 11.5]) -1.5 >>> MINA(True, 123) 1 >>> MINA(\"-123\", 123) 0 >>> MINA(\"Hello\", \"123\", DATE(2015, 1, 1)) 0 MODE # MODE (value1, value2) # Returns the most commonly occurring value in a dataset. Note This function is not currently implemented in Grist. NEGBINOMDIST # NEGBINOMDIST (num_failures, num_successes, prob_success) # Calculates the probability of drawing a certain number of failures before a certain number of successes given a probability of success in independent trials. Note This function is not currently implemented in Grist. NORMDIST # NORMDIST (x, mean, standard_deviation, cumulative) # Returns the value of the normal distribution function (or normal cumulative distribution function) for a specified value, mean, and standard deviation. Note This function is not currently implemented in Grist. NORMINV # NORMINV (x, mean, standard_deviation) # Returns the value of the inverse normal distribution function for a specified value, mean, and standard deviation. Note This function is not currently implemented in Grist. NORMSDIST # NORMSDIST (x) # Returns the value of the standard normal cumulative distribution function for a specified value. Note This function is not currently implemented in Grist. NORMSINV # NORMSINV (x) # Returns the value of the inverse standard normal distribution function for a specified value. Note This function is not currently implemented in Grist. PEARSON # PEARSON (data_y, data_x) # Calculates r, the Pearson product-moment correlation coefficient of a dataset. Note This function is not currently implemented in Grist. PERCENTILE # PERCENTILE (data, percentile) # Returns the value at a given percentile of a dataset. Note This function is not currently implemented in Grist. PERCENTRANK # PERCENTRANK (data, value, significant_digits=None) # Returns the percentage rank (percentile) of a specified value in a dataset. Note This function is not currently implemented in Grist. PERCENTRANK_EXC # PERCENTRANK_EXC (data, value, significant_digits=None) # Returns the percentage rank (percentile) from 0 to 1 exclusive of a specified value in a dataset. Note This function is not currently implemented in Grist. PERCENTRANK_INC # PERCENTRANK_INC (data, value, significant_digits=None) # Returns the percentage rank (percentile) from 0 to 1 inclusive of a specified value in a dataset. Note This function is not currently implemented in Grist. PERMUT # PERMUT (n, k) # Returns the number of ways to choose some number of objects from a pool of a given size of objects, considering order. Note This function is not currently implemented in Grist. POISSON # POISSON (x, mean, cumulative) # Returns the value of the Poisson distribution function (or Poisson cumulative distribution function) for a specified value and mean. Note This function is not currently implemented in Grist. PROB # PROB (data, probabilities, low_limit, high_limit=None) # Given a set of values and corresponding probabilities, calculates the probability that a value chosen at random falls between two limits. Note This function is not currently implemented in Grist. QUARTILE # QUARTILE (data, quartile_number) # Returns a value nearest to a specified quartile of a dataset. Note This function is not currently implemented in Grist. RANK # RANK (value, data, is_ascending=None) # Returns the rank of a specified value in a dataset. Note This function is not currently implemented in Grist. RANK_AVG # RANK_AVG (value, data, is_ascending=None) # Returns the rank of a specified value in a dataset. If there is more than one entry of the same value in the dataset, the average rank of the entries will be returned. Note This function is not currently implemented in Grist. RANK_EQ # RANK_EQ (value, data, is_ascending=None) # Returns the rank of a specified value in a dataset. If there is more than one entry of the same value in the dataset, the top rank of the entries will be returned. Note This function is not currently implemented in Grist. RSQ # RSQ (data_y, data_x) # Calculates the square of r, the Pearson product-moment correlation coefficient of a dataset. Note This function is not currently implemented in Grist. SKEW # SKEW (value1, value2) # Calculates the skewness of a dataset, which describes the symmetry of that dataset about the mean. Note This function is not currently implemented in Grist. SLOPE # SLOPE (data_y, data_x) # Calculates the slope of the line resulting from linear regression of a dataset. Note This function is not currently implemented in Grist. SMALL # SMALL (data, n) # Returns the nth smallest element from a data set, where n is user-defined. Note This function is not currently implemented in Grist. STANDARDIZE # STANDARDIZE (value, mean, standard_deviation) # Calculates the normalized equivalent of a random variable given mean and standard deviation of the distribution. Note This function is not currently implemented in Grist. STDEV # STDEV (value, *more_values) # Calculates the standard deviation based on a sample, ignoring non-numerical values. >>> STDEV([2, 5, 8, 13, 10]) 4.277849927241488 >>> STDEV([2, 5, 8, 13, 10, True, False, \"Test\"]) 4.277849927241488 >>> STDEV([2, 5, 8, 13, 10], 3, 12, 15) 4.810702354423639 >>> STDEV([2, 5, 8, 13, 10], [3, 12, 15]) 4.810702354423639 >>> STDEV([5]) Traceback (most recent call last): ... ZeroDivisionError: float division by zero STDEVA # STDEVA (value, *more_values) # Calculates the standard deviation based on a sample, setting text to the value 0 . >>> STDEVA([2, 5, 8, 13, 10]) 4.277849927241488 >>> STDEVA([2, 5, 8, 13, 10, True, False, \"Test\"]) 4.969550137731641 >>> STDEVA([2, 5, 8, 13, 10], 1, 0, 0) 4.969550137731641 >>> STDEVA([2, 5, 8, 13, 10], [1, 0, 0]) 4.969550137731641 >>> STDEVA([5]) Traceback (most recent call last): ... ZeroDivisionError: float division by zero STDEVP # STDEVP (value, *more_values) # Calculates the standard deviation based on an entire population, ignoring non-numerical values. >>> STDEVP([2, 5, 8, 13, 10]) 3.8262252939417984 >>> STDEVP([2, 5, 8, 13, 10, True, False, \"Test\"]) 3.8262252939417984 >>> STDEVP([2, 5, 8, 13, 10], 3, 12, 15) 4.5 >>> STDEVP([2, 5, 8, 13, 10], [3, 12, 15]) 4.5 >>> STDEVP([5]) 0.0 STDEVPA # STDEVPA (value, *more_values) # Calculates the standard deviation based on an entire population, setting text to the value 0 . >>> STDEVPA([2, 5, 8, 13, 10]) 3.8262252939417984 >>> STDEVPA([2, 5, 8, 13, 10, True, False, \"Test\"]) 4.648588495446763 >>> STDEVPA([2, 5, 8, 13, 10], 1, 0, 0) 4.648588495446763 >>> STDEVPA([2, 5, 8, 13, 10], [1, 0, 0]) 4.648588495446763 >>> STDEVPA([5]) 0.0 STEYX # STEYX (data_y, data_x) # Calculates the standard error of the predicted y-value for each x in the regression of a dataset. Note This function is not currently implemented in Grist. TDIST # TDIST (x, degrees_freedom, tails) # Calculates the probability for Student\u2019s t-distribution with a given input (x). Note This function is not currently implemented in Grist. TINV # TINV (probability, degrees_freedom) # Calculates the inverse of the two-tailed TDIST function. Note This function is not currently implemented in Grist. TRIMMEAN # TRIMMEAN (data, exclude_proportion) # Calculates the mean of a dataset excluding some proportion of data from the high and low ends of the dataset. Note This function is not currently implemented in Grist. TTEST # TTEST (range1, range2, tails, type) # Returns the probability associated with t-test. Determines whether two samples are likely to have come from the same two underlying populations that have the same mean. Note This function is not currently implemented in Grist. T_INV # T_INV (probability, degrees_freedom) # Calculates the negative inverse of the one-tailed TDIST function. Note This function is not currently implemented in Grist. T_INV_2T # T_INV_2T (probability, degrees_freedom) # Calculates the inverse of the two-tailed TDIST function. Note This function is not currently implemented in Grist. VAR # VAR (value1, value2) # Calculates the variance based on a sample. Note This function is not currently implemented in Grist. VARA # VARA (value1, value2) # Calculates an estimate of variance based on a sample, setting text to the value 0 . Note This function is not currently implemented in Grist. VARP # VARP (value1, value2) # Calculates the variance based on an entire population. Note This function is not currently implemented in Grist. VARPA # VARPA (value1, value2) # Calculates the variance based on an entire population, setting text to the value 0 . Note This function is not currently implemented in Grist. WEIBULL # WEIBULL (x, shape, scale, cumulative) # Returns the value of the Weibull distribution function (or Weibull cumulative distribution function) for a specified shape and scale. Note This function is not currently implemented in Grist. ZTEST # ZTEST (data, value, standard_deviation) # Returns the two-tailed P-value of a Z-test with standard distribution. Note This function is not currently implemented in Grist. Text # CHAR # CHAR (table_number) # Convert a number into a character according to the current Unicode table. Same as unichr(number) . >>> CHAR(65) u'A' >>> CHAR(33) u'!' CLEAN # CLEAN (text) # Returns the text with the non-printable characters removed. This removes both characters with values 0 through 31, and other Unicode characters in the \u201ccontrol characters\u201d category. >>> CLEAN(CHAR(9) + \"Monthly report\" + CHAR(10)) u'Monthly report' CODE # CODE (string) # Returns the numeric Unicode map value of the first character in the string provided. Same as ord(string[0]) . >>> CODE(\"A\") 65 >>> CODE(\"!\") 33 >>> CODE(\"!A\") 33 CONCAT # CONCAT (string, *more_strings) # Joins together any number of text strings into one string. Also available under the name CONCATENATE . Similar to the Python expression \"\".join(array_of_strings) . >>> CONCAT(\"Stream population for \", \"trout\", \" \", \"species\", \" is \", 32, \"/mile.\") u'Stream population for trout species is 32/mile.' >>> CONCAT(\"In \", 4, \" days it is \", datetime.date(2016,1,1)) u'In 4 days it is 2016-01-01' >>> CONCAT(\"abc\") u'abc' >>> CONCAT(0, \"abc\") u'0abc' >>> assert CONCAT(2, u\" cr\u00e8me \", u\"br\u00fbl\u00e9e\") == u'2 cr\u00e8me br\u00fbl\u00e9e' CONCATENATE # CONCATENATE (string, *more_strings) # Joins together any number of text strings into one string. Also available under the name CONCAT . Similar to the Python expression \"\".join(array_of_strings) . >>> CONCATENATE(\"Stream population for \", \"trout\", \" \", \"species\", \" is \", 32, \"/mile.\") u'Stream population for trout species is 32/mile.' >>> CONCATENATE(\"In \", 4, \" days it is \", datetime.date(2016,1,1)) u'In 4 days it is 2016-01-01' >>> CONCATENATE(\"abc\") u'abc' >>> CONCATENATE(0, \"abc\") u'0abc' >>> assert CONCATENATE(2, u\" cr\u00e8me \", u\"br\u00fbl\u00e9e\") == u'2 cr\u00e8me br\u00fbl\u00e9e' >>> assert CONCATENATE(2, \" cr\u00e8me \", u\"br\u00fbl\u00e9e\") == u'2 cr\u00e8me br\u00fbl\u00e9e' >>> assert CONCATENATE(2, \" cr\u00e8me \", \"br\u00fbl\u00e9e\") == u'2 cr\u00e8me br\u00fbl\u00e9e' DOLLAR # DOLLAR (number, decimals=2) # Formats a number into a formatted dollar amount, with decimals rounded to the specified place (. If decimals value is omitted, it defaults to 2. >>> DOLLAR(1234.567) '$1,234.57' >>> DOLLAR(1234.567, -2) '$1,200' >>> DOLLAR(-1234.567, -2) '($1,200)' >>> DOLLAR(-0.123, 4) '($0.1230)' >>> DOLLAR(99.888) '$99.89' >>> DOLLAR(0) '$0.00' >>> DOLLAR(10, 0) '$10' EXACT # EXACT (string1, string2) # Tests whether two strings are identical. Same as string2 == string2 . >>> EXACT(\"word\", \"word\") True >>> EXACT(\"Word\", \"word\") False >>> EXACT(\"w ord\", \"word\") False FIND # FIND (find_text, within_text, start_num=1) # Returns the position at which a string is first found within text. Find is case-sensitive. The returned position is 1 if within_text starts with find_text. Start_num specifies the character at which to start the search, defaulting to 1 (the first character of within_text). If find_text is not found, or start_num is invalid, raises ValueError. >>> FIND(\"M\", \"Miriam McGovern\") 1 >>> FIND(\"m\", \"Miriam McGovern\") 6 >>> FIND(\"M\", \"Miriam McGovern\", 3) 8 >>> FIND(\" #\", \"Hello world # Test\") 12 >>> FIND(\"gle\", \"Google\", 1) 4 >>> FIND(\"GLE\", \"Google\", 1) Traceback (most recent call last): ... ValueError: substring not found >>> FIND(\"page\", \"homepage\") 5 >>> FIND(\"page\", \"homepage\", 6) Traceback (most recent call last): ... ValueError: substring not found FIXED # FIXED (number, decimals=2, no_commas=False) # Formats a number with a fixed number of decimal places (2 by default), and commas. If no_commas is True, then omits the commas. >>> FIXED(1234.567, 1) '1,234.6' >>> FIXED(1234.567, -1) '1,230' >>> FIXED(-1234.567, -1, True) '-1230' >>> FIXED(44.332) '44.33' >>> FIXED(3521.478, 2, False) '3,521.48' >>> FIXED(-3521.478, 1, True) '-3521.5' >>> FIXED(3521.478, 0, True) '3521' >>> FIXED(3521.478, -2, True) '3500' LEFT # LEFT (string, num_chars=1) # Returns a substring of length num_chars from the beginning of the given string. If num_chars is omitted, it is assumed to be 1. Same as string[:num_chars] . >>> LEFT(\"Sale Price\", 4) 'Sale' >>> LEFT('Swededn') 'S' >>> LEFT('Text', -1) Traceback (most recent call last): ... ValueError: num_chars invalid LEN # LEN (text) # Returns the number of characters in a text string, or the number of items in a list. Same as len in python. See Record Set for an example of using len on a list of records. >>> LEN(\"Phoenix, AZ\") 11 >>> LEN(\"\") 0 >>> LEN(\" One \") 11 LOWER # LOWER (text) # Converts a specified string to lowercase. Same as text.lower() . >>> LOWER(\"E. E. Cummings\") 'e. e. cummings' >>> LOWER(\"Apt. 2B\") 'apt. 2b' MID # MID (text, start_num, num_chars) # Returns a segment of a string, starting at start_num. The first character in text has start_num 1. >>> MID(\"Fluid Flow\", 1, 5) 'Fluid' >>> MID(\"Fluid Flow\", 7, 20) 'Flow' >>> MID(\"Fluid Flow\", 20, 5) '' >>> MID(\"Fluid Flow\", 0, 5) Traceback (most recent call last): ... ValueError: start_num invalid PROPER # PROPER (text) # Capitalizes each word in a specified string. It converts the first letter of each word to uppercase, and all other letters to lowercase. Same as text.title() . >>> PROPER('this is a TITLE') 'This Is A Title' >>> PROPER('2-way street') '2-Way Street' >>> PROPER('76BudGet') '76Budget' REGEXEXTRACT # REGEXEXTRACT (text, regular_expression) # Extracts the first part of text that matches regular_expression. >>> REGEXEXTRACT(\"Google Doc 101\", \"[0-9]+\") '101' >>> REGEXEXTRACT(\"The price today is $826.25\", \"[0-9]*\\.[0-9]+[0-9]+\") '826.25' If there is a parenthesized expression, it is returned instead of the whole match. >>> REGEXEXTRACT(\"(Content) between brackets\", \"\\(([A-Za-z]+)\\)\") 'Content' >>> REGEXEXTRACT(\"Foo\", \"Bar\") Traceback (most recent call last): ... ValueError: REGEXEXTRACT text does not match REGEXMATCH # REGEXMATCH (text, regular_expression) # Returns whether a piece of text matches a regular expression. >>> REGEXMATCH(\"Google Doc 101\", \"[0-9]+\") True >>> REGEXMATCH(\"Google Doc\", \"[0-9]+\") False >>> REGEXMATCH(\"The price today is $826.25\", \"[0-9]*\\.[0-9]+[0-9]+\") True >>> REGEXMATCH(\"(Content) between brackets\", \"\\(([A-Za-z]+)\\)\") True >>> REGEXMATCH(\"Foo\", \"Bar\") False REGEXREPLACE # REGEXREPLACE (text, regular_expression, replacement) # Replaces all parts of text matching the given regular expression with replacement text. >>> REGEXREPLACE(\"Google Doc 101\", \"[0-9]+\", \"777\") 'Google Doc 777' >>> REGEXREPLACE(\"Google Doc\", \"[0-9]+\", \"777\") 'Google Doc' >>> REGEXREPLACE(\"The price is $826.25\", \"[0-9]*\\.[0-9]+[0-9]+\", \"315.75\") 'The price is $315.75' >>> REGEXREPLACE(\"(Content) between brackets\", \"\\(([A-Za-z]+)\\)\", \"Word\") 'Word between brackets' >>> REGEXREPLACE(\"Foo\", \"Bar\", \"Baz\") 'Foo' REPLACE # REPLACE (text, position, length, new_text) # Replaces part of a text string with a different text string. Position is counted from 1. >>> REPLACE(\"abcdefghijk\", 6, 5, \"*\") 'abcde*k' >>> REPLACE(\"2009\", 3, 2, \"10\") '2010' >>> REPLACE('123456', 1, 3, '@') '@456' >>> REPLACE('foo', 1, 0, 'bar') 'barfoo' >>> REPLACE('foo', 0, 1, 'bar') Traceback (most recent call last): ... ValueError: position invalid REPT # REPT (text, number_times) # Returns specified text repeated a number of times. Same as text * number_times . The result of the REPT function cannot be longer than 32767 characters, or it raises a ValueError. >>> REPT(\"*-\", 3) '*-*-*-' >>> REPT('-', 10) '----------' >>> REPT('-', 0) '' >>> len(REPT('---', 10000)) 30000 >>> REPT('---', 11000) Traceback (most recent call last): ... ValueError: number_times invalid >>> REPT('-', -1) Traceback (most recent call last): ... ValueError: number_times invalid RIGHT # RIGHT (string, num_chars=1) # Returns a substring of length num_chars from the end of a specified string. If num_chars is omitted, it is assumed to be 1. Same as string[-num_chars:] . >>> RIGHT(\"Sale Price\", 5) 'Price' >>> RIGHT('Stock Number') 'r' >>> RIGHT('Text', 100) 'Text' >>> RIGHT('Text', -1) Traceback (most recent call last): ... ValueError: num_chars invalid SEARCH # SEARCH (find_text, within_text, start_num=1) # Returns the position at which a string is first found within text, ignoring case. Find is case-sensitive. The returned position is 1 if within_text starts with find_text. Start_num specifies the character at which to start the search, defaulting to 1 (the first character of within_text). If find_text is not found, or start_num is invalid, raises ValueError. >>> SEARCH(\"e\", \"Statements\", 6) 7 >>> SEARCH(\"margin\", \"Profit Margin\") 8 >>> SEARCH(\" \", \"Profit Margin\") 7 >>> SEARCH('\"', 'The \"boss\" is here.') 5 >>> SEARCH(\"gle\", \"Google\") 4 >>> SEARCH(\"GLE\", \"Google\") 4 SUBSTITUTE # SUBSTITUTE (text, old_text, new_text, instance_num=None) # Replaces existing text with new text in a string. It is useful when you know the substring of text to replace. Use REPLACE when you know the position of text to replace. If instance_num is given, it specifies which occurrence of old_text to replace. If omitted, all occurrences are replaced. Same as text.replace(old_text, new_text) when instance_num is omitted. >>> SUBSTITUTE(\"Sales Data\", \"Sales\", \"Cost\") u'Cost Data' >>> SUBSTITUTE(\"Quarter 1, 2008\", \"1\", \"2\", 1) u'Quarter 2, 2008' >>> SUBSTITUTE(\"Quarter 1, 2011\", \"1\", \"2\", 3) u'Quarter 1, 2012' T # T (value) # Returns value if value is text, or the empty string when value is not text. >>> T('Text') u'Text' >>> T(826) u'' >>> T('826') u'826' >>> T(False) u'' >>> T('100 points') u'100 points' >>> T(AltText('Text')) u'Text' >>> T(float('nan')) u'' TEXT # TEXT (number, format_type) # Converts a number into text according to a specified format. It is not yet implemented in Grist. Note This function is not currently implemented in Grist. TRIM # TRIM (text) # Removes all spaces from text except for single spaces between words. Note that TRIM does not remove other whitespace such as tab or newline characters. >>> TRIM(\" First Quarter\\n Earnings \") 'First Quarter\\n Earnings' >>> TRIM(\"\") '' UPPER # UPPER (text) # Converts a specified string to uppercase. Same as text.lower() . >>> UPPER(\"e. e. cummings\") 'E. E. CUMMINGS' >>> UPPER(\"Apt. 2B\") 'APT. 2B' VALUE # VALUE (text) # Converts a string in accepted date, time or number formats into a number or date. >>> VALUE(\"$1,000\") 1000 >>> assert VALUE(\"16:48:00\") - VALUE(\"12:00:00\") == datetime.timedelta(0, 17280) >>> VALUE(\"01/01/2012\") datetime.datetime(2012, 1, 1, 0, 0) >>> VALUE(\"\") 0 >>> VALUE(0) 0 >>> VALUE(\"826\") 826 >>> VALUE(\"-826.123123123\") -826.123123123 >>> VALUE(float('nan')) nan >>> VALUE(\"Invalid\") Traceback (most recent call last): ... ValueError: text cannot be parsed to a number >>> VALUE(\"13/13/13\") Traceback (most recent call last): ... ValueError: text cannot be parsed to a number","title":"Function reference"},{"location":"functions/#function-reference","text":"Grist formulas support most Excel functions, as well as the Python programming language. The table below lists Grist-specific functions, and the suite of the included Excel-like functions. In addition, the entire Python standard library is available. For more about using formulas in Grist, see Intro to Formulas . Grist uses Python (version 3.9) for formulas. You can use nearly all features of Python (see Python documentation ). Here are some helpful notes: Python is case-sensitive, including for Grist table and column names. Excel-like functions are always in uppercase. E.g. if is a Python keyword, while IF is an Excel-like function. Compare for equality using == , in place of Excel\u2019s single = (which in Python means assignment). \u201cNot equal\u201d uses != in place of Excel\u2019s <> . You may write multi-line Python in formulas (use Shift + Enter to add lines), including statements, variables, imports, etc. Grist code runs in a secure sandbox, with no access to anything outside your document. Category Functions Grist Record or rec , $Field or rec.Field , $group or rec.group , RecordSet , UserTable , all , lookupOne , lookupRecords Date DATE , DATEADD , DATEDIF , DATEVALUE , DATE_TO_XL , DAY , DAYS , DTIME , EDATE , EOMONTH , HOUR , ISOWEEKNUM , MINUTE , MONTH , NOW , SECOND , TODAY , WEEKDAY , WEEKNUM , XL_TO_DATE , YEAR , YEARFRAC Info CELL , CURRENT_CONVERSION , ISBLANK , ISEMAIL , ISERR , ISERROR , ISLOGICAL , ISNA , ISNONTEXT , ISNUMBER , ISREF , ISREFLIST , ISTEXT , ISURL , N , NA , RECORD , TYPE Logical AND , FALSE , IF , IFERROR , NOT , OR , TRUE Lookup lookupOne , lookupRecords , ADDRESS , CHOOSE , COLUMN , COLUMNS , CONTAINS , GETPIVOTDATA , HLOOKUP , HYPERLINK , INDEX , INDIRECT , LOOKUP , MATCH , OFFSET , ROW , ROWS , SELF_HYPERLINK , VLOOKUP Math ABS , ACOS , ACOSH , ARABIC , ASIN , ASINH , ATAN , ATAN2 , ATANH , CEILING , COMBIN , COS , COSH , DEGREES , EVEN , EXP , FACT , FACTDOUBLE , FLOOR , GCD , INT , LCM , LN , LOG , LOG10 , MOD , MROUND , MULTINOMIAL , ODD , PI , POWER , PRODUCT , QUOTIENT , RADIANS , RAND , RANDBETWEEN , ROMAN , ROUND , ROUNDDOWN , ROUNDUP , SERIESSUM , SIGN , SIN , SINH , SQRT , SQRTPI , SUBTOTAL , SUM , SUMIF , SUMIFS , SUMPRODUCT , SUMSQ , TAN , TANH , TRUNC , UUID Schedule SCHEDULE Stats AVEDEV , AVERAGE , AVERAGEA , AVERAGEIF , AVERAGEIFS , AVERAGE_WEIGHTED , BINOMDIST , CONFIDENCE , CORREL , COUNT , COUNTA , COVAR , CRITBINOM , DEVSQ , EXPONDIST , FDIST , FISHER , FISHERINV , FORECAST , F_DIST , F_DIST_RT , GEOMEAN , HARMEAN , HYPGEOMDIST , INTERCEPT , KURT , LARGE , LOGINV , LOGNORMDIST , MAX , MAXA , MEDIAN , MIN , MINA , MODE , NEGBINOMDIST , NORMDIST , NORMINV , NORMSDIST , NORMSINV , PEARSON , PERCENTILE , PERCENTRANK , PERCENTRANK_EXC , PERCENTRANK_INC , PERMUT , POISSON , PROB , QUARTILE , RANK , RANK_AVG , RANK_EQ , RSQ , SKEW , SLOPE , SMALL , STANDARDIZE , STDEV , STDEVA , STDEVP , STDEVPA , STEYX , TDIST , TINV , TRIMMEAN , TTEST , T_INV , T_INV_2T , VAR , VARA , VARP , VARPA , WEIBULL , ZTEST Text CHAR , CLEAN , CODE , CONCAT , CONCATENATE , DOLLAR , EXACT , FIND , FIXED , LEFT , LEN , LOWER , MID , PROPER , REGEXEXTRACT , REGEXMATCH , REGEXREPLACE , REPLACE , REPT , RIGHT , SEARCH , SUBSTITUTE , T , TEXT , TRIM , UPPER , VALUE","title":""},{"location":"functions/#grist","text":"","title":"Grist"},{"location":"functions/#record","text":"class Record # A Record represents a record of data. It is the primary means of accessing values in formulas. A Record for a particular table has a property for each data and formula column in the table. In a formula, $field is translated to rec.field , where rec is the Record for which the formula is being evaluated. For example: def Full_Name(rec, table): return rec.First_Name + ' ' + rec.LastName def Name_Length(rec, table): return len(rec.Full_Name)","title":"Record"},{"location":"functions/#field","text":"$ Field or rec .Field # Access the field named \u201cField\u201d of the current record. E.g. $First_Name or rec.First_Name .","title":"$Field"},{"location":"functions/#group","text":"$group # In a summary table , $group is a special field containing the list of Records that are summarized by the current summary line. E.g. the formula len($group) counts the number of those records being summarized in each row. See RecordSet for useful properties offered by the returned object. Examples: sum($group.Amount) # Sum of the Amount field in the matching records sum(r.Amount for r in $group) # Same as sum($group.Amount) sum(r.Amount for r in $group if r > 0) # Sum of only the positive amounts sum(r.Shares * r.Price for r in $group) # Sum of shares * price products","title":"$group"},{"location":"functions/#recordset","text":"class RecordSet # A RecordSet represents a collection of records, as returned by Table.lookupRecords() or $group property in summary views. A RecordSet allows iterating through the records: sum(r.Amount for r in Students.lookupRecords(First_Name=\"John\", Last_Name=\"Doe\")) min(r.DueDate for r in Tasks.lookupRecords(Owner=\"Bob\")) RecordSets also provide a convenient way to access the list of values for a particular field for all the records, as record_set.Field . For example, the examples above are equivalent to: sum(Students.lookupRecords(First_Name=\"John\", Last_Name=\"Doe\").Amount) min(Tasks.lookupRecords(Owner=\"Bob\").DueDate) You can get the number of records in a RecordSet using len , e.g. len($group) .","title":"RecordSet"},{"location":"functions/#usertable","text":"class UserTable # Each data table in the document is represented in the code by an instance of UserTable class. These names are always capitalized. A UserTable provides access to all the records in the table, as well as methods to look up particular records. Every table in the document is available to all formulas.","title":"UserTable"},{"location":"functions/#all","text":"UserTable. all # The list of all the records in this table. For example, this evaluates to the number of records in the table Students . len(Students.all) This evaluates to the sum of the Population field for every record in the table Countries . sum(r.Population for r in Countries.all)","title":"all"},{"location":"functions/#lookupone","text":"UserTable. lookupOne (Field_In_Lookup_Table=value, \u2026) # Returns a Record matching the given field=value arguments. The value may be any expression, most commonly a field in the current row (e.g. $SomeField ) or a constant (e.g. a quoted string like \"Some Value\" ). If multiple records match, returns one of them. If none match, returns the special empty record. For example: People.lookupOne(First_Name=\"Lewis\", Last_Name=\"Carroll\") People.lookupOne(Email=$Work_Email)","title":"lookupOne"},{"location":"functions/#lookuprecords","text":"UserTable. lookupRecords (Field_In_Lookup_Table=value, \u2026) # Returns a RecordSet matching the given field=value arguments. The value may be any expression, most commonly a field in the current row (e.g. $SomeField ) or a constant (e.g. a quoted string like \"Some Value\" ) (examples below). If sort_by=field is given, sort the results by that field. For example: People.lookupRecords(Email=$Work_Email) People.lookupRecords(First_Name=\"George\", Last_Name=\"Washington\") People.lookupRecords(Last_Name=\"Johnson\", sort_by=\"First_Name\") See RecordSet for useful properties offered by the returned object. See CONTAINS for an example utilizing UserTable.lookupRecords to find records where a field of a list type (such as Choice List or Reference List ) contains the given value.","title":"lookupRecords"},{"location":"functions/#date","text":"","title":"Date"},{"location":"functions/#date_1","text":"DATE (year, month, day) # Returns the datetime.datetime object that represents a particular date. The DATE function is most useful in formulas where year, month, and day are formulas, not constants. If year is between 0 and 1899 (inclusive), adds 1900 to calculate the year. >>> DATE(108, 1, 2) datetime.date(2008, 1, 2) >>> DATE(2008, 1, 2) datetime.date(2008, 1, 2) If month is greater than 12, rolls into the following year. >>> DATE(2008, 14, 2) datetime.date(2009, 2, 2) If month is less than 1, subtracts that many months plus 1, from the first month in the year. >>> DATE(2008, -3, 2) datetime.date(2007, 9, 2) If day is greater than the number of days in the given month, rolls into the following months. >>> DATE(2008, 1, 35) datetime.date(2008, 2, 4) If day is less than 1, subtracts that many days plus 1, from the first day of the given month. >>> DATE(2008, 1, -15) datetime.date(2007, 12, 16)","title":"DATE"},{"location":"functions/#dateadd","text":"DATEADD (start_date, days=0, months=0, years=0, weeks=0) # Returns the date a given number of days, months, years, or weeks away from start_date . You may specify arguments in any order if you specify argument names. Use negative values to subtract. For example, DATEADD(date, 1) is the same as DATEADD(date, days=1) , ands adds one day to date . DATEADD(date, years=1, days=-1) adds one year minus one day. >>> DATEADD(DATE(2011, 1, 15), 1) datetime.date(2011, 1, 16) >>> DATEADD(DATE(2011, 1, 15), months=1, days=-1) datetime.date(2011, 2, 14) >>> DATEADD(DATE(2011, 1, 15), years=-2, months=1, days=3, weeks=2) datetime.date(2009, 3, 4) >>> DATEADD(DATE(1975, 4, 30), years=50, weeks=-5) datetime.date(2025, 3, 26)","title":"DATEADD"},{"location":"functions/#datedif","text":"DATEDIF (start_date, end_date, unit) # Calculates the number of days, months, or years between two dates. Unit indicates the type of information that you want returned: \u201cY\u201d: The number of complete years in the period. \u201cM\u201d: The number of complete months in the period. \u201cD\u201d: The number of days in the period. \u201cMD\u201d: The difference between the days in start_date and end_date. The months and years of the dates are ignored. \u201cYM\u201d: The difference between the months in start_date and end_date. The days and years of the dates are ignored. \u201cYD\u201d: The difference between the days of start_date and end_date. The years of the dates are ignored. Two complete years in the period (2) >>> DATEDIF(DATE(2001, 1, 1), DATE(2003, 1, 1), \"Y\") 2 440 days between June 1, 2001, and August 15, 2002 (440) >>> DATEDIF(DATE(2001, 6, 1), DATE(2002, 8, 15), \"D\") 440 75 days between June 1 and August 15, ignoring the years of the dates (75) >>> DATEDIF(DATE(2001, 6, 1), DATE(2012, 8, 15), \"YD\") 75 The difference between 1 and 15, ignoring the months and the years of the dates (14) >>> DATEDIF(DATE(2001, 6, 1), DATE(2002, 8, 15), \"MD\") 14","title":"DATEDIF"},{"location":"functions/#datevalue","text":"DATEVALUE (date_string, tz=None) # Converts a date that is stored as text to a datetime object. >>> DATEVALUE(\"1/1/2008\") datetime.datetime(2008, 1, 1, 0, 0, tzinfo=moment.tzinfo('America/New_York')) >>> DATEVALUE(\"30-Jan-2008\") datetime.datetime(2008, 1, 30, 0, 0, tzinfo=moment.tzinfo('America/New_York')) >>> DATEVALUE(\"2008-12-11\") datetime.datetime(2008, 12, 11, 0, 0, tzinfo=moment.tzinfo('America/New_York')) >>> DATEVALUE(\"5-JUL\").replace(year=2000) datetime.datetime(2000, 7, 5, 0, 0, tzinfo=moment.tzinfo('America/New_York')) In case of ambiguity, prefer M/D/Y format. >>> DATEVALUE(\"1/2/3\") datetime.datetime(2003, 1, 2, 0, 0, tzinfo=moment.tzinfo('America/New_York'))","title":"DATEVALUE"},{"location":"functions/#date_to_xl","text":"DATE_TO_XL (date_value) # Converts a Python date or datetime object to the serial number as used by Excel, with December 30, 1899 as serial number 1. See XL_TO_DATE for more explanation. >>> DATE_TO_XL(datetime.date(2008, 1, 1)) 39448.0 >>> DATE_TO_XL(datetime.date(2012, 3, 14)) 40982.0 >>> DATE_TO_XL(datetime.datetime(2012, 3, 14, 1, 30)) 40982.0625","title":"DATE_TO_XL"},{"location":"functions/#day","text":"DAY (date) # Returns the day of a date, as an integer ranging from 1 to 31. Same as date.day . >>> DAY(DATE(2011, 4, 15)) 15 >>> DAY(\"5/31/2012\") 31 >>> DAY(datetime.datetime(1900, 1, 1)) 1","title":"DAY"},{"location":"functions/#days","text":"DAYS (end_date, start_date) # Returns the number of days between two dates. Same as (end_date - start_date).days . >>> DAYS(\"3/15/11\",\"2/1/11\") 42 >>> DAYS(DATE(2011, 12, 31), DATE(2011, 1, 1)) 364 >>> DAYS(\"2/1/11\", \"3/15/11\") -42","title":"DAYS"},{"location":"functions/#dtime","text":"DTIME (value, tz=None) # Returns the value converted to a python datetime object. The value may be a string , date (interpreted as midnight on that day), time (interpreted as a time-of-day today), or an existing datetime . The returned datetime will have its timezone set to the tz argument, or the document\u2019s default timezone when tz is omitted or None. If the input is itself a datetime with the timezone set, it is returned unchanged (no changes to its timezone). >>> DTIME(datetime.date(2017, 1, 1)) datetime.datetime(2017, 1, 1, 0, 0, tzinfo=moment.tzinfo('America/New_York')) >>> DTIME(datetime.date(2017, 1, 1), 'Europe/Paris') datetime.datetime(2017, 1, 1, 0, 0, tzinfo=moment.tzinfo('Europe/Paris')) >>> DTIME(datetime.datetime(2017, 1, 1)) datetime.datetime(2017, 1, 1, 0, 0, tzinfo=moment.tzinfo('America/New_York')) >>> DTIME(datetime.datetime(2017, 1, 1, tzinfo=moment.tzinfo('UTC'))) datetime.datetime(2017, 1, 1, 0, 0, tzinfo=moment.tzinfo('UTC')) >>> DTIME(datetime.datetime(2017, 1, 1, tzinfo=moment.tzinfo('UTC')), 'Europe/Paris') datetime.datetime(2017, 1, 1, 0, 0, tzinfo=moment.tzinfo('UTC')) >>> DTIME(\"1/1/2008\") datetime.datetime(2008, 1, 1, 0, 0, tzinfo=moment.tzinfo('America/New_York'))","title":"DTIME"},{"location":"functions/#edate","text":"EDATE (start_date, months) # Returns the date that is the given number of months before or after start_date . Use EDATE to calculate maturity dates or due dates that fall on the same day of the month as the date of issue. >>> EDATE(DATE(2011, 1, 15), 1) datetime.date(2011, 2, 15) >>> EDATE(DATE(2011, 1, 15), -1) datetime.date(2010, 12, 15) >>> EDATE(DATE(2011, 1, 15), 2) datetime.date(2011, 3, 15) >>> EDATE(DATE(2012, 3, 1), 10) datetime.date(2013, 1, 1) >>> EDATE(DATE(2012, 5, 1), -2) datetime.date(2012, 3, 1)","title":"EDATE"},{"location":"functions/#eomonth","text":"EOMONTH (start_date, months) # Returns the date for the last day of the month that is the indicated number of months before or after start_date. Use EOMONTH to calculate maturity dates or due dates that fall on the last day of the month. >>> EOMONTH(DATE(2011, 1, 1), 1) datetime.date(2011, 2, 28) >>> EOMONTH(DATE(2011, 1, 15), -3) datetime.date(2010, 10, 31) >>> EOMONTH(DATE(2012, 3, 1), 10) datetime.date(2013, 1, 31) >>> EOMONTH(DATE(2012, 5, 1), -2) datetime.date(2012, 3, 31)","title":"EOMONTH"},{"location":"functions/#hour","text":"HOUR (time) # Same as time.hour . >>> HOUR(XL_TO_DATE(0.75)) 18 >>> HOUR(\"7/18/2011 7:45\") 7 >>> HOUR(\"4/21/2012\") 0","title":"HOUR"},{"location":"functions/#isoweeknum","text":"ISOWEEKNUM (date) # Returns the ISO week number of the year for a given date. >>> ISOWEEKNUM(\"3/9/2012\") 10 >>> [ISOWEEKNUM(DATE(2000 + y, 1, 1)) for y in [0,1,2,3,4,5,6,7,8]] [52, 1, 1, 1, 1, 53, 52, 1, 1]","title":"ISOWEEKNUM"},{"location":"functions/#minute","text":"MINUTE (time) # Returns the minutes of datetime , as an integer from 0 to 59. Same as time.minute . >>> MINUTE(XL_TO_DATE(0.75)) 0 >>> MINUTE(\"7/18/2011 7:45\") 45 >>> MINUTE(\"12:59:00 PM\") 59 >>> MINUTE(datetime.time(12, 58, 59)) 58","title":"MINUTE"},{"location":"functions/#month","text":"MONTH (date) # Returns the month of a date represented, as an integer from from 1 (January) to 12 (December). Same as date.month . >>> MONTH(DATE(2011, 4, 15)) 4 >>> MONTH(\"5/31/2012\") 5 >>> MONTH(datetime.datetime(1900, 1, 1)) 1","title":"MONTH"},{"location":"functions/#now","text":"NOW (tz=None) # Returns the datetime object for the current time.","title":"NOW"},{"location":"functions/#second","text":"SECOND (time) # Returns the seconds of datetime , as an integer from 0 to 59. Same as time.second . >>> SECOND(XL_TO_DATE(0.75)) 0 >>> SECOND(\"7/18/2011 7:45:13\") 13 >>> SECOND(datetime.time(12, 58, 59)) 59","title":"SECOND"},{"location":"functions/#today","text":"TODAY (tz=None) # Returns the date object for the current date.","title":"TODAY"},{"location":"functions/#weekday","text":"WEEKDAY (date, return_type=1) # Returns the day of the week corresponding to a date. The day is given as an integer, ranging from 1 (Sunday) to 7 (Saturday), by default. Return_type determines the type of the returned value. 1 (default) - Returns 1 (Sunday) through 7 (Saturday). 2 - Returns 1 (Monday) through 7 (Sunday). 3 - Returns 0 (Monday) through 6 (Sunday). 11 - Returns 1 (Monday) through 7 (Sunday). 12 - Returns 1 (Tuesday) through 7 (Monday). 13 - Returns 1 (Wednesday) through 7 (Tuesday). 14 - Returns 1 (Thursday) through 7 (Wednesday). 15 - Returns 1 (Friday) through 7 (Thursday). 16 - Returns 1 (Saturday) through 7 (Friday). 17 - Returns 1 (Sunday) through 7 (Saturday). >>> WEEKDAY(DATE(2008, 2, 14)) 5 >>> WEEKDAY(DATE(2012, 3, 1)) 5 >>> WEEKDAY(DATE(2012, 3, 1), 1) 5 >>> WEEKDAY(DATE(2012, 3, 1), 2) 4 >>> WEEKDAY(\"3/1/2012\", 3) 3","title":"WEEKDAY"},{"location":"functions/#weeknum","text":"WEEKNUM (date, return_type=1) # Returns the week number of a specific date. For example, the week containing January 1 is the first week of the year, and is numbered week 1. Return_type determines which week is considered the first week of the year. 1 (default) - Week 1 is the first week starting Sunday that contains January 1. 2 - Week 1 is the first week starting Monday that contains January 1. 11 - Week 1 is the first week starting Monday that contains January 1. 12 - Week 1 is the first week starting Tuesday that contains January 1. 13 - Week 1 is the first week starting Wednesday that contains January 1. 14 - Week 1 is the first week starting Thursday that contains January 1. 15 - Week 1 is the first week starting Friday that contains January 1. 16 - Week 1 is the first week starting Saturday that contains January 1. 17 - Week 1 is the first week starting Sunday that contains January 1. 21 - ISO 8601 Approach: Week 1 is the first week starting Monday that contains January 4. Equivalently, it is the week that contains the first Thursday of the year. >>> WEEKNUM(DATE(2012, 3, 9)) 10 >>> WEEKNUM(DATE(2012, 3, 9), 2) 11 >>> WEEKNUM('1/1/1900') 1 >>> WEEKNUM('2/1/1900') 5","title":"WEEKNUM"},{"location":"functions/#xl_to_date","text":"XL_TO_DATE (value, tz=None) # Converts a provided Excel serial number representing a date into a datetime object. Value is interpreted as the number of days since December 30, 1899. (This corresponds to Google Sheets interpretation. Excel starts with Dec. 31, 1899 but wrongly considers 1900 to be a leap year. Excel for Mac should be configured to use 1900 date system, i.e. uncheck \u201cUse the 1904 date system\u201d option.) The returned datetime will have its timezone set to the tz argument, or the document\u2019s default timezone when tz is omitted or None. >>> XL_TO_DATE(41100.1875) datetime.datetime(2012, 7, 10, 4, 30, tzinfo=moment.tzinfo('America/New_York')) >>> XL_TO_DATE(39448) datetime.datetime(2008, 1, 1, 0, 0, tzinfo=moment.tzinfo('America/New_York')) >>> XL_TO_DATE(40982.0625) datetime.datetime(2012, 3, 14, 1, 30, tzinfo=moment.tzinfo('America/New_York'))","title":"XL_TO_DATE"},{"location":"functions/#year","text":"YEAR (date) # Returns the year corresponding to a date as an integer. Same as date.year . >>> YEAR(DATE(2011, 4, 15)) 2011 >>> YEAR(\"5/31/2030\") 2030 >>> YEAR(datetime.datetime(1900, 1, 1)) 1900","title":"YEAR"},{"location":"functions/#yearfrac","text":"YEARFRAC (start_date, end_date, basis=0) # Calculates the fraction of the year represented by the number of whole days between two dates. Basis is the type of day count basis to use. 0 (default) - US (NASD) 30/360 1 - Actual/actual 2 - Actual/360 3 - Actual/365 4 - European 30/360 -1 - Actual/actual (Google Sheets variation) This function is useful for financial calculations. For compatibility with Excel, it defaults to using the NASD standard calendar. For use in non-financial settings, option -1 is likely the best choice. See https://en.wikipedia.org/wiki/360-day_calendar for explanation of the US 30/360 and European 30/360 methods. See http://www.dwheeler.com/yearfrac/ for analysis of Excel\u2019s particular implementation. Basis -1 is similar to 1 , but differs from Excel when dates span both leap and non-leap years. It matches the calculation in Google Sheets, counting the days in each year as a fraction of that year\u2019s length. Fraction of the year between 1/1/2012 and 7/30/12, omitting the Basis argument. >>> \"%.8f\" % YEARFRAC(DATE(2012, 1, 1), DATE(2012, 7, 30)) '0.58055556' Fraction between same dates, using the Actual/Actual basis argument. Because 2012 is a Leap year, it has a 366 day basis. >>> \"%.8f\" % YEARFRAC(DATE(2012, 1, 1), DATE(2012, 7, 30), 1) '0.57650273' Fraction between same dates, using the Actual/365 basis argument. Uses a 365 day basis. >>> \"%.8f\" % YEARFRAC(DATE(2012, 1, 1), DATE(2012, 7, 30), 3) '0.57808219'","title":"YEARFRAC"},{"location":"functions/#info","text":"","title":"Info"},{"location":"functions/#cell","text":"CELL (info_type, reference) # Returns the requested information about the specified cell. This is not implemented in Grist Note This function is not currently implemented in Grist.","title":"CELL"},{"location":"functions/#current_conversion","text":"CURRENT_CONVERSION (rec) # Internal function used by Grist during column type conversions. Not available for use in formulas.","title":"CURRENT_CONVERSION"},{"location":"functions/#isblank","text":"ISBLANK (value) # Returns whether a value refers to an empty cell. It isn\u2019t implemented in Grist. To check for an empty string, use value == \"\" . Note This function is not currently implemented in Grist.","title":"ISBLANK"},{"location":"functions/#isemail","text":"ISEMAIL (value) # Returns whether a value is a valid email address. Note that checking email validity is not an exact science. The technical standard considers many email addresses valid that are not used in practice, and would not be considered valid by most users. Instead, we follow Google Sheets implementation, with some differences, noted below. >>> ISEMAIL(\"Abc.123@example.com\") True >>> ISEMAIL(\"Bob_O-Reilly+tag@example.com\") True >>> ISEMAIL(\"John Doe\") False >>> ISEMAIL(\"john@aol...com\") False","title":"ISEMAIL"},{"location":"functions/#iserr","text":"ISERR (value) # Checks whether a value is an error. In other words, it returns true if using value directly would raise an exception. NOTE: Grist implements this by automatically wrapping the argument to use lazy evaluation. A more Pythonic approach to checking for errors is: try: ... value ... except Exception, err: ... do something about the error ... For example: >>> ISERR(\"Hello\") False","title":"ISERR"},{"location":"functions/#iserror","text":"ISERROR (value) # Checks whether a value is an error or an invalid value. It is similar to ISERR , but also returns true for an invalid value such as NaN or a text value in a Numeric column. NOTE: Grist implements this by automatically wrapping the argument to use lazy evaluation. >>> ISERROR(\"Hello\") False >>> ISERROR(AltText(\"fail\")) True >>> ISERROR(float('nan')) True","title":"ISERROR"},{"location":"functions/#islogical","text":"ISLOGICAL (value) # Checks whether a value is True or False . >>> ISLOGICAL(True) True >>> ISLOGICAL(False) True >>> ISLOGICAL(0) False >>> ISLOGICAL(None) False >>> ISLOGICAL(\"Test\") False","title":"ISLOGICAL"},{"location":"functions/#isna","text":"ISNA (value) # Checks whether a value is the error #N/A . >>> ISNA(float('nan')) True >>> ISNA(0.0) False >>> ISNA('text') False >>> ISNA(float('-inf')) False","title":"ISNA"},{"location":"functions/#isnontext","text":"ISNONTEXT (value) # Checks whether a value is non-textual. >>> ISNONTEXT(\"asdf\") False >>> ISNONTEXT(\"\") False >>> ISNONTEXT(AltText(\"text\")) False >>> ISNONTEXT(17.0) True >>> ISNONTEXT(None) True >>> ISNONTEXT(datetime.date(2011, 1, 1)) True","title":"ISNONTEXT"},{"location":"functions/#isnumber","text":"ISNUMBER (value) # Checks whether a value is a number. >>> ISNUMBER(17) True >>> ISNUMBER(-123.123423) True >>> ISNUMBER(False) True >>> ISNUMBER(float('nan')) True >>> ISNUMBER(float('inf')) True >>> ISNUMBER('17') False >>> ISNUMBER(None) False >>> ISNUMBER(datetime.date(2011, 1, 1)) False","title":"ISNUMBER"},{"location":"functions/#isref","text":"ISREF (value) # Checks whether a value is a table record. For example, if a column person is of type Reference to the People table, then ISREF($person) is True . Similarly, ISREF(People.lookupOne(name=$name)) is True . For any other type of value, ISREF() would evaluate to False . >>> ISREF(17) False >>> ISREF(\"Roger\") False","title":"ISREF"},{"location":"functions/#isreflist","text":"ISREFLIST (value) # Checks whether a value is a RecordSet , the type of values in Reference List columns. For example, if a column people is of type Reference List to the People table, then ISREFLIST($people) is True . Similarly, ISREFLIST(People.lookupRecords(name=$name)) is True . For any other type of value, ISREFLIST() would evaluate to False . >>> ISREFLIST(17) False >>> ISREFLIST(\"Roger\") False","title":"ISREFLIST"},{"location":"functions/#istext","text":"ISTEXT (value) # Checks whether a value is text. >>> ISTEXT(\"asdf\") True >>> ISTEXT(\"\") True >>> ISTEXT(AltText(\"text\")) True >>> ISTEXT(17.0) False >>> ISTEXT(None) False >>> ISTEXT(datetime.date(2011, 1, 1)) False","title":"ISTEXT"},{"location":"functions/#isurl","text":"ISURL (value) # Checks whether a value is a valid URL. It does not need to be fully qualified, or to include \u201chttp://\u201d and \u201cwww\u201d. It does not follow a standard, but attempts to work similarly to ISURL in Google Sheets, and to return True for text that is likely a URL. Valid protocols include ftp, http, https, gopher, mailto, news, telnet, and aim. >>> ISURL(\"http://www.getgrist.com\") True >>> ISURL(\"https://foo.com/test_(wikipedia)#cite-1\") True >>> ISURL(\"mailto://user@example.com\") True >>> ISURL(\"http:///a\") False","title":"ISURL"},{"location":"functions/#n","text":"N (value) # Returns the value converted to a number. True/False are converted to 1/0. A date is converted to Excel-style serial number of the date. Anything else is converted to 0. >>> N(7) 7 >>> N(7.1) 7.1 >>> N(\"Even\") 0 >>> N(\"7\") 0 >>> N(True) 1 >>> N(datetime.datetime(2011, 4, 17)) 40650.0","title":"N"},{"location":"functions/#na","text":"NA () # Returns the \u201cvalue not available\u201d error, #N/A . >>> math.isnan(NA()) True","title":"NA"},{"location":"functions/#record_1","text":"RECORD (record_or_list, dates_as_iso=False, expand_refs=0) # Returns a Python dictionary with all fields in the given record. If a list of records is given, returns a list of corresponding Python dictionaries. If dates_as_iso is set, Date and DateTime values are converted to string using ISO 8601 format. If expand_refs is set to 1 or higher, Reference values are replaced with a RECORD representation of the referenced record, expanding the given number of levels. Error values present in cells of the record are replaced with None value, and a special key of \u201c error \u201d gets added containing the error messages for those cells. For example: {\"Ratio\": None, \"_error_\": {\"Ratio\": \"ZeroDivisionError: integer division or modulo by zero\"}} Note that care is needed to avoid circular references when using RECORD(), since it creates a dependency on every cell in the record. In case of RECORD(rec), the cell containing this call will be omitted from the resulting dictionary. For example: RECORD($Person) RECORD(rec) RECORD(People.lookupOne(First_Name=\"Alice\")) RECORD(People.lookupRecords(Department=\"HR\"))","title":"RECORD"},{"location":"functions/#type","text":"TYPE (value) # Returns a number associated with the type of data passed into the function. This is not implemented in Grist. Use isinstance(value, type) or type(value) . Note This function is not currently implemented in Grist.","title":"TYPE"},{"location":"functions/#logical","text":"","title":"Logical"},{"location":"functions/#and","text":"AND (logical_expression, *logical_expressions) # Returns True if all of the arguments are logically true, and False if any are false. Same as all([value1, value2, ...]) . >>> AND(1) True >>> AND(0) False >>> AND(1, 1) True >>> AND(1,2,3,4) True >>> AND(1,2,3,4,0) False","title":"AND"},{"location":"functions/#false","text":"FALSE () # Returns the logical value False . You may also use the value False directly. This function is provided primarily for compatibility with other spreadsheet programs. >>> FALSE() False","title":"FALSE"},{"location":"functions/#if","text":"IF (logical_expression, value_if_true, value_if_false) # Returns one value if a logical expression is True and another if it is False . The equivalent Python expression is: value_if_true if logical_expression else value_if_false Since Grist supports multi-line formulas, you may also use Python blocks such as: if logical_expression: return value_if_true else: return value_if_false NOTE: Grist follows Excel model by only evaluating one of the value expressions, by automatically wrapping the expressions to use lazy evaluation. This allows IF(False, 1/0, 1) to evaluate to 1 rather than raise an exception. >>> IF(12, \"Yes\", \"No\") 'Yes' >>> IF(None, \"Yes\", \"No\") 'No' >>> IF(True, 0.85, 0.0) 0.85 >>> IF(False, 0.85, 0.0) 0.0","title":"IF"},{"location":"functions/#iferror","text":"IFERROR (value, value_if_error=\u2019\u2018) # Returns the first argument if it is not an error value, otherwise returns the second argument if present, or a blank if the second argument is absent. NOTE: Grist handles values that raise an exception by wrapping them to use lazy evaluation. >>> IFERROR(float('nan'), \"**NAN**\") '**NAN**' >>> IFERROR(17.17, \"**NAN**\") 17.17 >>> IFERROR(\"Text\") 'Text' >>> IFERROR(AltText(\"hello\")) ''","title":"IFERROR"},{"location":"functions/#not","text":"NOT (logical_expression) # True . Same as not logical_expression . >>> NOT(123) False >>> NOT(0) True","title":"NOT"},{"location":"functions/#or","text":"OR (logical_expression, *logical_expressions) # Returns True if any of the arguments is logically true, and false if all of the arguments are false. Same as any([value1, value2, ...]) . >>> OR(1) True >>> OR(0) False >>> OR(1, 1) True >>> OR(0, 1) True >>> OR(0, 0) False >>> OR(0,False,0.0,\"\",None) False >>> OR(0,None,3,0) True","title":"OR"},{"location":"functions/#true","text":"TRUE () # Returns the logical value True . You may also use the value True directly. This function is provided primarily for compatibility with other spreadsheet programs. >>> TRUE() True","title":"TRUE"},{"location":"functions/#lookup","text":"","title":"Lookup"},{"location":"functions/#lookupone_1","text":"UserTable. lookupOne (Field_In_Lookup_Table=value, \u2026) # Returns a Record matching the given field=value arguments. The value may be any expression, most commonly a field in the current row (e.g. $SomeField ) or a constant (e.g. a quoted string like \"Some Value\" ). If multiple records match, returns one of them. If none match, returns the special empty record. For example: People.lookupOne(First_Name=\"Lewis\", Last_Name=\"Carroll\") People.lookupOne(Email=$Work_Email)","title":"lookupOne"},{"location":"functions/#lookuprecords_1","text":"UserTable. lookupRecords (Field_In_Lookup_Table=value, \u2026) # Returns a RecordSet matching the given field=value arguments. The value may be any expression, most commonly a field in the current row (e.g. $SomeField ) or a constant (e.g. a quoted string like \"Some Value\" ) (examples below). If sort_by=field is given, sort the results by that field. For example: People.lookupRecords(Email=$Work_Email) People.lookupRecords(First_Name=\"George\", Last_Name=\"Washington\") People.lookupRecords(Last_Name=\"Johnson\", sort_by=\"First_Name\") See RecordSet for useful properties offered by the returned object. See CONTAINS for an example utilizing UserTable.lookupRecords to find records where a field of a list type (such as Choice List or Reference List ) contains the given value.","title":"lookupRecords"},{"location":"functions/#address","text":"ADDRESS (row, column, absolute_relative_mode, use_a1_notation, sheet) # Returns a cell reference as a string. Note This function is not currently implemented in Grist.","title":"ADDRESS"},{"location":"functions/#choose","text":"CHOOSE (index, choice1, choice2) # Returns an element from a list of choices based on index. Note This function is not currently implemented in Grist.","title":"CHOOSE"},{"location":"functions/#column","text":"COLUMN (cell_reference=None) # Returns the column number of a specified cell, with A=1 . Note This function is not currently implemented in Grist.","title":"COLUMN"},{"location":"functions/#columns","text":"COLUMNS (range) # Returns the number of columns in a specified array or range. Note This function is not currently implemented in Grist.","title":"COLUMNS"},{"location":"functions/#contains","text":"CONTAINS (value) # Use this marker with UserTable.lookupRecords to find records where a field of a list type (such as Choice List or Reference List ) contains the given value. For example: MoviesTable.lookupRecords(genre=CONTAINS(\"Drama\")) will return records in MoviesTable where the column genre is a list or other container such as [\"Comedy\", \"Drama\"] , i.e. \"Drama\" in $genre . Note that the column being looked up (e.g. genre ) must have values of a container type such as list, tuple, or set. In particular the values mustn\u2019t be strings, e.g. \"Comedy-Drama\" won\u2019t match even though \"Drama\" in \"Comedy-Drama\" is True in Python. It also won\u2019t match substrings within container elements, e.g. [\"Comedy-Drama\"] .","title":"CONTAINS"},{"location":"functions/#getpivotdata","text":"GETPIVOTDATA (value_name, any_pivot_table_cell, original_column_1, pivot_item_1=None, *args) # Extracts an aggregated value from a pivot table that corresponds to the specified row and column headings. Note This function is not currently implemented in Grist.","title":"GETPIVOTDATA"},{"location":"functions/#hlookup","text":"HLOOKUP (search_key, range, index, is_sorted) # Horizontal lookup. Searches across the first row of a range for a key and returns the value of a specified cell in the column found. Note This function is not currently implemented in Grist.","title":"HLOOKUP"},{"location":"functions/#hyperlink","text":"HYPERLINK (url, link_label) # Creates a hyperlink inside a cell. Note This function is not currently implemented in Grist.","title":"HYPERLINK"},{"location":"functions/#index","text":"INDEX (reference, row, column) # Returns the content of a cell, specified by row and column offset. Note This function is not currently implemented in Grist.","title":"INDEX"},{"location":"functions/#indirect","text":"INDIRECT (cell_reference_as_string) # Returns a cell reference specified by a string. Note This function is not currently implemented in Grist.","title":"INDIRECT"},{"location":"functions/#lookup_1","text":"LOOKUP (search_key, search_range_or_search_result_array, result_range=None) # Looks through a row or column for a key and returns the value of the cell in a result range located in the same position as the search row or column. Note This function is not currently implemented in Grist.","title":"LOOKUP"},{"location":"functions/#match","text":"MATCH (search_key, range, search_type) # Returns the relative position of an item in a range that matches a specified value. Note This function is not currently implemented in Grist.","title":"MATCH"},{"location":"functions/#offset","text":"OFFSET (cell_reference, offset_rows, offset_columns, height, width) # Returns a range reference shifted a specified number of rows and columns from a starting cell reference. Note This function is not currently implemented in Grist.","title":"OFFSET"},{"location":"functions/#row","text":"ROW (cell_reference) # Returns the row number of a specified cell. Note This function is not currently implemented in Grist.","title":"ROW"},{"location":"functions/#rows","text":"ROWS (range) # Returns the number of rows in a specified array or range. Note This function is not currently implemented in Grist.","title":"ROWS"},{"location":"functions/#self_hyperlink","text":"SELF_HYPERLINK (label=None, page=None, **kwargs) # Creates a link to the current document. All parameters are optional. The returned string is in URL format, optionally preceded by a label and a space (the format expected for Grist Text columns with the HyperLink option enabled). A numeric page number can be supplied, which will create a link to the specified page. To find the numeric page number you need, visit a page and examine its URL for a /p/NN part. Any number of arguments of the form LinkKey_NAME may be provided, to set user.LinkKey.NAME values that will be available in access rules. For example, if a rule allows users to view rows when user.LinkKey.Code == rec.Code , we might want to create links with SELF_HYPERLINK(LinkKey_Code=$Code) . >>> SELF_HYPERLINK() u'https://docs.getgrist.com/sbaltsirg/Example' >>> SELF_HYPERLINK(label='doc') u'doc https://docs.getgrist.com/sbaltsirg/Example' >>> SELF_HYPERLINK(page=2) u'https://docs.getgrist.com/sbaltsirg/Example/p/2' >>> SELF_HYPERLINK(LinkKey_Code='X1234') u'https://docs.getgrist.com/sbaltsirg/Example?Code_=X1234' >>> SELF_HYPERLINK(label='order', page=3, LinkKey_Code='X1234', LinkKey_Name='Bi Ngo') u'order https://docs.getgrist.com/sbaltsirg/Example/p/3?Code_=X1234&Name_=Bi+Ngo' >>> SELF_HYPERLINK(Linky_Link='Link') Traceback (most recent call last): ... TypeError: unexpected keyword argument 'Linky_Link' (not of form LinkKey_NAME)","title":"SELF_HYPERLINK"},{"location":"functions/#vlookup","text":"VLOOKUP (table, **field_value_pairs) # Vertical lookup. Searches the given table for a record matching the given field=value arguments. If multiple records match, returns one of them. If none match, returns the special empty record. The returned object is a record whose fields are available using .field syntax. For example, VLOOKUP(Employees, EmployeeID=$EmpID).Salary . Note that VLOOKUP isn\u2019t commonly needed in Grist, since Reference columns are the best way to link data between tables, and allow simple efficient usage such as $Person.Age . VLOOKUP is exactly quivalent to table.lookupOne(**field_value_pairs) . See lookupOne . For example: VLOOKUP(People, First_Name=\"Lewis\", Last_Name=\"Carroll\") VLOOKUP(People, First_Name=\"Lewis\", Last_Name=\"Carroll\").Age","title":"VLOOKUP"},{"location":"functions/#math","text":"","title":"Math"},{"location":"functions/#abs","text":"ABS (value) # Returns the absolute value of a number. >>> ABS(2) 2 >>> ABS(-2) 2 >>> ABS(-4) 4","title":"ABS"},{"location":"functions/#acos","text":"ACOS (value) # Returns the inverse cosine of a value, in radians. >>> round(ACOS(-0.5), 9) 2.094395102 >>> round(ACOS(-0.5)*180/PI(), 10) 120.0","title":"ACOS"},{"location":"functions/#acosh","text":"ACOSH (value) # Returns the inverse hyperbolic cosine of a number. >>> ACOSH(1) 0.0 >>> round(ACOSH(10), 7) 2.9932228","title":"ACOSH"},{"location":"functions/#arabic","text":"ARABIC (roman_numeral) # Computes the value of a Roman numeral. >>> ARABIC(\"LVII\") 57 >>> ARABIC('mcmxii') 1912","title":"ARABIC"},{"location":"functions/#asin","text":"ASIN (value) # Returns the inverse sine of a value, in radians. >>> round(ASIN(-0.5), 9) -0.523598776 >>> round(ASIN(-0.5)*180/PI(), 10) -30.0 >>> round(DEGREES(ASIN(-0.5)), 10) -30.0","title":"ASIN"},{"location":"functions/#asinh","text":"ASINH (value) # Returns the inverse hyperbolic sine of a number. >>> round(ASINH(-2.5), 9) -1.647231146 >>> round(ASINH(10), 9) 2.99822295","title":"ASINH"},{"location":"functions/#atan","text":"ATAN (value) # Returns the inverse tangent of a value, in radians. >>> round(ATAN(1), 9) 0.785398163 >>> ATAN(1)*180/PI() 45.0 >>> DEGREES(ATAN(1)) 45.0","title":"ATAN"},{"location":"functions/#atan2","text":"ATAN2 (x, y) # Returns the angle between the x-axis and a line segment from the origin (0,0) to specified coordinate pair ( x , y ), in radians. >>> round(ATAN2(1, 1), 9) 0.785398163 >>> round(ATAN2(-1, -1), 9) -2.35619449 >>> ATAN2(-1, -1)*180/PI() -135.0 >>> DEGREES(ATAN2(-1, -1)) -135.0 >>> round(ATAN2(1,2), 9) 1.107148718","title":"ATAN2"},{"location":"functions/#atanh","text":"ATANH (value) # Returns the inverse hyperbolic tangent of a number. >>> round(ATANH(0.76159416), 9) 1.00000001 >>> round(ATANH(-0.1), 9) -0.100335348","title":"ATANH"},{"location":"functions/#ceiling","text":"CEILING (value, factor=1) # Rounds a number up to the nearest multiple of factor, or the nearest integer if the factor is omitted or 1. >>> CEILING(2.5, 1) 3 >>> CEILING(-2.5, -2) -4 >>> CEILING(-2.5, 2) -2 >>> CEILING(1.5, 0.1) 1.5 >>> CEILING(0.234, 0.01) 0.24","title":"CEILING"},{"location":"functions/#combin","text":"COMBIN (n, k) # Returns the number of ways to choose some number of objects from a pool of a given size of objects. >>> COMBIN(8,2) 28 >>> COMBIN(4,2) 6 >>> COMBIN(10,7) 120","title":"COMBIN"},{"location":"functions/#cos","text":"COS (angle) # Returns the cosine of an angle provided in radians. >>> round(COS(1.047), 7) 0.5001711 >>> round(COS(60*PI()/180), 10) 0.5 >>> round(COS(RADIANS(60)), 10) 0.5","title":"COS"},{"location":"functions/#cosh","text":"COSH (value) # Returns the hyperbolic cosine of any real number. >>> round(COSH(4), 6) 27.308233 >>> round(COSH(EXP(1)), 7) 7.6101251","title":"COSH"},{"location":"functions/#degrees","text":"DEGREES (angle) # Converts an angle value in radians to degrees. >>> round(DEGREES(ACOS(-0.5)), 10) 120.0 >>> DEGREES(PI()) 180.0","title":"DEGREES"},{"location":"functions/#even","text":"EVEN (value) # Rounds a number up to the nearest even integer, rounding away from zero. >>> EVEN(1.5) 2 >>> EVEN(3) 4 >>> EVEN(2) 2 >>> EVEN(-1) -2","title":"EVEN"},{"location":"functions/#exp","text":"EXP (exponent) # Returns Euler\u2019s number, e (~2.718) raised to a power. >>> round(EXP(1), 8) 2.71828183 >>> round(EXP(2), 7) 7.3890561","title":"EXP"},{"location":"functions/#fact","text":"FACT (value) # Returns the factorial of a number. >>> FACT(5) 120 >>> FACT(1.9) 1 >>> FACT(0) 1 >>> FACT(1) 1 >>> FACT(-1) Traceback (most recent call last): ... ValueError: factorial() not defined for negative values","title":"FACT"},{"location":"functions/#factdouble","text":"FACTDOUBLE (value) # Returns the \u201cdouble factorial\u201d of a number. >>> FACTDOUBLE(6) 48 >>> FACTDOUBLE(7) 105 >>> FACTDOUBLE(3) 3 >>> FACTDOUBLE(4) 8","title":"FACTDOUBLE"},{"location":"functions/#floor","text":"FLOOR (value, factor=1) # Rounds a number down to the nearest integer multiple of specified significance. >>> FLOOR(3.7,2) 2 >>> FLOOR(-2.5,-2) -2 >>> FLOOR(2.5,-2) Traceback (most recent call last): ... ValueError: factor argument invalid >>> FLOOR(1.58,0.1) 1.5 >>> FLOOR(0.234,0.01) 0.23","title":"FLOOR"},{"location":"functions/#gcd","text":"GCD (value1, *more_values) # Returns the greatest common divisor of one or more integers. >>> GCD(5, 2) 1 >>> GCD(24, 36) 12 >>> GCD(7, 1) 1 >>> GCD(5, 0) 5 >>> GCD(0, 5) 5 >>> GCD(5) 5 >>> GCD(14, 42, 21) 7","title":"GCD"},{"location":"functions/#int","text":"INT (value) # Rounds a number down to the nearest integer that is less than or equal to it. >>> INT(8.9) 8 >>> INT(-8.9) -9 >>> 19.5-INT(19.5) 0.5","title":"INT"},{"location":"functions/#lcm","text":"LCM (value1, *more_values) # Returns the least common multiple of one or more integers. >>> LCM(5, 2) 10 >>> LCM(24, 36) 72 >>> LCM(0, 5) 0 >>> LCM(5) 5 >>> LCM(10, 100) 100 >>> LCM(12, 18) 36 >>> LCM(12, 18, 24) 72","title":"LCM"},{"location":"functions/#ln","text":"LN (value) # Returns the the logarithm of a number, base e (Euler\u2019s number). >>> round(LN(86), 7) 4.4543473 >>> round(LN(2.7182818), 7) 1.0 >>> round(LN(EXP(3)), 10) 3.0","title":"LN"},{"location":"functions/#log","text":"LOG (value, base=10) # Returns the the logarithm of a number given a base. >>> LOG(10) 1.0 >>> LOG(8, 2) 3.0 >>> round(LOG(86, 2.7182818), 7) 4.4543473","title":"LOG"},{"location":"functions/#log10","text":"LOG10 (value) # Returns the the logarithm of a number, base 10. >>> round(LOG10(86), 9) 1.934498451 >>> LOG10(10) 1.0 >>> LOG10(100000) 5.0 >>> LOG10(10**5) 5.0","title":"LOG10"},{"location":"functions/#mod","text":"MOD (dividend, divisor) # Returns the result of the modulo operator, the remainder after a division operation. >>> MOD(3, 2) 1 >>> MOD(-3, 2) 1 >>> MOD(3, -2) -1 >>> MOD(-3, -2) -1","title":"MOD"},{"location":"functions/#mround","text":"MROUND (value, factor) # Rounds one number to the nearest integer multiple of another. >>> MROUND(10, 3) 9 >>> MROUND(-10, -3) -9 >>> round(MROUND(1.3, 0.2), 10) 1.4 >>> MROUND(5, -2) Traceback (most recent call last): ... ValueError: factor argument invalid","title":"MROUND"},{"location":"functions/#multinomial","text":"MULTINOMIAL (value1, *more_values) # Returns the factorial of the sum of values divided by the product of the values\u2019 factorials. >>> MULTINOMIAL(2, 3, 4) 1260 >>> MULTINOMIAL(3) 1 >>> MULTINOMIAL(1,2,3) 60 >>> MULTINOMIAL(0,2,4,6) 13860","title":"MULTINOMIAL"},{"location":"functions/#odd","text":"ODD (value) # Rounds a number up to the nearest odd integer. >>> ODD(1.5) 3 >>> ODD(3) 3 >>> ODD(2) 3 >>> ODD(-1) -1 >>> ODD(-2) -3","title":"ODD"},{"location":"functions/#pi","text":"PI () # Returns the value of Pi to 14 decimal places. >>> round(PI(), 9) 3.141592654 >>> round(PI()/2, 9) 1.570796327 >>> round(PI()*9, 8) 28.27433388","title":"PI"},{"location":"functions/#power","text":"POWER (base, exponent) # Returns a number raised to a power. >>> POWER(5,2) 25.0 >>> round(POWER(98.6,3.2), 3) 2401077.222 >>> round(POWER(4,5.0/4), 9) 5.656854249","title":"POWER"},{"location":"functions/#product","text":"PRODUCT (factor1, *more_factors) # Returns the result of multiplying a series of numbers together. Each argument may be a number or an array. >>> PRODUCT([5,15,30]) 2250 >>> PRODUCT([5,15,30], 2) 4500 >>> PRODUCT(5,15,[30],[2]) 4500","title":"PRODUCT"},{"location":"functions/#quotient","text":"QUOTIENT (dividend, divisor) # Returns one number divided by another, without the remainder. >>> QUOTIENT(5, 2) 2 >>> QUOTIENT(4.5, 3.1) 1 >>> QUOTIENT(-10, 3) -3","title":"QUOTIENT"},{"location":"functions/#radians","text":"RADIANS (angle) # Converts an angle value in degrees to radians. >>> round(RADIANS(270), 6) 4.712389","title":"RADIANS"},{"location":"functions/#rand","text":"RAND () # Returns a random number between 0 inclusive and 1 exclusive.","title":"RAND"},{"location":"functions/#randbetween","text":"RANDBETWEEN (low, high) # Returns a uniformly random integer between two values, inclusive.","title":"RANDBETWEEN"},{"location":"functions/#roman","text":"ROMAN (number, form_unused=None) # Formats a number in Roman numerals. The second argument is ignored in this implementation. >>> ROMAN(499,0) 'CDXCIX' >>> ROMAN(499.2,0) 'CDXCIX' >>> ROMAN(57) 'LVII' >>> ROMAN(1912) 'MCMXII'","title":"ROMAN"},{"location":"functions/#round","text":"ROUND (value, places=0) # Rounds a number to a certain number of decimal places, by default to the nearest whole number if the number of places is not given. Rounds away from zero (\u2018up\u2019 for positive numbers) in the case of a tie, i.e. when the last digit is 5. >>> ROUND(1.4) 1.0 >>> ROUND(1.5) 2.0 >>> ROUND(2.5) 3.0 >>> ROUND(-2.5) -3.0 >>> ROUND(2.15, 1) 2.2 >>> ROUND(-1.475, 2) -1.48 >>> ROUND(21.5, -1) 20.0 >>> ROUND(626.3,-3) 1000.0 >>> ROUND(1.98,-1) 0.0 >>> ROUND(-50.55,-2) -100.0 >>> ROUND(0) 0.0","title":"ROUND"},{"location":"functions/#rounddown","text":"ROUNDDOWN (value, places=0) # Rounds a number to a certain number of decimal places, always rounding down towards zero. >>> ROUNDDOWN(3.2, 0) 3 >>> ROUNDDOWN(76.9,0) 76 >>> ROUNDDOWN(3.14159, 3) 3.141 >>> ROUNDDOWN(-3.14159, 1) -3.1 >>> ROUNDDOWN(31415.92654, -2) 31400","title":"ROUNDDOWN"},{"location":"functions/#roundup","text":"ROUNDUP (value, places=0) # Rounds a number to a certain number of decimal places, always rounding up away from zero. >>> ROUNDUP(3.2,0) 4 >>> ROUNDUP(76.9,0) 77 >>> ROUNDUP(3.14159, 3) 3.142 >>> ROUNDUP(-3.14159, 1) -3.2 >>> ROUNDUP(31415.92654, -2) 31500","title":"ROUNDUP"},{"location":"functions/#seriessum","text":"SERIESSUM (x, n, m, a) # Given parameters x, n, m, and a, returns the power series sum a_1 x^n + a_2 x^(n+m) + \u2026 + a_i*x^(n+(i-1)m), where i is the number of entries in range a . >>> SERIESSUM(1,0,1,1) 1 >>> SERIESSUM(2,1,0,[1,2,3]) 12 >>> SERIESSUM(-3,1,1,[2,4,6]) -132 >>> round(SERIESSUM(PI()/4,0,2,[1,-1./FACT(2),1./FACT(4),-1./FACT(6)]), 6) 0.707103","title":"SERIESSUM"},{"location":"functions/#sign","text":"SIGN (value) # Given an input number, returns -1 if it is negative, 1 if positive, and 0 if it is zero. >>> SIGN(10) 1 >>> SIGN(4.0-4.0) 0 >>> SIGN(-0.00001) -1","title":"SIGN"},{"location":"functions/#sin","text":"SIN (angle) # Returns the sine of an angle provided in radians. >>> round(SIN(PI()), 10) 0.0 >>> SIN(PI()/2) 1.0 >>> round(SIN(30*PI()/180), 10) 0.5 >>> round(SIN(RADIANS(30)), 10) 0.5","title":"SIN"},{"location":"functions/#sinh","text":"SINH (value) # Returns the hyperbolic sine of any real number. >>> round(2.868*SINH(0.0342*1.03), 7) 0.1010491","title":"SINH"},{"location":"functions/#sqrt","text":"SQRT (value) # Returns the positive square root of a positive number. >>> SQRT(16) 4.0 >>> SQRT(-16) Traceback (most recent call last): ... ValueError: math domain error >>> SQRT(ABS(-16)) 4.0","title":"SQRT"},{"location":"functions/#sqrtpi","text":"SQRTPI (value) # Returns the positive square root of the product of Pi and the given positive number. >>> round(SQRTPI(1), 6) 1.772454 >>> round(SQRTPI(2), 6) 2.506628","title":"SQRTPI"},{"location":"functions/#subtotal","text":"SUBTOTAL (function_code, range1, range2) # Returns a subtotal for a vertical range of cells using a specified aggregation function. Note This function is not currently implemented in Grist.","title":"SUBTOTAL"},{"location":"functions/#sum","text":"SUM (value1, *more_values) # Returns the sum of a series of numbers. Each argument may be a number or an array. Non-numeric values are ignored. >>> SUM([5,15,30]) 50 >>> SUM([5.,15,30], 2) 52.0 >>> SUM(5,15,[30],[2]) 52","title":"SUM"},{"location":"functions/#sumif","text":"SUMIF (records, criterion, sum_range) # Returns a conditional sum across a range. Note This function is not currently implemented in Grist.","title":"SUMIF"},{"location":"functions/#sumifs","text":"SUMIFS (sum_range, criteria_range1, criterion1, *args) # Returns the sum of a range depending on multiple criteria. Note This function is not currently implemented in Grist.","title":"SUMIFS"},{"location":"functions/#sumproduct","text":"SUMPRODUCT (array1, *more_arrays) # Multiplies corresponding components in two equally-sized arrays, and returns the sum of those products. >>> SUMPRODUCT([3,8,1,4,6,9], [2,6,5,7,7,3]) 156 >>> SUMPRODUCT([], [], []) 0 >>> SUMPRODUCT([-0.25], [-2], [-3]) -1.5 >>> SUMPRODUCT([-0.25, -0.25], [-2, -2], [-3, -3]) -3.0","title":"SUMPRODUCT"},{"location":"functions/#sumsq","text":"SUMSQ (value1, value2) # Returns the sum of the squares of a series of numbers and/or cells. Note This function is not currently implemented in Grist.","title":"SUMSQ"},{"location":"functions/#tan","text":"TAN (angle) # Returns the tangent of an angle provided in radians. >>> round(TAN(0.785), 8) 0.99920399 >>> round(TAN(45*PI()/180), 10) 1.0 >>> round(TAN(RADIANS(45)), 10) 1.0","title":"TAN"},{"location":"functions/#tanh","text":"TANH (value) # Returns the hyperbolic tangent of any real number. >>> round(TANH(-2), 6) -0.964028 >>> TANH(0) 0.0 >>> round(TANH(0.5), 6) 0.462117","title":"TANH"},{"location":"functions/#trunc","text":"TRUNC (value, places=0) # Truncates a number to a certain number of significant digits by omitting less significant digits. >>> TRUNC(8.9) 8 >>> TRUNC(-8.9) -8 >>> TRUNC(0.45) 0","title":"TRUNC"},{"location":"functions/#uuid","text":"UUID () # Generate a random UUID-formatted string identifier. Since UUID() produces a different value each time it\u2019s called, it is best to use it in trigger formula for new records. This would only calculate UUID() once and freeze the calculated value. By contrast, a regular formula may get recalculated any time the document is reloaded, producing a different value for UUID() each time.","title":"UUID"},{"location":"functions/#schedule","text":"","title":"Schedule"},{"location":"functions/#schedule_1","text":"SCHEDULE (schedule, start=None, count=10, end=None) # Returns the list of datetime objects generated according to the schedule string. Starts at start , which defaults to NOW(). Generates at most count results (10 by default). If end is given, stops there. The schedule has the format \u201cINTERVAL: SLOTS, \u2026\u201d. For example: annual: Jan-15, Apr-15, Jul-15 -- Three times a year on given dates at midnight. annual: 1/15, 4/15, 7/15 -- Same as above. monthly: /1 2pm, /15 2pm -- The 1st and the 15th of each month, at 2pm. 3-months: /10, +1m /20 -- Every 3 months on the 10th of month 1, 20th of month 2. weekly: Mo 9am, Tu 9am, Fr 2pm -- Three times a week at specified times. 2-weeks: Mo, +1w Tu -- Every 2 weeks on Monday of week 1, Tuesday of week 2. daily: 07:30, 21:00 -- Twice a day at specified times. 2-day: 12am, 4pm, +1d 8am -- Three times every two days, evenly spaced. hourly: :15, :45 -- 15 minutes before and after each hour. 4-hour: :00, 1:20, 2:40 -- Three times every 4 hours, evenly spaced. 10-minute: +0s -- Every 10 minutes on the minute. INTERVAL must be either of the form N-unit where N is a number and unit is one of year , month , week , day , hour ; or one of the aliases: annual , monthly , weekly , daily , hourly , which mean 1-year , 1-month , etc. SLOTS support the following units: `Jan-15` or `1/15` -- Month and day of the month; available when INTERVAL is year-based. `/15` -- Day of the month, available when INTERVAL is month-based. `Mon`, `Mo`, `Friday` -- Day of the week (or abbreviation), when INTERVAL is week-based. 10am, 1:30pm, 15:45 -- Time of day, available for day-based or longer intervals. :45, :00 -- Minutes of the hour, available when INTERVAL is hour-based. +1d, +15d -- How many days to add to start of INTERVAL. +1w -- How many weeks to add to start of INTERVAL. +1m -- How many months to add to start of INTERVAL. The SLOTS are always relative to the INTERVAL rather than to start . Week-based intervals start on Sunday. E.g. weekly: +1d, +4d is the same as weekly: Mon, Thu , and generates times on Mondays and Thursdays regardless of start . The first generated time is determined by the unit of the INTERVAL without regard to the multiple. E.g. both \u201c2-week: Mon\u201d and \u201c3-week: Mon\u201d start on the first Monday after start , and then generate either every second or every third Monday after that. Similarly, 24-hour: :00 starts with the first top-of-the-hour after start (not with midnight), and then repeats every 24 hours. To start with the midnight after start , use daily: 0:00 . For interval units of a day or longer, if time-of-day is not specified, it defaults to midnight. The time zone of start determines the time zone of the generated times. >>> def show(dates): return [d.strftime(\"%Y-%m-%d %H:%M\") for d in dates] >>> start = datetime(2018, 9, 4, 14, 0); # 2pm on Tue, Sep 4 2018. >>> show(SCHEDULE('annual: Jan-15, Apr-15, Jul-15, Oct-15', start=start, count=4)) ['2018-10-15 00:00', '2019-01-15 00:00', '2019-04-15 00:00', '2019-07-15 00:00'] >>> show(SCHEDULE('annual: 1/15, 4/15, 7/15', start=start, count=4)) ['2019-01-15 00:00', '2019-04-15 00:00', '2019-07-15 00:00', '2020-01-15 00:00'] >>> show(SCHEDULE('monthly: /1 2pm, /15 5pm', start=start, count=4)) ['2018-09-15 17:00', '2018-10-01 14:00', '2018-10-15 17:00', '2018-11-01 14:00'] >>> show(SCHEDULE('3-months: /10, +1m /20', start=start, count=4)) ['2018-09-10 00:00', '2018-10-20 00:00', '2018-12-10 00:00', '2019-01-20 00:00'] >>> show(SCHEDULE('weekly: Mo 9am, Tu 9am, Fr 2pm', start=start, count=4)) ['2018-09-07 14:00', '2018-09-10 09:00', '2018-09-11 09:00', '2018-09-14 14:00'] >>> show(SCHEDULE('2-weeks: Mo, +1w Tu', start=start, count=4)) ['2018-09-11 00:00', '2018-09-17 00:00', '2018-09-25 00:00', '2018-10-01 00:00'] >>> show(SCHEDULE('daily: 07:30, 21:00', start=start, count=4)) ['2018-09-04 21:00', '2018-09-05 07:30', '2018-09-05 21:00', '2018-09-06 07:30'] >>> show(SCHEDULE('2-day: 12am, 4pm, +1d 8am', start=start, count=4)) ['2018-09-04 16:00', '2018-09-05 08:00', '2018-09-06 00:00', '2018-09-06 16:00'] >>> show(SCHEDULE('hourly: :15, :45', start=start, count=4)) ['2018-09-04 14:15', '2018-09-04 14:45', '2018-09-04 15:15', '2018-09-04 15:45'] >>> show(SCHEDULE('4-hour: :00, +1H :20, +2H :40', start=start, count=4)) ['2018-09-04 14:00', '2018-09-04 15:20', '2018-09-04 16:40', '2018-09-04 18:00']","title":"SCHEDULE"},{"location":"functions/#stats","text":"","title":"Stats"},{"location":"functions/#avedev","text":"AVEDEV (value1, value2) # Calculates the average of the magnitudes of deviations of data from a dataset\u2019s mean. Note This function is not currently implemented in Grist.","title":"AVEDEV"},{"location":"functions/#average","text":"AVERAGE (value, *more_values) # Returns the numerical average value in a dataset, ignoring non-numerical values. Each argument may be a value or an array. Values that are not numbers, including logical and blank values, and text representations of numbers, are ignored. >>> AVERAGE([2, -1.0, 11]) 4.0 >>> AVERAGE([2, -1, 11, \"Hello\"]) 4.0 >>> AVERAGE([2, -1, \"Hello\", DATE(2015,1,1)], True, [False, \"123\", \"\", 11]) 4.0 >>> AVERAGE(False, True) Traceback (most recent call last): ... ZeroDivisionError: float division by zero","title":"AVERAGE"},{"location":"functions/#averagea","text":"AVERAGEA (value, *more_values) # Returns the numerical average value in a dataset, counting non-numerical values as 0. Each argument may be a value of an array. Values that are not numbers, including dates and text representations of numbers, are counted as 0 (zero). Logical value of True is counted as 1, and False as 0. >>> AVERAGEA([2, -1.0, 11]) 4.0 >>> AVERAGEA([2, -1, 11, \"Hello\"]) 3.0 >>> AVERAGEA([2, -1, \"Hello\", DATE(2015,1,1)], True, [False, \"123\", \"\", 11.5]) 1.5 >>> AVERAGEA(False, True) 0.5","title":"AVERAGEA"},{"location":"functions/#averageif","text":"AVERAGEIF (criteria_range, criterion, average_range=None) # Returns the average of a range depending on criteria. Note This function is not currently implemented in Grist.","title":"AVERAGEIF"},{"location":"functions/#averageifs","text":"AVERAGEIFS (average_range, criteria_range1, criterion1, *args) # Returns the average of a range depending on multiple criteria. Note This function is not currently implemented in Grist.","title":"AVERAGEIFS"},{"location":"functions/#average_weighted","text":"AVERAGE_WEIGHTED (pairs) # Given a list of (value, weight) pairs, finds the average of the values weighted by the corresponding weights. Ignores any pairs with a non-numerical value or weight. If you have two lists, of values and weights, use the Python built-in zip() function to create a list of pairs. >>> AVERAGE_WEIGHTED(((95, .25), (90, .1), (\"X\", .5), (85, .15), (88, .2), (82, .3), (70, None))) 87.7 >>> AVERAGE_WEIGHTED(zip([95, 90, \"X\", 85, 88, 82, 70], [25, 10, 50, 15, 20, 30, None])) 87.7 >>> AVERAGE_WEIGHTED(zip([95, 90, False, 85, 88, 82, 70], [.25, .1, .5, .15, .2, .3, True])) 87.7","title":"AVERAGE_WEIGHTED"},{"location":"functions/#binomdist","text":"BINOMDIST (num_successes, num_trials, prob_success, cumulative) # Calculates the probability of drawing a certain number of successes (or a maximum number of successes) in a certain number of tries given a population of a certain size containing a certain number of successes, with replacement of draws. Note This function is not currently implemented in Grist.","title":"BINOMDIST"},{"location":"functions/#confidence","text":"CONFIDENCE (alpha, standard_deviation, pop_size) # Calculates the width of half the confidence interval for a normal distribution. Note This function is not currently implemented in Grist.","title":"CONFIDENCE"},{"location":"functions/#correl","text":"CORREL (data_y, data_x) # Calculates r, the Pearson product-moment correlation coefficient of a dataset. Note This function is not currently implemented in Grist.","title":"CORREL"},{"location":"functions/#count","text":"COUNT (value, *more_values) # Returns the count of numerical values in a dataset, ignoring non-numerical values. Each argument may be a value or an array. Values that are not numbers, including logical and blank values, and text representations of numbers, are ignored. >>> COUNT([2, -1.0, 11]) 3 >>> COUNT([2, -1, 11, \"Hello\"]) 3 >>> COUNT([2, -1, \"Hello\", DATE(2015,1,1)], True, [False, \"123\", \"\", 11.5]) 3 >>> COUNT(False, True) 0","title":"COUNT"},{"location":"functions/#counta","text":"COUNTA (value, *more_values) # Returns the count of all values in a dataset, including non-numerical values. Each argument may be a value or an array. >>> COUNTA([2, -1.0, 11]) 3 >>> COUNTA([2, -1, 11, \"Hello\"]) 4 >>> COUNTA([2, -1, \"Hello\", DATE(2015,1,1)], True, [False, \"123\", \"\", 11.5]) 9 >>> COUNTA(False, True) 2","title":"COUNTA"},{"location":"functions/#covar","text":"COVAR (data_y, data_x) # Calculates the covariance of a dataset. Note This function is not currently implemented in Grist.","title":"COVAR"},{"location":"functions/#critbinom","text":"CRITBINOM (num_trials, prob_success, target_prob) # Calculates the smallest value for which the cumulative binomial distribution is greater than or equal to a specified criteria. Note This function is not currently implemented in Grist.","title":"CRITBINOM"},{"location":"functions/#devsq","text":"DEVSQ (value1, value2) # Calculates the sum of squares of deviations based on a sample. Note This function is not currently implemented in Grist.","title":"DEVSQ"},{"location":"functions/#expondist","text":"EXPONDIST (x, lambda_, cumulative) # Returns the value of the exponential distribution function with a specified lambda at a specified value. Note This function is not currently implemented in Grist.","title":"EXPONDIST"},{"location":"functions/#fdist","text":"FDIST (x, degrees_freedom1, degrees_freedom2) # Calculates the right-tailed F probability distribution (degree of diversity) for two data sets with given input x. Alternately called Fisher-Snedecor distribution or Snedecor\u2019s F distribution. Note This function is not currently implemented in Grist.","title":"FDIST"},{"location":"functions/#fisher","text":"FISHER (value) # Returns the Fisher transformation of a specified value. Note This function is not currently implemented in Grist.","title":"FISHER"},{"location":"functions/#fisherinv","text":"FISHERINV (value) # Returns the inverse Fisher transformation of a specified value. Note This function is not currently implemented in Grist.","title":"FISHERINV"},{"location":"functions/#forecast","text":"FORECAST (x, data_y, data_x) # Calculates the expected y-value for a specified x based on a linear regression of a dataset. Note This function is not currently implemented in Grist.","title":"FORECAST"},{"location":"functions/#f_dist","text":"F_DIST (x, degrees_freedom1, degrees_freedom2, cumulative) # Calculates the left-tailed F probability distribution (degree of diversity) for two data sets with given input x. Alternately called Fisher-Snedecor distribution or Snedecor\u2019s F distribution. Note This function is not currently implemented in Grist.","title":"F_DIST"},{"location":"functions/#f_dist_rt","text":"F_DIST_RT (x, degrees_freedom1, degrees_freedom2) # Calculates the right-tailed F probability distribution (degree of diversity) for two data sets with given input x. Alternately called Fisher-Snedecor distribution or Snedecor\u2019s F distribution. Note This function is not currently implemented in Grist.","title":"F_DIST_RT"},{"location":"functions/#geomean","text":"GEOMEAN (value1, value2) # Calculates the geometric mean of a dataset. Note This function is not currently implemented in Grist.","title":"GEOMEAN"},{"location":"functions/#harmean","text":"HARMEAN (value1, value2) # Calculates the harmonic mean of a dataset. Note This function is not currently implemented in Grist.","title":"HARMEAN"},{"location":"functions/#hypgeomdist","text":"HYPGEOMDIST (num_successes, num_draws, successes_in_pop, pop_size) # Calculates the probability of drawing a certain number of successes in a certain number of tries given a population of a certain size containing a certain number of successes, without replacement of draws. Note This function is not currently implemented in Grist.","title":"HYPGEOMDIST"},{"location":"functions/#intercept","text":"INTERCEPT (data_y, data_x) # Calculates the y-value at which the line resulting from linear regression of a dataset will intersect the y-axis (x=0). Note This function is not currently implemented in Grist.","title":"INTERCEPT"},{"location":"functions/#kurt","text":"KURT (value1, value2) # Calculates the kurtosis of a dataset, which describes the shape, and in particular the \u201cpeakedness\u201d of that dataset. Note This function is not currently implemented in Grist.","title":"KURT"},{"location":"functions/#large","text":"LARGE (data, n) # Returns the nth largest element from a data set, where n is user-defined. Note This function is not currently implemented in Grist.","title":"LARGE"},{"location":"functions/#loginv","text":"LOGINV (x, mean, standard_deviation) # Returns the value of the inverse log-normal cumulative distribution with given mean and standard deviation at a specified value. Note This function is not currently implemented in Grist.","title":"LOGINV"},{"location":"functions/#lognormdist","text":"LOGNORMDIST (x, mean, standard_deviation) # Returns the value of the log-normal cumulative distribution with given mean and standard deviation at a specified value. Note This function is not currently implemented in Grist.","title":"LOGNORMDIST"},{"location":"functions/#max","text":"MAX (value, *more_values) # Returns the maximum value in a dataset, ignoring non-numerical values. Each argument may be a value or an array. Values that are not numbers, including logical and blank values, and text representations of numbers, are ignored. Returns 0 if the arguments contain no numbers. >>> MAX([2, -1.5, 11.5]) 11.5 >>> MAX([2, -1.5, \"Hello\", DATE(2015, 1, 1)], True, [False, \"123\", \"\", 11.5]) 11.5 >>> MAX(True, -123) -123 >>> MAX(\"123\", -123) -123 >>> MAX(\"Hello\", \"123\", DATE(2015, 1, 1)) 0","title":"MAX"},{"location":"functions/#maxa","text":"MAXA (value, *more_values) # Returns the maximum numeric value in a dataset. Each argument may be a value of an array. Values that are not numbers, including dates and text representations of numbers, are counted as 0 (zero). Logical value of True is counted as 1, and False as 0. Returns 0 if the arguments contain no numbers. >>> MAXA([2, -1.5, 11.5]) 11.5 >>> MAXA([2, -1.5, \"Hello\", DATE(2015, 1, 1)], True, [False, \"123\", \"\", 11.5]) 11.5 >>> MAXA(True, -123) 1 >>> MAXA(\"123\", -123) 0 >>> MAXA(\"Hello\", \"123\", DATE(2015, 1, 1)) 0","title":"MAXA"},{"location":"functions/#median","text":"MEDIAN (value, *more_values) # Returns the median value in a numeric dataset, ignoring non-numerical values. Each argument may be a value or an array. Values that are not numbers, including logical and blank values, and text representations of numbers, are ignored. Produces an error if the arguments contain no numbers. The median is the middle number when all values are sorted. So half of the values in the dataset are less than the median, and half of the values are greater. If there is an even number of values in the dataset, returns the average of the two numbers in the middle. >>> MEDIAN(1, 2, 3, 4, 5) 3 >>> MEDIAN(3, 5, 1, 4, 2) 3 >>> MEDIAN(range(10)) 4.5 >>> MEDIAN(\"Hello\", \"123\", DATE(2015, 1, 1), 12.3) 12.3 >>> MEDIAN(\"Hello\", \"123\", DATE(2015, 1, 1)) Traceback (most recent call last): ... ValueError: MEDIAN requires at least one number","title":"MEDIAN"},{"location":"functions/#min","text":"MIN (value, *more_values) # Returns the minimum value in a dataset, ignoring non-numerical values. Each argument may be a value or an array. Values that are not numbers, including logical and blank values, and text representations of numbers, are ignored. Returns 0 if the arguments contain no numbers. >>> MIN([2, -1.5, 11.5]) -1.5 >>> MIN([2, -1.5, \"Hello\", DATE(2015, 1, 1)], True, [False, \"123\", \"\", 11.5]) -1.5 >>> MIN(True, 123) 123 >>> MIN(\"-123\", 123) 123 >>> MIN(\"Hello\", \"123\", DATE(2015, 1, 1)) 0","title":"MIN"},{"location":"functions/#mina","text":"MINA (value, *more_values) # Returns the minimum numeric value in a dataset. Each argument may be a value of an array. Values that are not numbers, including dates and text representations of numbers, are counted as 0 (zero). Logical value of True is counted as 1, and False as 0. Returns 0 if the arguments contain no numbers. >>> MINA([2, -1.5, 11.5]) -1.5 >>> MINA([2, -1.5, \"Hello\", DATE(2015, 1, 1)], True, [False, \"123\", \"\", 11.5]) -1.5 >>> MINA(True, 123) 1 >>> MINA(\"-123\", 123) 0 >>> MINA(\"Hello\", \"123\", DATE(2015, 1, 1)) 0","title":"MINA"},{"location":"functions/#mode","text":"MODE (value1, value2) # Returns the most commonly occurring value in a dataset. Note This function is not currently implemented in Grist.","title":"MODE"},{"location":"functions/#negbinomdist","text":"NEGBINOMDIST (num_failures, num_successes, prob_success) # Calculates the probability of drawing a certain number of failures before a certain number of successes given a probability of success in independent trials. Note This function is not currently implemented in Grist.","title":"NEGBINOMDIST"},{"location":"functions/#normdist","text":"NORMDIST (x, mean, standard_deviation, cumulative) # Returns the value of the normal distribution function (or normal cumulative distribution function) for a specified value, mean, and standard deviation. Note This function is not currently implemented in Grist.","title":"NORMDIST"},{"location":"functions/#norminv","text":"NORMINV (x, mean, standard_deviation) # Returns the value of the inverse normal distribution function for a specified value, mean, and standard deviation. Note This function is not currently implemented in Grist.","title":"NORMINV"},{"location":"functions/#normsdist","text":"NORMSDIST (x) # Returns the value of the standard normal cumulative distribution function for a specified value. Note This function is not currently implemented in Grist.","title":"NORMSDIST"},{"location":"functions/#normsinv","text":"NORMSINV (x) # Returns the value of the inverse standard normal distribution function for a specified value. Note This function is not currently implemented in Grist.","title":"NORMSINV"},{"location":"functions/#pearson","text":"PEARSON (data_y, data_x) # Calculates r, the Pearson product-moment correlation coefficient of a dataset. Note This function is not currently implemented in Grist.","title":"PEARSON"},{"location":"functions/#percentile","text":"PERCENTILE (data, percentile) # Returns the value at a given percentile of a dataset. Note This function is not currently implemented in Grist.","title":"PERCENTILE"},{"location":"functions/#percentrank","text":"PERCENTRANK (data, value, significant_digits=None) # Returns the percentage rank (percentile) of a specified value in a dataset. Note This function is not currently implemented in Grist.","title":"PERCENTRANK"},{"location":"functions/#percentrank_exc","text":"PERCENTRANK_EXC (data, value, significant_digits=None) # Returns the percentage rank (percentile) from 0 to 1 exclusive of a specified value in a dataset. Note This function is not currently implemented in Grist.","title":"PERCENTRANK_EXC"},{"location":"functions/#percentrank_inc","text":"PERCENTRANK_INC (data, value, significant_digits=None) # Returns the percentage rank (percentile) from 0 to 1 inclusive of a specified value in a dataset. Note This function is not currently implemented in Grist.","title":"PERCENTRANK_INC"},{"location":"functions/#permut","text":"PERMUT (n, k) # Returns the number of ways to choose some number of objects from a pool of a given size of objects, considering order. Note This function is not currently implemented in Grist.","title":"PERMUT"},{"location":"functions/#poisson","text":"POISSON (x, mean, cumulative) # Returns the value of the Poisson distribution function (or Poisson cumulative distribution function) for a specified value and mean. Note This function is not currently implemented in Grist.","title":"POISSON"},{"location":"functions/#prob","text":"PROB (data, probabilities, low_limit, high_limit=None) # Given a set of values and corresponding probabilities, calculates the probability that a value chosen at random falls between two limits. Note This function is not currently implemented in Grist.","title":"PROB"},{"location":"functions/#quartile","text":"QUARTILE (data, quartile_number) # Returns a value nearest to a specified quartile of a dataset. Note This function is not currently implemented in Grist.","title":"QUARTILE"},{"location":"functions/#rank","text":"RANK (value, data, is_ascending=None) # Returns the rank of a specified value in a dataset. Note This function is not currently implemented in Grist.","title":"RANK"},{"location":"functions/#rank_avg","text":"RANK_AVG (value, data, is_ascending=None) # Returns the rank of a specified value in a dataset. If there is more than one entry of the same value in the dataset, the average rank of the entries will be returned. Note This function is not currently implemented in Grist.","title":"RANK_AVG"},{"location":"functions/#rank_eq","text":"RANK_EQ (value, data, is_ascending=None) # Returns the rank of a specified value in a dataset. If there is more than one entry of the same value in the dataset, the top rank of the entries will be returned. Note This function is not currently implemented in Grist.","title":"RANK_EQ"},{"location":"functions/#rsq","text":"RSQ (data_y, data_x) # Calculates the square of r, the Pearson product-moment correlation coefficient of a dataset. Note This function is not currently implemented in Grist.","title":"RSQ"},{"location":"functions/#skew","text":"SKEW (value1, value2) # Calculates the skewness of a dataset, which describes the symmetry of that dataset about the mean. Note This function is not currently implemented in Grist.","title":"SKEW"},{"location":"functions/#slope","text":"SLOPE (data_y, data_x) # Calculates the slope of the line resulting from linear regression of a dataset. Note This function is not currently implemented in Grist.","title":"SLOPE"},{"location":"functions/#small","text":"SMALL (data, n) # Returns the nth smallest element from a data set, where n is user-defined. Note This function is not currently implemented in Grist.","title":"SMALL"},{"location":"functions/#standardize","text":"STANDARDIZE (value, mean, standard_deviation) # Calculates the normalized equivalent of a random variable given mean and standard deviation of the distribution. Note This function is not currently implemented in Grist.","title":"STANDARDIZE"},{"location":"functions/#stdev","text":"STDEV (value, *more_values) # Calculates the standard deviation based on a sample, ignoring non-numerical values. >>> STDEV([2, 5, 8, 13, 10]) 4.277849927241488 >>> STDEV([2, 5, 8, 13, 10, True, False, \"Test\"]) 4.277849927241488 >>> STDEV([2, 5, 8, 13, 10], 3, 12, 15) 4.810702354423639 >>> STDEV([2, 5, 8, 13, 10], [3, 12, 15]) 4.810702354423639 >>> STDEV([5]) Traceback (most recent call last): ... ZeroDivisionError: float division by zero","title":"STDEV"},{"location":"functions/#stdeva","text":"STDEVA (value, *more_values) # Calculates the standard deviation based on a sample, setting text to the value 0 . >>> STDEVA([2, 5, 8, 13, 10]) 4.277849927241488 >>> STDEVA([2, 5, 8, 13, 10, True, False, \"Test\"]) 4.969550137731641 >>> STDEVA([2, 5, 8, 13, 10], 1, 0, 0) 4.969550137731641 >>> STDEVA([2, 5, 8, 13, 10], [1, 0, 0]) 4.969550137731641 >>> STDEVA([5]) Traceback (most recent call last): ... ZeroDivisionError: float division by zero","title":"STDEVA"},{"location":"functions/#stdevp","text":"STDEVP (value, *more_values) # Calculates the standard deviation based on an entire population, ignoring non-numerical values. >>> STDEVP([2, 5, 8, 13, 10]) 3.8262252939417984 >>> STDEVP([2, 5, 8, 13, 10, True, False, \"Test\"]) 3.8262252939417984 >>> STDEVP([2, 5, 8, 13, 10], 3, 12, 15) 4.5 >>> STDEVP([2, 5, 8, 13, 10], [3, 12, 15]) 4.5 >>> STDEVP([5]) 0.0","title":"STDEVP"},{"location":"functions/#stdevpa","text":"STDEVPA (value, *more_values) # Calculates the standard deviation based on an entire population, setting text to the value 0 . >>> STDEVPA([2, 5, 8, 13, 10]) 3.8262252939417984 >>> STDEVPA([2, 5, 8, 13, 10, True, False, \"Test\"]) 4.648588495446763 >>> STDEVPA([2, 5, 8, 13, 10], 1, 0, 0) 4.648588495446763 >>> STDEVPA([2, 5, 8, 13, 10], [1, 0, 0]) 4.648588495446763 >>> STDEVPA([5]) 0.0","title":"STDEVPA"},{"location":"functions/#steyx","text":"STEYX (data_y, data_x) # Calculates the standard error of the predicted y-value for each x in the regression of a dataset. Note This function is not currently implemented in Grist.","title":"STEYX"},{"location":"functions/#tdist","text":"TDIST (x, degrees_freedom, tails) # Calculates the probability for Student\u2019s t-distribution with a given input (x). Note This function is not currently implemented in Grist.","title":"TDIST"},{"location":"functions/#tinv","text":"TINV (probability, degrees_freedom) # Calculates the inverse of the two-tailed TDIST function. Note This function is not currently implemented in Grist.","title":"TINV"},{"location":"functions/#trimmean","text":"TRIMMEAN (data, exclude_proportion) # Calculates the mean of a dataset excluding some proportion of data from the high and low ends of the dataset. Note This function is not currently implemented in Grist.","title":"TRIMMEAN"},{"location":"functions/#ttest","text":"TTEST (range1, range2, tails, type) # Returns the probability associated with t-test. Determines whether two samples are likely to have come from the same two underlying populations that have the same mean. Note This function is not currently implemented in Grist.","title":"TTEST"},{"location":"functions/#t_inv","text":"T_INV (probability, degrees_freedom) # Calculates the negative inverse of the one-tailed TDIST function. Note This function is not currently implemented in Grist.","title":"T_INV"},{"location":"functions/#t_inv_2t","text":"T_INV_2T (probability, degrees_freedom) # Calculates the inverse of the two-tailed TDIST function. Note This function is not currently implemented in Grist.","title":"T_INV_2T"},{"location":"functions/#var","text":"VAR (value1, value2) # Calculates the variance based on a sample. Note This function is not currently implemented in Grist.","title":"VAR"},{"location":"functions/#vara","text":"VARA (value1, value2) # Calculates an estimate of variance based on a sample, setting text to the value 0 . Note This function is not currently implemented in Grist.","title":"VARA"},{"location":"functions/#varp","text":"VARP (value1, value2) # Calculates the variance based on an entire population. Note This function is not currently implemented in Grist.","title":"VARP"},{"location":"functions/#varpa","text":"VARPA (value1, value2) # Calculates the variance based on an entire population, setting text to the value 0 . Note This function is not currently implemented in Grist.","title":"VARPA"},{"location":"functions/#weibull","text":"WEIBULL (x, shape, scale, cumulative) # Returns the value of the Weibull distribution function (or Weibull cumulative distribution function) for a specified shape and scale. Note This function is not currently implemented in Grist.","title":"WEIBULL"},{"location":"functions/#ztest","text":"ZTEST (data, value, standard_deviation) # Returns the two-tailed P-value of a Z-test with standard distribution. Note This function is not currently implemented in Grist.","title":"ZTEST"},{"location":"functions/#text","text":"","title":"Text"},{"location":"functions/#char","text":"CHAR (table_number) # Convert a number into a character according to the current Unicode table. Same as unichr(number) . >>> CHAR(65) u'A' >>> CHAR(33) u'!'","title":"CHAR"},{"location":"functions/#clean","text":"CLEAN (text) # Returns the text with the non-printable characters removed. This removes both characters with values 0 through 31, and other Unicode characters in the \u201ccontrol characters\u201d category. >>> CLEAN(CHAR(9) + \"Monthly report\" + CHAR(10)) u'Monthly report'","title":"CLEAN"},{"location":"functions/#code","text":"CODE (string) # Returns the numeric Unicode map value of the first character in the string provided. Same as ord(string[0]) . >>> CODE(\"A\") 65 >>> CODE(\"!\") 33 >>> CODE(\"!A\") 33","title":"CODE"},{"location":"functions/#concat","text":"CONCAT (string, *more_strings) # Joins together any number of text strings into one string. Also available under the name CONCATENATE . Similar to the Python expression \"\".join(array_of_strings) . >>> CONCAT(\"Stream population for \", \"trout\", \" \", \"species\", \" is \", 32, \"/mile.\") u'Stream population for trout species is 32/mile.' >>> CONCAT(\"In \", 4, \" days it is \", datetime.date(2016,1,1)) u'In 4 days it is 2016-01-01' >>> CONCAT(\"abc\") u'abc' >>> CONCAT(0, \"abc\") u'0abc' >>> assert CONCAT(2, u\" cr\u00e8me \", u\"br\u00fbl\u00e9e\") == u'2 cr\u00e8me br\u00fbl\u00e9e'","title":"CONCAT"},{"location":"functions/#concatenate","text":"CONCATENATE (string, *more_strings) # Joins together any number of text strings into one string. Also available under the name CONCAT . Similar to the Python expression \"\".join(array_of_strings) . >>> CONCATENATE(\"Stream population for \", \"trout\", \" \", \"species\", \" is \", 32, \"/mile.\") u'Stream population for trout species is 32/mile.' >>> CONCATENATE(\"In \", 4, \" days it is \", datetime.date(2016,1,1)) u'In 4 days it is 2016-01-01' >>> CONCATENATE(\"abc\") u'abc' >>> CONCATENATE(0, \"abc\") u'0abc' >>> assert CONCATENATE(2, u\" cr\u00e8me \", u\"br\u00fbl\u00e9e\") == u'2 cr\u00e8me br\u00fbl\u00e9e' >>> assert CONCATENATE(2, \" cr\u00e8me \", u\"br\u00fbl\u00e9e\") == u'2 cr\u00e8me br\u00fbl\u00e9e' >>> assert CONCATENATE(2, \" cr\u00e8me \", \"br\u00fbl\u00e9e\") == u'2 cr\u00e8me br\u00fbl\u00e9e'","title":"CONCATENATE"},{"location":"functions/#dollar","text":"DOLLAR (number, decimals=2) # Formats a number into a formatted dollar amount, with decimals rounded to the specified place (. If decimals value is omitted, it defaults to 2. >>> DOLLAR(1234.567) '$1,234.57' >>> DOLLAR(1234.567, -2) '$1,200' >>> DOLLAR(-1234.567, -2) '($1,200)' >>> DOLLAR(-0.123, 4) '($0.1230)' >>> DOLLAR(99.888) '$99.89' >>> DOLLAR(0) '$0.00' >>> DOLLAR(10, 0) '$10'","title":"DOLLAR"},{"location":"functions/#exact","text":"EXACT (string1, string2) # Tests whether two strings are identical. Same as string2 == string2 . >>> EXACT(\"word\", \"word\") True >>> EXACT(\"Word\", \"word\") False >>> EXACT(\"w ord\", \"word\") False","title":"EXACT"},{"location":"functions/#find","text":"FIND (find_text, within_text, start_num=1) # Returns the position at which a string is first found within text. Find is case-sensitive. The returned position is 1 if within_text starts with find_text. Start_num specifies the character at which to start the search, defaulting to 1 (the first character of within_text). If find_text is not found, or start_num is invalid, raises ValueError. >>> FIND(\"M\", \"Miriam McGovern\") 1 >>> FIND(\"m\", \"Miriam McGovern\") 6 >>> FIND(\"M\", \"Miriam McGovern\", 3) 8 >>> FIND(\" #\", \"Hello world # Test\") 12 >>> FIND(\"gle\", \"Google\", 1) 4 >>> FIND(\"GLE\", \"Google\", 1) Traceback (most recent call last): ... ValueError: substring not found >>> FIND(\"page\", \"homepage\") 5 >>> FIND(\"page\", \"homepage\", 6) Traceback (most recent call last): ... ValueError: substring not found","title":"FIND"},{"location":"functions/#fixed","text":"FIXED (number, decimals=2, no_commas=False) # Formats a number with a fixed number of decimal places (2 by default), and commas. If no_commas is True, then omits the commas. >>> FIXED(1234.567, 1) '1,234.6' >>> FIXED(1234.567, -1) '1,230' >>> FIXED(-1234.567, -1, True) '-1230' >>> FIXED(44.332) '44.33' >>> FIXED(3521.478, 2, False) '3,521.48' >>> FIXED(-3521.478, 1, True) '-3521.5' >>> FIXED(3521.478, 0, True) '3521' >>> FIXED(3521.478, -2, True) '3500'","title":"FIXED"},{"location":"functions/#left","text":"LEFT (string, num_chars=1) # Returns a substring of length num_chars from the beginning of the given string. If num_chars is omitted, it is assumed to be 1. Same as string[:num_chars] . >>> LEFT(\"Sale Price\", 4) 'Sale' >>> LEFT('Swededn') 'S' >>> LEFT('Text', -1) Traceback (most recent call last): ... ValueError: num_chars invalid","title":"LEFT"},{"location":"functions/#len","text":"LEN (text) # Returns the number of characters in a text string, or the number of items in a list. Same as len in python. See Record Set for an example of using len on a list of records. >>> LEN(\"Phoenix, AZ\") 11 >>> LEN(\"\") 0 >>> LEN(\" One \") 11","title":"LEN"},{"location":"functions/#lower","text":"LOWER (text) # Converts a specified string to lowercase. Same as text.lower() . >>> LOWER(\"E. E. Cummings\") 'e. e. cummings' >>> LOWER(\"Apt. 2B\") 'apt. 2b'","title":"LOWER"},{"location":"functions/#mid","text":"MID (text, start_num, num_chars) # Returns a segment of a string, starting at start_num. The first character in text has start_num 1. >>> MID(\"Fluid Flow\", 1, 5) 'Fluid' >>> MID(\"Fluid Flow\", 7, 20) 'Flow' >>> MID(\"Fluid Flow\", 20, 5) '' >>> MID(\"Fluid Flow\", 0, 5) Traceback (most recent call last): ... ValueError: start_num invalid","title":"MID"},{"location":"functions/#proper","text":"PROPER (text) # Capitalizes each word in a specified string. It converts the first letter of each word to uppercase, and all other letters to lowercase. Same as text.title() . >>> PROPER('this is a TITLE') 'This Is A Title' >>> PROPER('2-way street') '2-Way Street' >>> PROPER('76BudGet') '76Budget'","title":"PROPER"},{"location":"functions/#regexextract","text":"REGEXEXTRACT (text, regular_expression) # Extracts the first part of text that matches regular_expression. >>> REGEXEXTRACT(\"Google Doc 101\", \"[0-9]+\") '101' >>> REGEXEXTRACT(\"The price today is $826.25\", \"[0-9]*\\.[0-9]+[0-9]+\") '826.25' If there is a parenthesized expression, it is returned instead of the whole match. >>> REGEXEXTRACT(\"(Content) between brackets\", \"\\(([A-Za-z]+)\\)\") 'Content' >>> REGEXEXTRACT(\"Foo\", \"Bar\") Traceback (most recent call last): ... ValueError: REGEXEXTRACT text does not match","title":"REGEXEXTRACT"},{"location":"functions/#regexmatch","text":"REGEXMATCH (text, regular_expression) # Returns whether a piece of text matches a regular expression. >>> REGEXMATCH(\"Google Doc 101\", \"[0-9]+\") True >>> REGEXMATCH(\"Google Doc\", \"[0-9]+\") False >>> REGEXMATCH(\"The price today is $826.25\", \"[0-9]*\\.[0-9]+[0-9]+\") True >>> REGEXMATCH(\"(Content) between brackets\", \"\\(([A-Za-z]+)\\)\") True >>> REGEXMATCH(\"Foo\", \"Bar\") False","title":"REGEXMATCH"},{"location":"functions/#regexreplace","text":"REGEXREPLACE (text, regular_expression, replacement) # Replaces all parts of text matching the given regular expression with replacement text. >>> REGEXREPLACE(\"Google Doc 101\", \"[0-9]+\", \"777\") 'Google Doc 777' >>> REGEXREPLACE(\"Google Doc\", \"[0-9]+\", \"777\") 'Google Doc' >>> REGEXREPLACE(\"The price is $826.25\", \"[0-9]*\\.[0-9]+[0-9]+\", \"315.75\") 'The price is $315.75' >>> REGEXREPLACE(\"(Content) between brackets\", \"\\(([A-Za-z]+)\\)\", \"Word\") 'Word between brackets' >>> REGEXREPLACE(\"Foo\", \"Bar\", \"Baz\") 'Foo'","title":"REGEXREPLACE"},{"location":"functions/#replace","text":"REPLACE (text, position, length, new_text) # Replaces part of a text string with a different text string. Position is counted from 1. >>> REPLACE(\"abcdefghijk\", 6, 5, \"*\") 'abcde*k' >>> REPLACE(\"2009\", 3, 2, \"10\") '2010' >>> REPLACE('123456', 1, 3, '@') '@456' >>> REPLACE('foo', 1, 0, 'bar') 'barfoo' >>> REPLACE('foo', 0, 1, 'bar') Traceback (most recent call last): ... ValueError: position invalid","title":"REPLACE"},{"location":"functions/#rept","text":"REPT (text, number_times) # Returns specified text repeated a number of times. Same as text * number_times . The result of the REPT function cannot be longer than 32767 characters, or it raises a ValueError. >>> REPT(\"*-\", 3) '*-*-*-' >>> REPT('-', 10) '----------' >>> REPT('-', 0) '' >>> len(REPT('---', 10000)) 30000 >>> REPT('---', 11000) Traceback (most recent call last): ... ValueError: number_times invalid >>> REPT('-', -1) Traceback (most recent call last): ... ValueError: number_times invalid","title":"REPT"},{"location":"functions/#right","text":"RIGHT (string, num_chars=1) # Returns a substring of length num_chars from the end of a specified string. If num_chars is omitted, it is assumed to be 1. Same as string[-num_chars:] . >>> RIGHT(\"Sale Price\", 5) 'Price' >>> RIGHT('Stock Number') 'r' >>> RIGHT('Text', 100) 'Text' >>> RIGHT('Text', -1) Traceback (most recent call last): ... ValueError: num_chars invalid","title":"RIGHT"},{"location":"functions/#search","text":"SEARCH (find_text, within_text, start_num=1) # Returns the position at which a string is first found within text, ignoring case. Find is case-sensitive. The returned position is 1 if within_text starts with find_text. Start_num specifies the character at which to start the search, defaulting to 1 (the first character of within_text). If find_text is not found, or start_num is invalid, raises ValueError. >>> SEARCH(\"e\", \"Statements\", 6) 7 >>> SEARCH(\"margin\", \"Profit Margin\") 8 >>> SEARCH(\" \", \"Profit Margin\") 7 >>> SEARCH('\"', 'The \"boss\" is here.') 5 >>> SEARCH(\"gle\", \"Google\") 4 >>> SEARCH(\"GLE\", \"Google\") 4","title":"SEARCH"},{"location":"functions/#substitute","text":"SUBSTITUTE (text, old_text, new_text, instance_num=None) # Replaces existing text with new text in a string. It is useful when you know the substring of text to replace. Use REPLACE when you know the position of text to replace. If instance_num is given, it specifies which occurrence of old_text to replace. If omitted, all occurrences are replaced. Same as text.replace(old_text, new_text) when instance_num is omitted. >>> SUBSTITUTE(\"Sales Data\", \"Sales\", \"Cost\") u'Cost Data' >>> SUBSTITUTE(\"Quarter 1, 2008\", \"1\", \"2\", 1) u'Quarter 2, 2008' >>> SUBSTITUTE(\"Quarter 1, 2011\", \"1\", \"2\", 3) u'Quarter 1, 2012'","title":"SUBSTITUTE"},{"location":"functions/#t","text":"T (value) # Returns value if value is text, or the empty string when value is not text. >>> T('Text') u'Text' >>> T(826) u'' >>> T('826') u'826' >>> T(False) u'' >>> T('100 points') u'100 points' >>> T(AltText('Text')) u'Text' >>> T(float('nan')) u''","title":"T"},{"location":"functions/#text_1","text":"TEXT (number, format_type) # Converts a number into text according to a specified format. It is not yet implemented in Grist. Note This function is not currently implemented in Grist.","title":"TEXT"},{"location":"functions/#trim","text":"TRIM (text) # Removes all spaces from text except for single spaces between words. Note that TRIM does not remove other whitespace such as tab or newline characters. >>> TRIM(\" First Quarter\\n Earnings \") 'First Quarter\\n Earnings' >>> TRIM(\"\") ''","title":"TRIM"},{"location":"functions/#upper","text":"UPPER (text) # Converts a specified string to uppercase. Same as text.lower() . >>> UPPER(\"e. e. cummings\") 'E. E. CUMMINGS' >>> UPPER(\"Apt. 2B\") 'APT. 2B'","title":"UPPER"},{"location":"functions/#value","text":"VALUE (text) # Converts a string in accepted date, time or number formats into a number or date. >>> VALUE(\"$1,000\") 1000 >>> assert VALUE(\"16:48:00\") - VALUE(\"12:00:00\") == datetime.timedelta(0, 17280) >>> VALUE(\"01/01/2012\") datetime.datetime(2012, 1, 1, 0, 0) >>> VALUE(\"\") 0 >>> VALUE(0) 0 >>> VALUE(\"826\") 826 >>> VALUE(\"-826.123123123\") -826.123123123 >>> VALUE(float('nan')) nan >>> VALUE(\"Invalid\") Traceback (most recent call last): ... ValueError: text cannot be parsed to a number >>> VALUE(\"13/13/13\") Traceback (most recent call last): ... ValueError: text cannot be parsed to a number","title":"VALUE"},{"location":"glossary/","text":"Glossary # Bar Chart # This is a classic chart type , where the values in a column are shown as the heights of a series of rectangles. Column # A column is a vertical series of cells in a table. Columns in Grist have names. Each cell in a column is in a different row. When data from a column is present within a card, we call it a field. When a table of data is represented as a chart, we refer to each column as a series. From a data modeling perspective, columns typically have data about a single aspect of many real world entities, whereas rows have data about many aspects of a single entity. Column Options # Every column\u2019s appearance and behavior can be customized by clicking on the column header, clicking on the drop-down, and selecting \u201cColumn Options\u201d. Column Type # Columns have types, which control the appearance of cells in that column and the method used to edit them. You can change the column type at will. The Text Column Type is suited to strings of any length; the Date Column Type is specialized for storing and editing calendar dates; the Reference Column Type is for storing and editing links to other tables; the Numeric Column Type is for any kind of number; etc. Creator Panel # The creator panel is the right-side menu of configuration options for widgets and columns. Dashboard # A dashboard is just another name for a page, typically organized to give a summary or overview of a document\u2019s data. Grist is well suited to constructing dashboards, by creating pages with suitably linked widgets . Document # A Grist document is a collection of related data. If you work with databases, think of it as a single database. If you work with spreadsheets, think of it as a single spreadsheet. Like databases and spreadsheets, the data in a Grist document is organized as a set of tables. How this data is viewed and edited is unusually flexible. Grist documents are organized visually into pages. Pages contain widgets that offer different ways to view and edit tables. To work with Grist, the first step is typically to create a document . Drag handle # This is an icon to facilitate reorganizing views or lists visually. On a desktop computer, when hovering over a drag handle, the mouse cursor changes. The drag handle for a widget is just to the left of the widget\u2019s title. There is an example of using this drag handle in the investment research demo . Fiddle mode # Fiddle mode is a special mode that some Grist documents, such as the ones from the Examples & Templates page , will open in. A document opened in fiddle mode will have a \u201cfiddle\u201d label next to the document title in the top bar. In fiddle mode, any edit to a document will cause a new, unsaved copy (a.k.a \u201cfork\u201d) of that document to be created; the original document will remain unaffected. The copy can be saved via the \u201cSave Copy\u201d button or menu option. You can add /m/fork to the end of any document\u2019s URL to make that document open in fiddle mode (e.g. https://public.getgrist.com/3NsoHE2mWtEp/Lead-list/m/fork ). Field # A field is a column shown in a Card Widget. The terms column, field, and series are not different in substance, but are different terms that make more sense for different widgets. In a Table Widget, we talk about columns. In a Chart Widget, we talk about series. And in a Card Widget, we talk about fields. A field has layout properties that are meaningful within a Card, but would not be meaningful in other contexts. Import # To import into Grist means to take data from other sources (on your computer or on the internet) and place that data in a Grist document. Examples of importing include: Take a CSV file on your computer, and create a Grist document with the same content (see: start a new Grist document ). Take an Excel file on your computer, and add the data from it to an existing Grist document (see: importing more data ). Take a JSON file on the internet, and add the data from it to an existing Grist document (see: importing more data ). Calling Grist\u2019s API from a program and adding data read from another source (see: Grist API ). Page # Grist documents are organized visually into pages. Each page allows you to view or edit one or more tables. The nature of these viewers and editors (called \u201cpage widgets\u201d) is flexible, as is their layout. A single table can be viewed (or edited) from multiple widgets in one or many pages. And a single page can contain widgets for viewing (or editing) many tables. Pages are listed in the document ( in the panel on the left ). In this list, they may be rearranged and grouped, with several \u201csubpages\u201d nested within a single page. Pie Chart # This is a classic chart type , where a circle is sliced up according to values in a column. Record # A record is the data in one row of a table, comprising the data in the individual cells of that row. It has a unique identifier, usually hidden but available in formulas as id . In a Card Widget or a Card List Widget, a record is represented by a single card. Row # A horizontal series of cells in a table. Each cell in a row belongs to a different column. The data stored in a row is also called a record. Typically rows have data about different aspects a single entity, whereas columns have data about a single aspect of many entities. Series # Data from a single column shown in a Chart Widget is called a series. The same data in a Card Widget is called a field, and in a Table Widget is called a column. Sort # The order in which rows of a table are shown is called the sort order. An example of changing the sort order of a table is given in the CRM tutorial . Table # Data is stored in tables. Tables have named columns , and a sequence of rows containing values for those columns. Every row has a numeric id (available as $id in formulas) that is unique within that table. User Menu # The user menu is the menu that opens by clicking your profile icon in the top-right of Grist. From there you can manage your profile, add additional Grist accounts that you own, and see a list of team sites to which you have access. Depending on where you are, the user menu will contain additional options. For example, from a personal site you\u2019ll see the option to upgrade your plan to a team site . From a team site, depending on your role and permissions, you may be able to manage billing or edit team members . From a document, you\u2019ll find an option to edit document settings. Widget # A page contains sections, such as table grids or charts, which we call \u201cpage widgets\u201d. They are used for viewing or editing data in tables. Types of page widgets include Card Widgets , Chart Widgets , as well as the classic spreadsheet-style table grid (called a Table Widget ). Widget Options # Every page widget can have its appearance and behavior customized. How this is done varies between widget, but can always be done systematically by clicking on the three-dot menu on the top right of a widget and selecting \u201cWidget options\u201d. Wrap Text # Normally, content that doesn\u2019t fit in the width of a cell is truncated, with \u201c\u2026\u201d indicating that part of the data is hidden. When \u201cWrap Text\u201d setting is enabled, long lines will wrap, and the cell will get taller to include all content. An example of wrapping is given in the CRM tutorial .","title":"Glossary"},{"location":"glossary/#glossary","text":"","title":"Glossary"},{"location":"glossary/#bar-chart","text":"This is a classic chart type , where the values in a column are shown as the heights of a series of rectangles.","title":"Bar Chart"},{"location":"glossary/#column","text":"A column is a vertical series of cells in a table. Columns in Grist have names. Each cell in a column is in a different row. When data from a column is present within a card, we call it a field. When a table of data is represented as a chart, we refer to each column as a series. From a data modeling perspective, columns typically have data about a single aspect of many real world entities, whereas rows have data about many aspects of a single entity.","title":"Column"},{"location":"glossary/#column-options","text":"Every column\u2019s appearance and behavior can be customized by clicking on the column header, clicking on the drop-down, and selecting \u201cColumn Options\u201d.","title":"Column Options"},{"location":"glossary/#column-type","text":"Columns have types, which control the appearance of cells in that column and the method used to edit them. You can change the column type at will. The Text Column Type is suited to strings of any length; the Date Column Type is specialized for storing and editing calendar dates; the Reference Column Type is for storing and editing links to other tables; the Numeric Column Type is for any kind of number; etc.","title":"Column Type"},{"location":"glossary/#creator-panel","text":"The creator panel is the right-side menu of configuration options for widgets and columns.","title":"Creator Panel"},{"location":"glossary/#dashboard","text":"A dashboard is just another name for a page, typically organized to give a summary or overview of a document\u2019s data. Grist is well suited to constructing dashboards, by creating pages with suitably linked widgets .","title":"Dashboard"},{"location":"glossary/#document","text":"A Grist document is a collection of related data. If you work with databases, think of it as a single database. If you work with spreadsheets, think of it as a single spreadsheet. Like databases and spreadsheets, the data in a Grist document is organized as a set of tables. How this data is viewed and edited is unusually flexible. Grist documents are organized visually into pages. Pages contain widgets that offer different ways to view and edit tables. To work with Grist, the first step is typically to create a document .","title":"Document"},{"location":"glossary/#drag-handle","text":"This is an icon to facilitate reorganizing views or lists visually. On a desktop computer, when hovering over a drag handle, the mouse cursor changes. The drag handle for a widget is just to the left of the widget\u2019s title. There is an example of using this drag handle in the investment research demo .","title":"Drag handle"},{"location":"glossary/#fiddle-mode","text":"Fiddle mode is a special mode that some Grist documents, such as the ones from the Examples & Templates page , will open in. A document opened in fiddle mode will have a \u201cfiddle\u201d label next to the document title in the top bar. In fiddle mode, any edit to a document will cause a new, unsaved copy (a.k.a \u201cfork\u201d) of that document to be created; the original document will remain unaffected. The copy can be saved via the \u201cSave Copy\u201d button or menu option. You can add /m/fork to the end of any document\u2019s URL to make that document open in fiddle mode (e.g. https://public.getgrist.com/3NsoHE2mWtEp/Lead-list/m/fork ).","title":"Fiddle mode"},{"location":"glossary/#field","text":"A field is a column shown in a Card Widget. The terms column, field, and series are not different in substance, but are different terms that make more sense for different widgets. In a Table Widget, we talk about columns. In a Chart Widget, we talk about series. And in a Card Widget, we talk about fields. A field has layout properties that are meaningful within a Card, but would not be meaningful in other contexts.","title":"Field"},{"location":"glossary/#import","text":"To import into Grist means to take data from other sources (on your computer or on the internet) and place that data in a Grist document. Examples of importing include: Take a CSV file on your computer, and create a Grist document with the same content (see: start a new Grist document ). Take an Excel file on your computer, and add the data from it to an existing Grist document (see: importing more data ). Take a JSON file on the internet, and add the data from it to an existing Grist document (see: importing more data ). Calling Grist\u2019s API from a program and adding data read from another source (see: Grist API ).","title":"Import"},{"location":"glossary/#page","text":"Grist documents are organized visually into pages. Each page allows you to view or edit one or more tables. The nature of these viewers and editors (called \u201cpage widgets\u201d) is flexible, as is their layout. A single table can be viewed (or edited) from multiple widgets in one or many pages. And a single page can contain widgets for viewing (or editing) many tables. Pages are listed in the document ( in the panel on the left ). In this list, they may be rearranged and grouped, with several \u201csubpages\u201d nested within a single page.","title":"Page"},{"location":"glossary/#pie-chart","text":"This is a classic chart type , where a circle is sliced up according to values in a column.","title":"Pie Chart"},{"location":"glossary/#record","text":"A record is the data in one row of a table, comprising the data in the individual cells of that row. It has a unique identifier, usually hidden but available in formulas as id . In a Card Widget or a Card List Widget, a record is represented by a single card.","title":"Record"},{"location":"glossary/#row","text":"A horizontal series of cells in a table. Each cell in a row belongs to a different column. The data stored in a row is also called a record. Typically rows have data about different aspects a single entity, whereas columns have data about a single aspect of many entities.","title":"Row"},{"location":"glossary/#series","text":"Data from a single column shown in a Chart Widget is called a series. The same data in a Card Widget is called a field, and in a Table Widget is called a column.","title":"Series"},{"location":"glossary/#sort","text":"The order in which rows of a table are shown is called the sort order. An example of changing the sort order of a table is given in the CRM tutorial .","title":"Sort"},{"location":"glossary/#table","text":"Data is stored in tables. Tables have named columns , and a sequence of rows containing values for those columns. Every row has a numeric id (available as $id in formulas) that is unique within that table.","title":"Table"},{"location":"glossary/#user-menu","text":"The user menu is the menu that opens by clicking your profile icon in the top-right of Grist. From there you can manage your profile, add additional Grist accounts that you own, and see a list of team sites to which you have access. Depending on where you are, the user menu will contain additional options. For example, from a personal site you\u2019ll see the option to upgrade your plan to a team site . From a team site, depending on your role and permissions, you may be able to manage billing or edit team members . From a document, you\u2019ll find an option to edit document settings.","title":"User Menu"},{"location":"glossary/#widget","text":"A page contains sections, such as table grids or charts, which we call \u201cpage widgets\u201d. They are used for viewing or editing data in tables. Types of page widgets include Card Widgets , Chart Widgets , as well as the classic spreadsheet-style table grid (called a Table Widget ).","title":"Widget"},{"location":"glossary/#widget-options","text":"Every page widget can have its appearance and behavior customized. How this is done varies between widget, but can always be done systematically by clicking on the three-dot menu on the top right of a widget and selecting \u201cWidget options\u201d.","title":"Widget Options"},{"location":"glossary/#wrap-text","text":"Normally, content that doesn\u2019t fit in the width of a cell is truncated, with \u201c\u2026\u201d indicating that part of the data is hidden. When \u201cWrap Text\u201d setting is enabled, long lines will wrap, and the cell will get taller to include all content. An example of wrapping is given in the CRM tutorial .","title":"Wrap Text"},{"location":"imports/","text":"Importing more data # You can import a file to start a new Grist document , or to add data to an existing document. Grist supports imports of Excel, CSV, JSON, tab-separated files and from Google Drive . To start a new Grist document, click the \u201cAdd New\u201d button on the home screen and choose \u201cImport document\u201d, as described in starting a new Grist document . To add to an existing document, open that document, click the \u201cAdd New\u201d button and then \u201cImport from file\u201d. By default, each imported table is added as a new Grist table, but when examining the preview dialog for an import, you have an option to change the destination to an existing Grist table. You can also import any of the same formats from a URL, using the \u201cImport from URL\u201d option. The Import dialog # When you import data into an existing document, Grist opens an import dialog to show you what will be imported. This dialog offers available import options, lets you choose whether to create a new table or add to an existing one, and shows a preview of the data. The \u201cImport options\u201d link on the top right is sometimes useful when importing delimited files. Grist guesses the settings to parse the data (such as the field delimiter), but if it guesses incorrectly, you can adjust the settings. Guessing data structure # In all cases, when you import a file, Grist makes guesses about the structure of the file. For Excel files, Grist treats each sheet as a separated table. For CSV and other delimited formats, one file becomes one table. For both Excel and delimited files, Grist tries to detect whether the headers are included and which line they occur in. If Grist detects there are no headers, it will name columns as \u201cA\u201d, \u201cB\u201d, \u201cC\u201d, etc. Grist automatically tries to parse numbers, dates, and boolean fields to detect the most suitable type for each column. It tries to be lossless: e.g. if it marks a column as numeric, any text values in it (such as \u201cN/A\u201d) will remain in the imported table, but will be highlighted due to the type mismatch. You can always rename tables and columns after an import, as well as convert types. Import from Google Drive # Importing from a Google Drive is as easy as importing from an Excel file or a CSV file. You can either provide an URL of a file stored in the Google Drive or use a Google File Picker to choose a file from your own drive. To use a Picker, click the \u201cAdd New\u201d button and choose \u201cImport from Google Drive\u201d. To import, sign in to your Google Account by clicking the \u201cSign in\u201d button and following the sign-in process. Grist will ask for a permission to read the file you will import from Google Drive. We won\u2019t read any other files on your drive \u2014 just the single file you choose to import. Once the file has been chosen, the rest of the process is the same as importing from an Excel file. In the import dialog you may configure what data to import, and which destination table to add it to. If you have an URL to a file or a spreadsheet stored on your Google Drive or a file that is publicly accessible, you can import it directly using the \u201cImport from URL\u201d option from the \u201cAdd New\u201d menu. If the file is not shared publicly, Grist will ask you for permission to read files from your Google Drive. If you don\u2019t want to allow Grist to read your files, it will open up Google File Picker where you can select the file you want to import. Import to an existing table # By default, Grist imports new data as new tables, but the Import dialog allows you to change the destination and import data into an existing table. When importing to an existing table, Grist will attempt to match the columns from your imported file to the columns in the destination table. To manually specify column matching, click the \u201cthree dots\u201d button to open a menu with a list of columns from your imported file. Click on a column name to match it to a destination column, or select \u2018Skip\u2019 to skip importing data from that column. You can also specify a formula for each imported column by clicking the gray source column field to open a formula editor. Formulas can reference one or more imported columns, and the result of evaluating the formula will be shown in the preview after closing the editor. Importing to an existing table is best suited for importing multiple datasets containing similar structure. For instance, you could import a bank statement as a new table, then import more statements from other months into the same table. For developers, the Grist API offers a more powerful way to add data to a Grist document. Updating existing records # Suppose the table we are importing to already contains some of the data in our file. We\u2019d like Grist to update these existing records rather than duplicate them. We can tell Grist to update these records by checking the \u201cUpdate existing records\u201d option, and specifying which fields to use for matching incoming data against existing records. An imported row and an existing record that have the same values for all of the selected merge fields are considered the same record. In this case, importing will update the fields of the record with the imported data. Blank values from the imported data will be skipped, leaving the corresponding fields in the original record unchanged. Note: If there are multiple imported rows that have the same values for the selected merge fields, the last row will be used for matching and updating. If there are multiple existing records that have the same values for the selected merge fields, only the first record will be updated if a matching imported row is found. Each time the merge fields are changed, Grist will generate a preview of the updates that will be made to the destination table, and display them in the preview table. Changes are highlighted as follows: New records have all of their fields highlighted in green. Updated records have red and green highlighting for any changed fields: red (with a strikethrough) for existing values from the destination, and green for new values from the imported file. Unchanged records have no highlighting. Field values that exist in the destination table, but are blank in the imported file, are distinguished by a light gray font color.","title":"Importing more data"},{"location":"imports/#importing-more-data","text":"You can import a file to start a new Grist document , or to add data to an existing document. Grist supports imports of Excel, CSV, JSON, tab-separated files and from Google Drive . To start a new Grist document, click the \u201cAdd New\u201d button on the home screen and choose \u201cImport document\u201d, as described in starting a new Grist document . To add to an existing document, open that document, click the \u201cAdd New\u201d button and then \u201cImport from file\u201d. By default, each imported table is added as a new Grist table, but when examining the preview dialog for an import, you have an option to change the destination to an existing Grist table. You can also import any of the same formats from a URL, using the \u201cImport from URL\u201d option.","title":"Importing more data"},{"location":"imports/#the-import-dialog","text":"When you import data into an existing document, Grist opens an import dialog to show you what will be imported. This dialog offers available import options, lets you choose whether to create a new table or add to an existing one, and shows a preview of the data. The \u201cImport options\u201d link on the top right is sometimes useful when importing delimited files. Grist guesses the settings to parse the data (such as the field delimiter), but if it guesses incorrectly, you can adjust the settings.","title":"The Import dialog"},{"location":"imports/#guessing-data-structure","text":"In all cases, when you import a file, Grist makes guesses about the structure of the file. For Excel files, Grist treats each sheet as a separated table. For CSV and other delimited formats, one file becomes one table. For both Excel and delimited files, Grist tries to detect whether the headers are included and which line they occur in. If Grist detects there are no headers, it will name columns as \u201cA\u201d, \u201cB\u201d, \u201cC\u201d, etc. Grist automatically tries to parse numbers, dates, and boolean fields to detect the most suitable type for each column. It tries to be lossless: e.g. if it marks a column as numeric, any text values in it (such as \u201cN/A\u201d) will remain in the imported table, but will be highlighted due to the type mismatch. You can always rename tables and columns after an import, as well as convert types.","title":"Guessing data structure"},{"location":"imports/#import-from-google-drive","text":"Importing from a Google Drive is as easy as importing from an Excel file or a CSV file. You can either provide an URL of a file stored in the Google Drive or use a Google File Picker to choose a file from your own drive. To use a Picker, click the \u201cAdd New\u201d button and choose \u201cImport from Google Drive\u201d. To import, sign in to your Google Account by clicking the \u201cSign in\u201d button and following the sign-in process. Grist will ask for a permission to read the file you will import from Google Drive. We won\u2019t read any other files on your drive \u2014 just the single file you choose to import. Once the file has been chosen, the rest of the process is the same as importing from an Excel file. In the import dialog you may configure what data to import, and which destination table to add it to. If you have an URL to a file or a spreadsheet stored on your Google Drive or a file that is publicly accessible, you can import it directly using the \u201cImport from URL\u201d option from the \u201cAdd New\u201d menu. If the file is not shared publicly, Grist will ask you for permission to read files from your Google Drive. If you don\u2019t want to allow Grist to read your files, it will open up Google File Picker where you can select the file you want to import.","title":"Import from Google Drive"},{"location":"imports/#import-to-an-existing-table","text":"By default, Grist imports new data as new tables, but the Import dialog allows you to change the destination and import data into an existing table. When importing to an existing table, Grist will attempt to match the columns from your imported file to the columns in the destination table. To manually specify column matching, click the \u201cthree dots\u201d button to open a menu with a list of columns from your imported file. Click on a column name to match it to a destination column, or select \u2018Skip\u2019 to skip importing data from that column. You can also specify a formula for each imported column by clicking the gray source column field to open a formula editor. Formulas can reference one or more imported columns, and the result of evaluating the formula will be shown in the preview after closing the editor. Importing to an existing table is best suited for importing multiple datasets containing similar structure. For instance, you could import a bank statement as a new table, then import more statements from other months into the same table. For developers, the Grist API offers a more powerful way to add data to a Grist document.","title":"Import to an existing table"},{"location":"imports/#updating-existing-records","text":"Suppose the table we are importing to already contains some of the data in our file. We\u2019d like Grist to update these existing records rather than duplicate them. We can tell Grist to update these records by checking the \u201cUpdate existing records\u201d option, and specifying which fields to use for matching incoming data against existing records. An imported row and an existing record that have the same values for all of the selected merge fields are considered the same record. In this case, importing will update the fields of the record with the imported data. Blank values from the imported data will be skipped, leaving the corresponding fields in the original record unchanged. Note: If there are multiple imported rows that have the same values for the selected merge fields, the last row will be used for matching and updating. If there are multiple existing records that have the same values for the selected merge fields, only the first record will be updated if a matching imported row is found. Each time the merge fields are changed, Grist will generate a preview of the updates that will be made to the destination table, and display them in the preview table. Changes are highlighted as follows: New records have all of their fields highlighted in green. Updated records have red and green highlighting for any changed fields: red (with a strikethrough) for existing values from the destination, and green for new values from the imported file. Unchanged records have no highlighting. Field values that exist in the destination table, but are blank in the imported file, are distinguished by a light gray font color.","title":"Updating existing records"},{"location":"integrators/","text":"Integrator Services # Grist can be connected to thousands of other services via integrators with Grist support. These include: Zapier Integrately Pabbly Connect KonnectzIT n8n Configuring Integrators # Each integrator provides its own way to configure the connection between Grist and other services. Pabbly Connect has created a few videos walking through how to set up an integration with Grist using Pabbly Connect. Pabbly Connect Youtube - Grist Playlist Included below is a walkthrough of an example of how an integration with Grist can be configured using Zapier . Grist can trigger a workflow whenever there is a new or updated record in a table, leading to action in another service. Conversely, workflows triggered by other services can consult, add, or update records in Grist tables. Example: Storing form submissions # Suppose we have a form for collecting votes on the color of a proposed new bike shed: The form is set up using Google Forms (for this example), and we want the responses to be stored in a Grist document: One way to make this happen is with Zapier . So let\u2019s sign in on the Zapier site and then visit the Grist integration page : We\u2019d like to pair Grist with Google forms. Zapier supports several form providers, and the overall process for integration is similar for them all. Just type in the provider you want. For this tutorial, we\u2019re going with Google forms. Once we\u2019ve picked the provider to integrate with, we need to pin down exactly what we want it to do, from the available \u201ctriggers\u201d and \u201cactions.\u201d In this case, we choose that when there is a New Response in Spreadsheet trigger for Google Forms, we will do the Create Record action in Grist. We click the build button to start filling in the details: Since the triggering event for the integration will happen in Google Forms, we are first asked to give Zapier some access rights to your forms. Once that is done, we are prompted to confirm which spreadsheet to use: Then we specify which worksheet within the spreadsheet to use (easy if there is just one). For Zapier\u2019s benefit in a later step, it is important that there be at least one sample response already in the spreadsheet. That\u2019s the Google side done. Now for the Grist side. We are prompted to give an API key for Grist, so we set up an API key if we haven\u2019t already. To give precise access rights, we could set up a user account just for the integration, and give it access to just what it needs, and supply its API key. Now we confirm the team to use - personal docs or a team site we have access to: Then we pick the Grist document to send form responses to: And then we pick the table to use within that document. It should have columns to store whatever parts of the form we want to keep. It is important to make this table if it doesn\u2019t exist already; it won\u2019t be created automatically. It isn\u2019t important to match column names with questions. Zapier allows for flexible mapping of fields between services. In our case, a one-to-one mapping works fine: Ok! Now we can click our button to have Zap test our integration. All going well, we can turn the \u201cZap\u201d on and leave it run. Now is the time to try making some submissions, and go have a cup of something. Free \u201cZaps\u201d may run periodically to check for new submissions, so don\u2019t expect immediate results in all cases. But eventually, you should see the votes pouring in! Example: Sending email alerts # We\u2019ve seen an example of an outside service sending data to Grist. Now let\u2019s look at an example of Grist sending data to an outside service. Continuing our form example, where a Grist document is accumulating votes for a preferred color: now suppose that every time a new vote comes in we want to send an email summarizing which option is in the lead. We write a formula to prepare the text in a Text cell: Let\u2019s return again to the Grist integration page on Zapier. There are several mail integrations. For this example, we pick Gmail: Once we\u2019ve picked the service to connect, now we choose exactly what we want it to do. In this case, we choose that when there is a New or Updated Record (Instant) in Grist, we will Send Email in Gmail. Note the Instant there. Triggers in Zapier can be either a regular kind where Zapier periodically checks for changes (this is relatively slow), or a special \u201cinstant\u201d kind that needs special support from the triggering service but is a lot faster. Grist supports either kind of trigger, and we strongly recommend \u201cinstant\u201d if you prefer results in seconds rather than minutes, and especially if you are the sort to get anxious if someone doesn\u2019t respond to your IMs immediately. Once we\u2019ve chosen a Grist account to use as before, we can pick a table within a document to monitor. For instant triggers, we can optionally specify a \u201creadiness\u201d column . If we leave this blank, anytime a record is created or changed in the selected table, Grist will notify Zapier about it. If we set it, it should generally be to a toggle column , and Grist will notify Zapier only for records when that column is turned on. That is handy for records that have many columns being filled in manually, when we don\u2019t want to trigger until they are complete. For this example, it is fine to leave the readiness column blank. (For regular non-instant triggers, we would need to pick a specific column to monitor. Ideally this would be an Updated At column, see Timestamp columns ). On the Gmail side, we can email to pre-set addresses, or this could be configured dynamically (we\u2019ll see an example of how in a moment): We choose to set the body of the email to contain \u201cCustom\u201d content, in this case the Text cell we calculated earlier. And we\u2019re done! Zapier will offer to make a quick test that emails go out correctly: Then you can make some votes and watch the system work. For instant triggers, results should show up fairly snappily. Otherwise, Zapier has a \u201crun zap\u201d functionality to force an integration to update immediately: And emails should start showing up in the desired inboxes. May the best almost indistinguishable shade win! Readiness column # Grist has a mechanism for alerting other services when data changes within a document. This serves as the basis for Zapier instant triggers. Since Grist is a spreadsheet, it is common for records (rows) to be created empty, and for cells to then be filled in one by one. This creates an important nuance for notifications. Usually it won\u2019t be desirable to send a notification until the record is in some sense \u201cready\u201d, but when exactly is that? Grist lets the user decide for themselves, by creating a toggle (boolean) column which is turned on when the record is ready. The column can be set manually, or via a formula. This is called a readiness column. For example, if you only want to activate a trigger when columns called Name and Email are not empty, your readiness column can have the following formula: bool($Name and $Email) You would make the column take effect by supplying it in the Readiness column option described in the email alert example . Triggering (or avoiding triggering) on pre-existing records # The order of steps matters when setting up an integration that uses a readiness column. If you have existing data, think through whether you want the integration to affect all existing data or just updates and new data. For example, if you are sending data from Grist to Google Sheets using a Zapier integration, you\u2019ll probably want to send your existing data. In this case, set up and enable your Zap first with an empty readiness column, then turn on all the readiness cells. If you want to send a notification only when something is added to Grist, and not for pre-existing records, make sure your readiness cells are all turned on prior to enabling the integration, otherwise once they are turned on notifications will be sent for all of them. That may be a lot!","title":"Integrator Services"},{"location":"integrators/#integrator-services","text":"Grist can be connected to thousands of other services via integrators with Grist support. These include: Zapier Integrately Pabbly Connect KonnectzIT n8n","title":"Integrator Services"},{"location":"integrators/#configuring-integrators","text":"Each integrator provides its own way to configure the connection between Grist and other services. Pabbly Connect has created a few videos walking through how to set up an integration with Grist using Pabbly Connect. Pabbly Connect Youtube - Grist Playlist Included below is a walkthrough of an example of how an integration with Grist can be configured using Zapier . Grist can trigger a workflow whenever there is a new or updated record in a table, leading to action in another service. Conversely, workflows triggered by other services can consult, add, or update records in Grist tables.","title":"Configuring Integrators"},{"location":"integrators/#example-storing-form-submissions","text":"Suppose we have a form for collecting votes on the color of a proposed new bike shed: The form is set up using Google Forms (for this example), and we want the responses to be stored in a Grist document: One way to make this happen is with Zapier . So let\u2019s sign in on the Zapier site and then visit the Grist integration page : We\u2019d like to pair Grist with Google forms. Zapier supports several form providers, and the overall process for integration is similar for them all. Just type in the provider you want. For this tutorial, we\u2019re going with Google forms. Once we\u2019ve picked the provider to integrate with, we need to pin down exactly what we want it to do, from the available \u201ctriggers\u201d and \u201cactions.\u201d In this case, we choose that when there is a New Response in Spreadsheet trigger for Google Forms, we will do the Create Record action in Grist. We click the build button to start filling in the details: Since the triggering event for the integration will happen in Google Forms, we are first asked to give Zapier some access rights to your forms. Once that is done, we are prompted to confirm which spreadsheet to use: Then we specify which worksheet within the spreadsheet to use (easy if there is just one). For Zapier\u2019s benefit in a later step, it is important that there be at least one sample response already in the spreadsheet. That\u2019s the Google side done. Now for the Grist side. We are prompted to give an API key for Grist, so we set up an API key if we haven\u2019t already. To give precise access rights, we could set up a user account just for the integration, and give it access to just what it needs, and supply its API key. Now we confirm the team to use - personal docs or a team site we have access to: Then we pick the Grist document to send form responses to: And then we pick the table to use within that document. It should have columns to store whatever parts of the form we want to keep. It is important to make this table if it doesn\u2019t exist already; it won\u2019t be created automatically. It isn\u2019t important to match column names with questions. Zapier allows for flexible mapping of fields between services. In our case, a one-to-one mapping works fine: Ok! Now we can click our button to have Zap test our integration. All going well, we can turn the \u201cZap\u201d on and leave it run. Now is the time to try making some submissions, and go have a cup of something. Free \u201cZaps\u201d may run periodically to check for new submissions, so don\u2019t expect immediate results in all cases. But eventually, you should see the votes pouring in!","title":"Example: Storing form submissions"},{"location":"integrators/#example-sending-email-alerts","text":"We\u2019ve seen an example of an outside service sending data to Grist. Now let\u2019s look at an example of Grist sending data to an outside service. Continuing our form example, where a Grist document is accumulating votes for a preferred color: now suppose that every time a new vote comes in we want to send an email summarizing which option is in the lead. We write a formula to prepare the text in a Text cell: Let\u2019s return again to the Grist integration page on Zapier. There are several mail integrations. For this example, we pick Gmail: Once we\u2019ve picked the service to connect, now we choose exactly what we want it to do. In this case, we choose that when there is a New or Updated Record (Instant) in Grist, we will Send Email in Gmail. Note the Instant there. Triggers in Zapier can be either a regular kind where Zapier periodically checks for changes (this is relatively slow), or a special \u201cinstant\u201d kind that needs special support from the triggering service but is a lot faster. Grist supports either kind of trigger, and we strongly recommend \u201cinstant\u201d if you prefer results in seconds rather than minutes, and especially if you are the sort to get anxious if someone doesn\u2019t respond to your IMs immediately. Once we\u2019ve chosen a Grist account to use as before, we can pick a table within a document to monitor. For instant triggers, we can optionally specify a \u201creadiness\u201d column . If we leave this blank, anytime a record is created or changed in the selected table, Grist will notify Zapier about it. If we set it, it should generally be to a toggle column , and Grist will notify Zapier only for records when that column is turned on. That is handy for records that have many columns being filled in manually, when we don\u2019t want to trigger until they are complete. For this example, it is fine to leave the readiness column blank. (For regular non-instant triggers, we would need to pick a specific column to monitor. Ideally this would be an Updated At column, see Timestamp columns ). On the Gmail side, we can email to pre-set addresses, or this could be configured dynamically (we\u2019ll see an example of how in a moment): We choose to set the body of the email to contain \u201cCustom\u201d content, in this case the Text cell we calculated earlier. And we\u2019re done! Zapier will offer to make a quick test that emails go out correctly: Then you can make some votes and watch the system work. For instant triggers, results should show up fairly snappily. Otherwise, Zapier has a \u201crun zap\u201d functionality to force an integration to update immediately: And emails should start showing up in the desired inboxes. May the best almost indistinguishable shade win!","title":"Example: Sending email alerts"},{"location":"integrators/#readiness-column","text":"Grist has a mechanism for alerting other services when data changes within a document. This serves as the basis for Zapier instant triggers. Since Grist is a spreadsheet, it is common for records (rows) to be created empty, and for cells to then be filled in one by one. This creates an important nuance for notifications. Usually it won\u2019t be desirable to send a notification until the record is in some sense \u201cready\u201d, but when exactly is that? Grist lets the user decide for themselves, by creating a toggle (boolean) column which is turned on when the record is ready. The column can be set manually, or via a formula. This is called a readiness column. For example, if you only want to activate a trigger when columns called Name and Email are not empty, your readiness column can have the following formula: bool($Name and $Email) You would make the column take effect by supplying it in the Readiness column option described in the email alert example .","title":"Readiness column"},{"location":"integrators/#triggering-or-avoiding-triggering-on-pre-existing-records","text":"The order of steps matters when setting up an integration that uses a readiness column. If you have existing data, think through whether you want the integration to affect all existing data or just updates and new data. For example, if you are sending data from Grist to Google Sheets using a Zapier integration, you\u2019ll probably want to send your existing data. In this case, set up and enable your Zap first with an empty readiness column, then turn on all the readiness cells. If you want to send a notification only when something is added to Grist, and not for pre-existing records, make sure your readiness cells are all turned on prior to enabling the integration, otherwise once they are turned on notifications will be sent for all of them. That may be a lot!","title":"Triggering (or avoiding triggering) on pre-existing records"},{"location":"investment-research/","text":"How to analyze and visualize data # Grist offers several powerful ways to analyze and visualize data. In this tutorial, you\u2019ll learn how to: Create summary tables Create and configure charts Link charts dynamically To explain these features, we\u2019ll use the sample document \u201cInvestment Research\u201d 1 . The dataset comes from Kaggle , and includes companies and investments in them up to 2013. Let\u2019s take a look at the sample document and then we\u2019ll talk about how to build it so that you can apply these tools to your own data. Exploring the example # Open the document \u201cInvestment Research\u201d, found in Examples & Templates in your Grist home page. The first thing you\u2019ll see is \u201cOverview\u201d. This page contains two charts next to two tables. The top left has a pie chart showing the distribution of investments by category. The table next to it has the same data in tabular form. Below the pie chart is a bar graph showing the total investments raised by year. It is also accompanied by the same data in the table next to it in tabular form. All these charts and tables are examples of \u201csummary tables\u201d, which we\u2019ll describe below. The next page, \u201cBreakdowns\u201d, also contains two tables and two charts, but these are linked dynamically and offer much more detailed insight into the data. On the top left is a table showing the total funding by year (the same table as we saw on the previous page). This table serves as a driver for the chart next to it. When you click on a year in the table, the pie chart updates to show the distribution of investments in that year. Similarly, the bottom table shows investments by category. When you click on any category, the line chart next to it updates to show the history of funding in that category over the years. Note how powerful this is, and how much insight you can gain from it. For instance, you can see that Advertising category has been getting a lot of investment in NY since 2007, but was overtaken by E-commerce in 2012-2013, while the Fashion category had a major spike in 2011. On the next page, \u201cCompany Details\u201d, we get to see the granular data of this dataset. Here, we see a list of companies and the categories they fall into. Each company shown has a link pointing to its listing on the Crunchbase website. Selecting a company shows a card with its details, as well as a list of all the investments it has received. This is where we begin to see the power of Grist. The original dataset is a flat spreadsheet of companies, and an even bigger spreadsheet of investments. By displaying the data graphically, the data comes alive, making it powerful and useful. How can I make this? # With Grist, presenting your own data in graphic form is a few easy steps away. Let\u2019s begin with the first step. Get the data # Let\u2019s import the raw data. We\u2019ll import two CSV files, where each will become its own table. To follow along, save the files from crunchbase_companies_ny.csv and crunchbase_investments_ny.csv to your computer first. Then, create a Grist document by importing the first file from the home page. Next, import the second table using the \u201cAdd New\u201d button and the \u201cImport from file\u201d option. In the import dialog box, finish by clicking \u201cImport\u201d on the bottom left. The tables you\u2019ve imported will be named \u201ccrunchbase_companies_ny\u201d and \u201ccrunchbase_investments_ny\u201d. Use the page menu (click on the three dots beside the file name) to rename them \u201cCompanies\u201d and \u201cInvestments\u201d. Make it relational # The power of Grist comes from giving structure to the data. Take a look at the \u201cInvestments\u201d table. Sort by the first column and you\u2019ll notice how much repetition there is: each row contains the complete company info, which both duplicates the data in the \u201cCompanies\u201d table, and is repeated multiple times when multiple investments apply to the same company. 2 The reality is that each investment applies to a single company. Each investment row only needs to contain a reference to a company, and the data specific to that investment. To make it so, find a column that identifies a company uniquely. In this dataset, the first column, \u201ccompany_permalink\u201d, does it best 3 . Click on the arrow in the column header and click \u201cColumn Options\u201d. Click on the arrow beside \u201cText\u201d under the \u201cColumn Type\u201d in the dialogue box at the right of the screen and select \u201cReference\u201d from the list. Grist will automatically suggest to make it a \u201cReference\u201d to the \u201cCompanies\u201d table, and to show the referenced company\u2019s \u201cpermalink\u201d. Click \u201cApply\u201d to save this conversion. Let\u2019s also rename this column to \u201cCompany\u201d. In Grist, duplicated data is not needed and we recommend removing it. Using the Option-Minus (Mac) or Alt-Minus (Windows) shortcut is a quick way to remove columns. After removing the columns from \u201ccompany_name\u201d to \u201ccompany_city\u201d, here\u2019s what\u2019s left: The data you\u2019ve deleted isn\u2019t lost since it was duplicated \u2013 it\u2019s still available in the \u201cCompanies\u201d table and can be used in an Investment record\u2019s formula as, e.g. $Company.company_xxx . In fact, there\u2019s a handy way to create this kind of formula. Let\u2019s create one that we\u2019ll need later. Click the header of the \u201cCompany\u201d column. In the right panel\u2019s Column tab, you\u2019ll see a section \u2018Add Referenced Columns\u2019. Click \u2018Add Column\u2019 to add the \u201ccategory_code\u201d column. A new column will be added to the table with the formula $Company.category_code . For each investment, it shows the \u201ccategory_code\u201d of the company linked to its investment record. Summarize # The powerful feature you\u2019ve been waiting for is the one that summarizes the data. To utilize this, let\u2019s add a table showing companies grouped by \u201ccategory_code\u201d. In the \u201cAdd New\u201d menu at the top left, select \u201cAdd Page\u201d. In the dialog box, select \u201cTable\u201d and \u201cCompanies\u201d, and then use the summation icon ( ) to select the \u201cGroup By\u201d columns \u2013 i.e. the columns by which to summarize. If you don\u2019t select any columns, you\u2019ll just get a single row of totals. If you summarize by \u201ccategory_code\u201d, you\u2019ll get a row for each distinct value of \u201ccategory_code\u201d. Let\u2019s do that and then click \u201cAdd Page\u201d. This is similar to Excel\u2019s pivot tables. Each row represents the group of records from the source table (\u201cCompanies\u201d) that have a particular value of \u201ccategory_code\u201d. There is a reminder of that in the table\u2019s title (\u201cCOMPANIES [by category_code]\u201d). Such summary tables can (and should!) use formulas. The columns you choose when creating the table are the identifiers of the groups. All other columns are formula columns \u2013 they are calculated. In formulas, the group of source records summarized by one row is available as the value \u201c$group\u201d. For example, you\u2019ll see a column created automatically called \u201ccount\u201d. If you hit \u201cEnter\u201d, you\u2019ll see the formula in it \u2013 len($group) \u2013 that\u2019s just the number of records in that group of records, i.e. the number of companies in that category. For numeric columns in the source table, summary tables automatically get a same-named numeric column containing a sum, with a formula such as SUM($group.funding_total_usd) . Side note for Python fans. $group is a special Python object. It\u2019s an iterable collection of records. Using an attribute like $group.A is a shorthand for the list of values in the A column of all the records in the group, i.e. it\u2019s roughly equivalent to [r.A for r in $group] . Sometimes, adding the values doesn\u2019t make sense. E.g. the sum of \u201cfounded_year\u201d is meaningless. It\u2019s best to delete this and any other column we don\u2019t need, which leaves us with the \u201cfunding_total_usd\u201d column. Since this column contains large numbers, it\u2019s a good time to look at the \u201cNumber Format\u201d section of its configuration, and click , (or perhaps $ ) to format numbers to be more readable. Let\u2019s add a second summary table. Select \u201cAdd New\u201d again to \u201cAdd Widget to Page\u201d. To get a summary by year, select the \u201cInvestments\u201d table under \u201cSelect Data\u201d, and again use its sum symbol (\u2211) to select the column by which to summarize: \u201cfunded_year\u201d and then click \u201cAdd to page\u201d. This produces a second summary table that shows a record for each year, with each representing a group of \u201cInvestments\u201d rows for that year. The most useful column is \u201craised_amount_usd\u201d, adding all investments made in that year. Let\u2019s delete the unneeded columns. You\u2019ll notice pink values in \u201craised_amount_usd\u201d. That\u2019s because Grist guesses the column type to be an integer.The pink sums are instances where the numbers exceed Javascript\u2019s ability to handle large integers. To correct for this, the type of the column should be switched to \u201cNumeric\u201d (which trades off precision for the ability to represent very large and very small numbers). Change the type to \u201cNumeric\u201c under \u201cColumn options\u201d. This is again a good time to pick a friendlier number format for the column, and to make it wider to fit the longer numbers. Chart, graph, plot # You can make a chart of any data. To this page, we want to add a graphic version of each summary table. Select the \u201cAdd New\u201d button again, pick \u201cAdd Widget to Page\u201d, select \u201cChart\u201d as the widget, and the same table (Companies) and summary column (category_code) as before. Then click \u201cAdd to Page\u201d. For a chart, you\u2019ll always follow up by customizing it. Open the right panel, and select \u201cChart\u201d tab / \u201cWidget\u201d subtab. The \u201cVisible Series\u201d section in the subtab determines which columns of data will be used as the series in the chart. Their exact meaning depends on the chart type. For this first chart, under \u201cChart type, select \u201cPie Chart\u201d. To construct this chart, two \u201cVisible Series\u201d are required: the first one will be used as labels, and the second as values. Since we want the chart to show \u201ccategory_code\u201d as labels, and \u201cfunding_total_usd\u201d as values, those should be the two items in the \u201cVisible Series\u201d list in the configuration panel. As you move your mouse over the items in that list, use the \u201ceye\u201d icon that shows up to remove the other series from the list. Alternatively, you can select the unneeded columns using checkboxes, and click \u201cHide Series\u201d. Now add a chart showing a trend by year. Add another \u201cWidget to page\u201d, select \u201cChart\u201d under \u201cWidget\u201d, select \u201cInvestments\u201d under \u201cSelect Data\u201d, click summation ( ) to group by \u201cfunded_year\u201d, and click \u201cAdd to Page\u201d. To customize this chart, stick with the chart type \u201cBar Chart\u201d. The list of \u201cVisible Series\u201d in the \u201cChart\u201d tab should now be adjusted: the first series will be the values for the X (horizontal) axis, and second (and possible additional) series will be the values for the Y (vertical) axis. So hide the unwanted columns (\u201ccount\u201d), and leave the \u201cfunded_year\u201d first (to serve as the X-values), and \u201craised_amount_usd\u201d second (to serve as the Y-values). You can rearrange the sections on the screen into a configuration you\u2019d like to see for a dashboard. Move your mouse to the top left of each section until you see a \u201cdrag handle\u201d icon. Use that icon to drag each section into the desired spot relative to other sections. Once you\u2019re finished, rename the page \u201cOverview\u201d. Dynamic charts # If you\u2019ve read our other tutorials on linking data, this will come naturally. Charts are simply a different way to show data, and they can be linked in the same way as tables. For our example, we\u2019ll add a new page with a summary table: select widget \u201cTable\u201d, data \u201cInvestments\u201d, group by \u201cfunded_year\u201d, click \u201cAdd Page\u201d. Let\u2019s rename this new page \u201cBreakdowns\u201d. Next, add a widget to this page, selecting widget \u201cChart\u201d, data \u201cInvestments\u201d. For \u201cGroup By\u201d, we pick two columns: \u201cCompany_category_code\u201d and \u201cfunded_year\u201d. Note: This is why we added the \u201cCompany_category_code\u201d column earlier. We can only group investment records by the category code if we have this code for each investment. The \u201cSelect By\u201d dropdown at the bottom left of the dialog box lists widgets already on the screen that can control the selection of data in the chart we are adding. In \u201cSelect By\u201d, choose \u201cINVESTMENTS [by funded_year]\u201d, and click \u201cAdd to Page\u201d. Note: If you need to make changes to a widget you already added, such as change its type, \u201cGroup By\u201d, or \u201cSelect By\u201d settings, you can always do so from the \u201cData\u201d subtab in the widget settings, using the \u201cEdit Data Selection\u201d button. We want to be able to select a year, and then show a pie chart for that year that displays the total for each category code. The \u201cSelect By\u201d option we chose ensures that only the selected year\u2019s data is used. All that\u2019s left is to change the chart type to \u201cPie Chart\u201d, and set \u201cVisible Series\u201d to only \u201ccategory_code\u201d and \u201craised_amount_usd\u201d and hide the other data series. Note: Graphs need more screenspace, so our small screenshots will look better if we close the side panels by clicking on the opener icons ( , ). Let\u2019s also sort the table by \u201cfunded_year\u201d. As far as sorting, the highlighted button above the table reminds you that sort settings aren\u2019t saved automatically. Click the green button and select \u201cSave\u201d to do that. What\u2019s the result? We can click through the years (or use arrow keys), and see the distribution by category change. Note: If clicking through the years does not affect the chart, the chart must not be linked. You can check and correct it by using the \u201cthree dots\u201d menu on top right of the chart, clicking \u201cData selection\u201d, and ensuring that \u201cSelect By\u201d dropdown is showing \u201cINVESTMENTS [by funded_year]\u201d. To complete the example, we will add two more sections to this \u201cBreakdowns\u201d page. One will be a table listing company categories, and linked to it will be a chart showing the amount of investment in that category over the years. To add the table of categories, use \u201cAdd Widget to Page\u201d, and select \u201cTable\u201d widget, \u201cInvestments\u201d data, grouped by \u201cCompany_category_code\u201d. The \u201cfunded_year\u201d column in the resulting table is meaningless, and should be deleted. For the last step, we add another chart. We need to remember to group by both \u201cCompany_category_code\u201d \u201cfunded_year\u201d, and to set a suitable \u201cSelect By\u201d widget for it. Since there are two tables on this page, you have a choice of which one will drive the data in this chart. In this case, pick the widget that we just added: \u201cINVESTMENTS [by Company_category_code]\u201d. As in the previous section, we configure the chart by selecting \u201cChart Type\u201d as \u201cBar Chart\u201d, and in the \u201cVisible Series\u201d list, leaving the series \u201cfunded_year\u201d (the x-axis) and \u201craised_amount_usd\u201d (the y-axis), and hiding the rest. We can now click through the categories, and see the history of investment into each one. Next steps # If you\u2019re unfamiliar with how we created the \u201cCompany Details\u201d page that\u2019s present in the example, visit one of these earlier tutorials to learn how: \u2018How to build a Lightweight CRM\u2019, or \u2018Managing your Business in Grist\u2019. That\u2019s it! Now go analyze some data! The sample document includes only the \u201ccompanies\u201d and \u201cinvestments\u201d data, and includes only New York companies to keep it smaller and faster. \u21a9 Such duplication is commonly seen in spreadsheets. Data in this form is called \u201cdenormalized\u201d. \u21a9 If you don\u2019t have a single identifying column, you can construct one with a formula. \u21a9","title":"Analyze and visualize"},{"location":"investment-research/#how-to-analyze-and-visualize-data","text":"Grist offers several powerful ways to analyze and visualize data. In this tutorial, you\u2019ll learn how to: Create summary tables Create and configure charts Link charts dynamically To explain these features, we\u2019ll use the sample document \u201cInvestment Research\u201d 1 . The dataset comes from Kaggle , and includes companies and investments in them up to 2013. Let\u2019s take a look at the sample document and then we\u2019ll talk about how to build it so that you can apply these tools to your own data.","title":""},{"location":"investment-research/#exploring-the-example","text":"Open the document \u201cInvestment Research\u201d, found in Examples & Templates in your Grist home page. The first thing you\u2019ll see is \u201cOverview\u201d. This page contains two charts next to two tables. The top left has a pie chart showing the distribution of investments by category. The table next to it has the same data in tabular form. Below the pie chart is a bar graph showing the total investments raised by year. It is also accompanied by the same data in the table next to it in tabular form. All these charts and tables are examples of \u201csummary tables\u201d, which we\u2019ll describe below. The next page, \u201cBreakdowns\u201d, also contains two tables and two charts, but these are linked dynamically and offer much more detailed insight into the data. On the top left is a table showing the total funding by year (the same table as we saw on the previous page). This table serves as a driver for the chart next to it. When you click on a year in the table, the pie chart updates to show the distribution of investments in that year. Similarly, the bottom table shows investments by category. When you click on any category, the line chart next to it updates to show the history of funding in that category over the years. Note how powerful this is, and how much insight you can gain from it. For instance, you can see that Advertising category has been getting a lot of investment in NY since 2007, but was overtaken by E-commerce in 2012-2013, while the Fashion category had a major spike in 2011. On the next page, \u201cCompany Details\u201d, we get to see the granular data of this dataset. Here, we see a list of companies and the categories they fall into. Each company shown has a link pointing to its listing on the Crunchbase website. Selecting a company shows a card with its details, as well as a list of all the investments it has received. This is where we begin to see the power of Grist. The original dataset is a flat spreadsheet of companies, and an even bigger spreadsheet of investments. By displaying the data graphically, the data comes alive, making it powerful and useful.","title":"Exploring the example"},{"location":"investment-research/#how-can-i-make-this","text":"With Grist, presenting your own data in graphic form is a few easy steps away. Let\u2019s begin with the first step.","title":""},{"location":"investment-research/#get-the-data","text":"Let\u2019s import the raw data. We\u2019ll import two CSV files, where each will become its own table. To follow along, save the files from crunchbase_companies_ny.csv and crunchbase_investments_ny.csv to your computer first. Then, create a Grist document by importing the first file from the home page. Next, import the second table using the \u201cAdd New\u201d button and the \u201cImport from file\u201d option. In the import dialog box, finish by clicking \u201cImport\u201d on the bottom left. The tables you\u2019ve imported will be named \u201ccrunchbase_companies_ny\u201d and \u201ccrunchbase_investments_ny\u201d. Use the page menu (click on the three dots beside the file name) to rename them \u201cCompanies\u201d and \u201cInvestments\u201d.","title":"Get the data"},{"location":"investment-research/#make-it-relational","text":"The power of Grist comes from giving structure to the data. Take a look at the \u201cInvestments\u201d table. Sort by the first column and you\u2019ll notice how much repetition there is: each row contains the complete company info, which both duplicates the data in the \u201cCompanies\u201d table, and is repeated multiple times when multiple investments apply to the same company. 2 The reality is that each investment applies to a single company. Each investment row only needs to contain a reference to a company, and the data specific to that investment. To make it so, find a column that identifies a company uniquely. In this dataset, the first column, \u201ccompany_permalink\u201d, does it best 3 . Click on the arrow in the column header and click \u201cColumn Options\u201d. Click on the arrow beside \u201cText\u201d under the \u201cColumn Type\u201d in the dialogue box at the right of the screen and select \u201cReference\u201d from the list. Grist will automatically suggest to make it a \u201cReference\u201d to the \u201cCompanies\u201d table, and to show the referenced company\u2019s \u201cpermalink\u201d. Click \u201cApply\u201d to save this conversion. Let\u2019s also rename this column to \u201cCompany\u201d. In Grist, duplicated data is not needed and we recommend removing it. Using the Option-Minus (Mac) or Alt-Minus (Windows) shortcut is a quick way to remove columns. After removing the columns from \u201ccompany_name\u201d to \u201ccompany_city\u201d, here\u2019s what\u2019s left: The data you\u2019ve deleted isn\u2019t lost since it was duplicated \u2013 it\u2019s still available in the \u201cCompanies\u201d table and can be used in an Investment record\u2019s formula as, e.g. $Company.company_xxx . In fact, there\u2019s a handy way to create this kind of formula. Let\u2019s create one that we\u2019ll need later. Click the header of the \u201cCompany\u201d column. In the right panel\u2019s Column tab, you\u2019ll see a section \u2018Add Referenced Columns\u2019. Click \u2018Add Column\u2019 to add the \u201ccategory_code\u201d column. A new column will be added to the table with the formula $Company.category_code . For each investment, it shows the \u201ccategory_code\u201d of the company linked to its investment record.","title":"Make it relational"},{"location":"investment-research/#summarize","text":"The powerful feature you\u2019ve been waiting for is the one that summarizes the data. To utilize this, let\u2019s add a table showing companies grouped by \u201ccategory_code\u201d. In the \u201cAdd New\u201d menu at the top left, select \u201cAdd Page\u201d. In the dialog box, select \u201cTable\u201d and \u201cCompanies\u201d, and then use the summation icon ( ) to select the \u201cGroup By\u201d columns \u2013 i.e. the columns by which to summarize. If you don\u2019t select any columns, you\u2019ll just get a single row of totals. If you summarize by \u201ccategory_code\u201d, you\u2019ll get a row for each distinct value of \u201ccategory_code\u201d. Let\u2019s do that and then click \u201cAdd Page\u201d. This is similar to Excel\u2019s pivot tables. Each row represents the group of records from the source table (\u201cCompanies\u201d) that have a particular value of \u201ccategory_code\u201d. There is a reminder of that in the table\u2019s title (\u201cCOMPANIES [by category_code]\u201d). Such summary tables can (and should!) use formulas. The columns you choose when creating the table are the identifiers of the groups. All other columns are formula columns \u2013 they are calculated. In formulas, the group of source records summarized by one row is available as the value \u201c$group\u201d. For example, you\u2019ll see a column created automatically called \u201ccount\u201d. If you hit \u201cEnter\u201d, you\u2019ll see the formula in it \u2013 len($group) \u2013 that\u2019s just the number of records in that group of records, i.e. the number of companies in that category. For numeric columns in the source table, summary tables automatically get a same-named numeric column containing a sum, with a formula such as SUM($group.funding_total_usd) . Side note for Python fans. $group is a special Python object. It\u2019s an iterable collection of records. Using an attribute like $group.A is a shorthand for the list of values in the A column of all the records in the group, i.e. it\u2019s roughly equivalent to [r.A for r in $group] . Sometimes, adding the values doesn\u2019t make sense. E.g. the sum of \u201cfounded_year\u201d is meaningless. It\u2019s best to delete this and any other column we don\u2019t need, which leaves us with the \u201cfunding_total_usd\u201d column. Since this column contains large numbers, it\u2019s a good time to look at the \u201cNumber Format\u201d section of its configuration, and click , (or perhaps $ ) to format numbers to be more readable. Let\u2019s add a second summary table. Select \u201cAdd New\u201d again to \u201cAdd Widget to Page\u201d. To get a summary by year, select the \u201cInvestments\u201d table under \u201cSelect Data\u201d, and again use its sum symbol (\u2211) to select the column by which to summarize: \u201cfunded_year\u201d and then click \u201cAdd to page\u201d. This produces a second summary table that shows a record for each year, with each representing a group of \u201cInvestments\u201d rows for that year. The most useful column is \u201craised_amount_usd\u201d, adding all investments made in that year. Let\u2019s delete the unneeded columns. You\u2019ll notice pink values in \u201craised_amount_usd\u201d. That\u2019s because Grist guesses the column type to be an integer.The pink sums are instances where the numbers exceed Javascript\u2019s ability to handle large integers. To correct for this, the type of the column should be switched to \u201cNumeric\u201d (which trades off precision for the ability to represent very large and very small numbers). Change the type to \u201cNumeric\u201c under \u201cColumn options\u201d. This is again a good time to pick a friendlier number format for the column, and to make it wider to fit the longer numbers.","title":"Summarize"},{"location":"investment-research/#chart-graph-plot","text":"You can make a chart of any data. To this page, we want to add a graphic version of each summary table. Select the \u201cAdd New\u201d button again, pick \u201cAdd Widget to Page\u201d, select \u201cChart\u201d as the widget, and the same table (Companies) and summary column (category_code) as before. Then click \u201cAdd to Page\u201d. For a chart, you\u2019ll always follow up by customizing it. Open the right panel, and select \u201cChart\u201d tab / \u201cWidget\u201d subtab. The \u201cVisible Series\u201d section in the subtab determines which columns of data will be used as the series in the chart. Their exact meaning depends on the chart type. For this first chart, under \u201cChart type, select \u201cPie Chart\u201d. To construct this chart, two \u201cVisible Series\u201d are required: the first one will be used as labels, and the second as values. Since we want the chart to show \u201ccategory_code\u201d as labels, and \u201cfunding_total_usd\u201d as values, those should be the two items in the \u201cVisible Series\u201d list in the configuration panel. As you move your mouse over the items in that list, use the \u201ceye\u201d icon that shows up to remove the other series from the list. Alternatively, you can select the unneeded columns using checkboxes, and click \u201cHide Series\u201d. Now add a chart showing a trend by year. Add another \u201cWidget to page\u201d, select \u201cChart\u201d under \u201cWidget\u201d, select \u201cInvestments\u201d under \u201cSelect Data\u201d, click summation ( ) to group by \u201cfunded_year\u201d, and click \u201cAdd to Page\u201d. To customize this chart, stick with the chart type \u201cBar Chart\u201d. The list of \u201cVisible Series\u201d in the \u201cChart\u201d tab should now be adjusted: the first series will be the values for the X (horizontal) axis, and second (and possible additional) series will be the values for the Y (vertical) axis. So hide the unwanted columns (\u201ccount\u201d), and leave the \u201cfunded_year\u201d first (to serve as the X-values), and \u201craised_amount_usd\u201d second (to serve as the Y-values). You can rearrange the sections on the screen into a configuration you\u2019d like to see for a dashboard. Move your mouse to the top left of each section until you see a \u201cdrag handle\u201d icon. Use that icon to drag each section into the desired spot relative to other sections. Once you\u2019re finished, rename the page \u201cOverview\u201d.","title":"Chart, graph, plot"},{"location":"investment-research/#dynamic-charts","text":"If you\u2019ve read our other tutorials on linking data, this will come naturally. Charts are simply a different way to show data, and they can be linked in the same way as tables. For our example, we\u2019ll add a new page with a summary table: select widget \u201cTable\u201d, data \u201cInvestments\u201d, group by \u201cfunded_year\u201d, click \u201cAdd Page\u201d. Let\u2019s rename this new page \u201cBreakdowns\u201d. Next, add a widget to this page, selecting widget \u201cChart\u201d, data \u201cInvestments\u201d. For \u201cGroup By\u201d, we pick two columns: \u201cCompany_category_code\u201d and \u201cfunded_year\u201d. Note: This is why we added the \u201cCompany_category_code\u201d column earlier. We can only group investment records by the category code if we have this code for each investment. The \u201cSelect By\u201d dropdown at the bottom left of the dialog box lists widgets already on the screen that can control the selection of data in the chart we are adding. In \u201cSelect By\u201d, choose \u201cINVESTMENTS [by funded_year]\u201d, and click \u201cAdd to Page\u201d. Note: If you need to make changes to a widget you already added, such as change its type, \u201cGroup By\u201d, or \u201cSelect By\u201d settings, you can always do so from the \u201cData\u201d subtab in the widget settings, using the \u201cEdit Data Selection\u201d button. We want to be able to select a year, and then show a pie chart for that year that displays the total for each category code. The \u201cSelect By\u201d option we chose ensures that only the selected year\u2019s data is used. All that\u2019s left is to change the chart type to \u201cPie Chart\u201d, and set \u201cVisible Series\u201d to only \u201ccategory_code\u201d and \u201craised_amount_usd\u201d and hide the other data series. Note: Graphs need more screenspace, so our small screenshots will look better if we close the side panels by clicking on the opener icons ( , ). Let\u2019s also sort the table by \u201cfunded_year\u201d. As far as sorting, the highlighted button above the table reminds you that sort settings aren\u2019t saved automatically. Click the green button and select \u201cSave\u201d to do that. What\u2019s the result? We can click through the years (or use arrow keys), and see the distribution by category change. Note: If clicking through the years does not affect the chart, the chart must not be linked. You can check and correct it by using the \u201cthree dots\u201d menu on top right of the chart, clicking \u201cData selection\u201d, and ensuring that \u201cSelect By\u201d dropdown is showing \u201cINVESTMENTS [by funded_year]\u201d. To complete the example, we will add two more sections to this \u201cBreakdowns\u201d page. One will be a table listing company categories, and linked to it will be a chart showing the amount of investment in that category over the years. To add the table of categories, use \u201cAdd Widget to Page\u201d, and select \u201cTable\u201d widget, \u201cInvestments\u201d data, grouped by \u201cCompany_category_code\u201d. The \u201cfunded_year\u201d column in the resulting table is meaningless, and should be deleted. For the last step, we add another chart. We need to remember to group by both \u201cCompany_category_code\u201d \u201cfunded_year\u201d, and to set a suitable \u201cSelect By\u201d widget for it. Since there are two tables on this page, you have a choice of which one will drive the data in this chart. In this case, pick the widget that we just added: \u201cINVESTMENTS [by Company_category_code]\u201d. As in the previous section, we configure the chart by selecting \u201cChart Type\u201d as \u201cBar Chart\u201d, and in the \u201cVisible Series\u201d list, leaving the series \u201cfunded_year\u201d (the x-axis) and \u201craised_amount_usd\u201d (the y-axis), and hiding the rest. We can now click through the categories, and see the history of investment into each one.","title":"Dynamic charts"},{"location":"investment-research/#next-steps","text":"If you\u2019re unfamiliar with how we created the \u201cCompany Details\u201d page that\u2019s present in the example, visit one of these earlier tutorials to learn how: \u2018How to build a Lightweight CRM\u2019, or \u2018Managing your Business in Grist\u2019. That\u2019s it! Now go analyze some data! The sample document includes only the \u201ccompanies\u201d and \u201cinvestments\u201d data, and includes only New York companies to keep it smaller and faster. \u21a9 Such duplication is commonly seen in spreadsheets. Data in this form is called \u201cdenormalized\u201d. \u21a9 If you don\u2019t have a single identifying column, you can construct one with a formula. \u21a9","title":"Next steps"},{"location":"keyboard-shortcuts/","text":"Grist Shortcuts # General # Key (Mac) Key (Windows) Description F1 , \u2318 / F1 , Ctrl + / Display shortcuts pane \u2318 Z Ctrl + Z Undo last action \u2318 \u21e7 Z , \u2303 Y Ctrl + Shift + Z , Ctrl + Y Redo last action \u2318 F Ctrl + F Find \u2318 G Ctrl + G Find next occurrence \u2318 \u21e7 G Ctrl + Shift + G Find previous occurrence Navigation # Key (Mac) Key (Windows) Description \u2193 \u2193 Move downward to next record or field \u2191 \u2191 Move upward to previous record or field \u2192 \u2192 Move right to the next field \u2190 \u2190 Move left to the previous field Tab Tab Move to the next field, saving changes if editing a value \u21e7 Tab Shift + Tab Move to the previous field, saving changes if editing a value PageDown PageDown Move down one page of records, or to next record in a card list PageUp PageUp Move up one page of records, or to previous record in a card list \u2318 \u2191 Ctrl + \u2191 Move up to the first record \u2318 \u2193 Ctrl + \u2193 Move down to the last record Home Home Move to the first field or the beginning of a row End End Move to the last field or the end of a row \u2325 \u2193 Alt + \u2193 Open next page \u2325 \u2191 Alt + \u2191 Open previous page \u2318 O Ctrl + O Activate next page widget \u2318 \u21e7 O Ctrl + Shift + O Activate previous page widget Selection # Key (Mac) Key (Windows) Description \u21e7 \u2193 Shift + \u2193 Adds the element below the cursor to the selected range \u21e7 \u2191 Shift + \u2191 Adds the element above the cursor to the selected range \u21e7 \u2192 Shift + \u2192 Adds the element to the right of the cursor to the selected range \u21e7 \u2190 Shift + \u2190 Adds the element to the left of the cursor to the selected range \u2318 A Ctrl + A Selects all currently displayed cells \u2318 \u21e7 A Ctrl + Shift + A Copy anchor link Editing # Key (Mac) Key (Windows) Description Enter , F2 Enter , F2 Start editing the currently-selected cell Enter Enter Finish editing a cell, saving the value Escape Escape Discard changes to a cell value \u2318 D Ctrl + D Fills current selection with the contents of the top row in the selection Backspace , Del Backspace , Del Clears the currently selected cells Enter , Space Enter , Space Toggles the value of checkbox cells = = When typed at the start of a cell, make this a formula column \u2318 ; Ctrl + ; Insert the current date \u2318 \u21e7 ; Ctrl + Shift + ; Insert the current date and time Data manipulation # Key (Mac) Key (Windows) Description \u2318 \u21e7 = Ctrl + Shift + = Insert a new record, before the currently selected one in an unsorted table \u2318 = Ctrl + = Insert a new record, after the currently selected one in an unsorted table \u2318 - Ctrl + - Delete the currently selected record \u2325 \u21e7 = Alt + Shift + = Insert a new column, before the currently selected one \u2325 = Alt + = Insert a new column, after the currently selected one \u2303 M Ctrl + M Rename the currently selected column \u2325 \u21e7 - Alt + Shift + - Hide the currently selected column \u2325 - Alt + - Delete the currently selected columns","title":"Shortcuts"},{"location":"keyboard-shortcuts/#grist-shortcuts","text":"","title":"Grist Shortcuts"},{"location":"keyboard-shortcuts/#general","text":"Key (Mac) Key (Windows) Description F1 , \u2318 / F1 , Ctrl + / Display shortcuts pane \u2318 Z Ctrl + Z Undo last action \u2318 \u21e7 Z , \u2303 Y Ctrl + Shift + Z , Ctrl + Y Redo last action \u2318 F Ctrl + F Find \u2318 G Ctrl + G Find next occurrence \u2318 \u21e7 G Ctrl + Shift + G Find previous occurrence","title":"General"},{"location":"keyboard-shortcuts/#navigation","text":"Key (Mac) Key (Windows) Description \u2193 \u2193 Move downward to next record or field \u2191 \u2191 Move upward to previous record or field \u2192 \u2192 Move right to the next field \u2190 \u2190 Move left to the previous field Tab Tab Move to the next field, saving changes if editing a value \u21e7 Tab Shift + Tab Move to the previous field, saving changes if editing a value PageDown PageDown Move down one page of records, or to next record in a card list PageUp PageUp Move up one page of records, or to previous record in a card list \u2318 \u2191 Ctrl + \u2191 Move up to the first record \u2318 \u2193 Ctrl + \u2193 Move down to the last record Home Home Move to the first field or the beginning of a row End End Move to the last field or the end of a row \u2325 \u2193 Alt + \u2193 Open next page \u2325 \u2191 Alt + \u2191 Open previous page \u2318 O Ctrl + O Activate next page widget \u2318 \u21e7 O Ctrl + Shift + O Activate previous page widget","title":"Navigation"},{"location":"keyboard-shortcuts/#selection","text":"Key (Mac) Key (Windows) Description \u21e7 \u2193 Shift + \u2193 Adds the element below the cursor to the selected range \u21e7 \u2191 Shift + \u2191 Adds the element above the cursor to the selected range \u21e7 \u2192 Shift + \u2192 Adds the element to the right of the cursor to the selected range \u21e7 \u2190 Shift + \u2190 Adds the element to the left of the cursor to the selected range \u2318 A Ctrl + A Selects all currently displayed cells \u2318 \u21e7 A Ctrl + Shift + A Copy anchor link","title":"Selection"},{"location":"keyboard-shortcuts/#editing","text":"Key (Mac) Key (Windows) Description Enter , F2 Enter , F2 Start editing the currently-selected cell Enter Enter Finish editing a cell, saving the value Escape Escape Discard changes to a cell value \u2318 D Ctrl + D Fills current selection with the contents of the top row in the selection Backspace , Del Backspace , Del Clears the currently selected cells Enter , Space Enter , Space Toggles the value of checkbox cells = = When typed at the start of a cell, make this a formula column \u2318 ; Ctrl + ; Insert the current date \u2318 \u21e7 ; Ctrl + Shift + ; Insert the current date and time","title":"Editing"},{"location":"keyboard-shortcuts/#data-manipulation","text":"Key (Mac) Key (Windows) Description \u2318 \u21e7 = Ctrl + Shift + = Insert a new record, before the currently selected one in an unsorted table \u2318 = Ctrl + = Insert a new record, after the currently selected one in an unsorted table \u2318 - Ctrl + - Delete the currently selected record \u2325 \u21e7 = Alt + Shift + = Insert a new column, before the currently selected one \u2325 = Alt + = Insert a new column, after the currently selected one \u2303 M Ctrl + M Rename the currently selected column \u2325 \u21e7 - Alt + Shift + - Hide the currently selected column \u2325 - Alt + - Delete the currently selected columns","title":"Data manipulation"},{"location":"lightweight-crm/","text":"How to create a custom CRM # Grist is as easy to use as a spreadsheet, but gives you new powers when data doesn\u2019t fit in a simple grid. A good example is keeping track of contacts and our conversations with them. For a business, this could be customers, sales leads, or job candidates. For an individual, it could be companies they have applied to in a job search. In this tutorial, we\u2019ll explain the \u201cLightweight CRM\u201d example, which you can use as a template for your own contacts, and then show how to build it from scratch. You\u2019ll learn how to: Add tables Link data Set column types Create custom layouts Exploring the example # Open the document Lightweight CRM , found in Examples & Templates in your Grist home page . You\u2019ll see the \u201cContacts\u201d page, listing contacts on the left of the screen. Click on any contact to select it. The two sections on the right show the details and the history of interactions with the selected contact. How does this compare to a spreadsheet? These screenshots show the Lightweight CRM example on the left, and a regular spreadsheet with the same data on the right. Previous Next Previous Next The difficulty is in the history of notes for a contact. In a two-dimensional grid, you have few options for where to include multiple notes. If you include them as multiple columns, it quickly makes the spreadsheet unwieldy and difficult to navigate. Grist feels more like an application, but it\u2019s still as versatile as a spreadsheet. The \u201cLightweight CRM\u201d example can be used immediately as-is (with the sample data), or as a template (just the structure without the data). Here are a few more points on using it as a CRM: To add a new contact, click the blank row at the bottom of the contacts list, then fill in the blank \u201cCONTACTS Card\u201d section that shows on the right. To add a new conversation, select a contact, then click the blank line at the end of the Interactions table. You can enter today\u2019s date using the shortcut \u2318 + ; (semicolon) (Mac) or Ctrl + ; (semicolon) (Windows). Then select the type of interaction using auto-complete, and type in your notes. You can add To-Do items for a contact: in the Interactions list, select \u201cTo-Do\u201d in the \u201cType\u201d column as a special type of interaction. Think of the associated date as the due date for this task. The Contacts table shows the list of coming up To-Do items, sorted by their due date. If you use Gmail, the handy \u201cGmail search\u201d link in the \u201cCONTACTS Card\u201d section will open a browser window with the Gmail search results for this contact\u2019s email address. You can use this example as a template for your own contacts. With the \u201cLightweight CRM\u201d example open, click the \u201cSave Copy\u201d button in in the top bar, then mark the \u201cAs Template\u201d checkbox. You\u2019ll get an empty document with the same layout, and can start filling it in with your own data. If you aren\u2019t signed in, you will need to sign in to make a copy of the example. Creating your own # The rest of this tutorial will show you how to create such a document on your own. It\u2019s a great exercise that will teach you some of the key features of Grist. To start, we\u2019ll import a file with sample contacts from the Grist home page. First, save this file to your desktop: lightweight-crm-contacts.csv . Then click the \u201cAdd New\u201d button on the top left of your Grist home page, click \u201cImport document\u201d, and select the file on your desktop. You\u2019ll see a table of contacts with sample data. Note that in Grist, columns have names. Rename this table to \u201cContacts\u201d by clicking its name in the top bar, and typing the new name. That\u2019s all you need for a simple table of contacts. You can add rows here, or add new columns to associate more data with each contact. Adding another table # For our next step, we want to be able to select a contact, and see the list of conversations with that contact. These conversations should be a new table of data. The cue is that it has a different number of rows from the table of contacts. Create the new table using the green \u201cAdd New\u201d button on the top left of your screen, and click \u201cAdd Empty Table\u201d in the menu. This table will represent interactions with our contacts, so let\u2019s rename it \u201cInteractions\u201d by clicking its default name (\u201cTable1\u201d) on top of the screen, as before. It\u2019s a good idea to give meaningful names to columns. In this case, for each interaction, we need to know which Contact it refers to, the date, type, and conversation notes. To rename a column, click its header to select the column, and click the header again to edit its name. You can hit the Tab key to continue to renaming the next column. Finally, hit the \u201c+\u201d button to the right of the last column to create one more column, and name it \u201cNotes\u201d. Linking data records # Every record in this table will belong to a particular contact. You set it up by turning the \u201cContact\u201d column into a reference to the table \u201cContacts\u201d. Using the triangle in the header of the column \u201cContact\u201d, open the menu and select \u201cColumn Options\u201d. In the right panel, use the \u201cColumn Type\u201d dropdown to select \u201cReference\u201d, then under \u201cData from table\u201d, select \u201cContacts\u201d. Each cell in this column will hold a pointer to a row in the \u201cContacts\u201d table 1 . While it refers to an entire row, it\u2019s useful to see some particular identifier of that row, so under \u201cShow column\u201d, select \u201cCompany\u201d. You\u2019ll see this in action shortly. Setting other types # In Grist, every column has a type. Often, the default of Text or Numeric is correct. For our \u201cDate\u201d column, a better type is Date. Click any cell in the \u201cDate\u201d column, and in the right panel, click into the \u201cColumn Type\u201d dropdown and select \u201cDate\u201d. If you\u2019d like, you can also choose a different date format right below the type. Now, if you click on a cell in the \u201cDate\u201d column and hit Enter, you have a convenient date picker. Another useful column type for us is \u201cChoice\u201d. Our interactions will be either \u201cPhone\u201d, \u201cEmail\u201d, or \u201cIn-person\u201d, and it\u2019s useful to list these options. Click into the \u201cType\u201d column, and in the right panel, set \u201cColumn Type\u201d to \u201cChoice\u201d. You\u2019ll see \u201cChoice Values\u201d textbox below. Click it, and enter your choices there, one per line: \u201cPhone\u201d, \u201cEmail\u201d, \u201cIn-person\u201d. Now, if you click on a cell in the \u201cType\u201d column and hit Enter, you can now choose from among the choices you set, or start typing and use auto-complete. Linking tables visually # The next step is to link the two tables visually. Open the \u201cContacts\u201d page, click the \u201cAdd New\u201d button on top of the left panel, then \u201cAdd Widget to Page\u201d. Select widget \u201cTable\u201d and data \u201cInteractions\u201d. In the \u201cSelect By\u201d dropdown at the bottom of the dialog, select \u201cCONTACTS\u201d. This means that choosing a contact will display only the interactions with that contact. Click \u201cAdd to Page\u201d to finish. Next, let\u2019s select a contact in the table on the left (let\u2019s use \u201cDouglas LLC\u201d in the fourth row) and add some notes for it. Type in a date (hint: the shortcut \u2318 + ; (semicolon) on Mac or Ctrl + ; (semicolon) on Windows inserts today\u2019s date), select a type, and enter a note. As soon as that row is created, the \u201cContact\u201d column is automatically filled with \u201cDouglas LLC\u201d, thanks to the sections being linked. The note we added is shown only when \u201cDouglas LLC\u201d is selected. We can add more notes for \u201cDouglas LLC\u201d, or add notes for any of the other contacts. We can now hide the \u201cContact\u201d column in the \u201cInteractions\u201d table: using the menu in the column\u2019s header, select \u201cHide Column\u201d. Because the tables are linked, we already see who the notes are for. For longer notes to be convenient, resize the \u201cNotes\u201d column by dragging the right edge of its header. To wrap long notes, open the Column Options, and click the line-wrapping icon. Customizing layout # Once you have multiple tables on one screen, the layout of the screen may become an issue. Having many columns in the Contacts table may no longer be convenient. It\u2019s better to lay it out like a custom application: select a contact from a list on the left and see that contact\u2019s details and interactions. This can be done by using \u201cAdd Widget to Page\u201d again. This time, we\u2019ll select the widget \u201cCard\u201d for the table \u201cContacts\u201d, and for \u201cSelect By\u201d will again use \u201cCONTACTS\u201d. You can move the resulting sections around to create a convenient layout. Move your mouse to the top left of each section until you see a \u201cdrag handle\u201d icon. Use that icon to drag each section into the desired spot relative to other sections. You can also resize sections by moving the mouse between them to find a dotted line. Drag this line to resize. Note how the same personal data is now shown in two places on the screen. These are not copies of data, but different presentations of the same data. Changing the data in one place will change it in the other. Customizing fields # At this point, we may do some cleanup: hide unneeded columns in the main \u201cContacts\u201d table and rearrange fields in the Card widget. A quick way to hide columns is using the right panel. Using the three-dot menu on the top right of the \u201cContacts\u201d table, select \u201cWidget options\u201d. In the panel that opens, find a list of \u201cVisible columns\u201d. Move the mouse over each column to reveal the \u201ceye\u201d icon. Click it to hide all columns except \u201cCompany\u201d. To customize the Card widget, click it. The right panel will show the relevant options. You can select a different Theme, e.g. \u201cCompact\u201d. To rearrange fields, click \u201cEdit Layout\u201d in the right panel. You can now drag-and-drop fields in the card, resize them, or remove them. Click \u201cSave\u201d once you are done. In a few short steps, we have gone from a clunky, unwieldy spreadsheet to a concise, elegant record of your interactions in a simple, effective custom application. To-Do Tasks for Contacts # The \u201cLightweight CRM\u201d example has another trick up its sleeve. The \u201cType\u201d column in the interactions table has an extra choice, \u201cTo-Do\u201d. After you talk to a contact, you can add an extra note about what you need to do for the next conversation, and the date when it\u2019s due. The \u201cContacts\u201d table makes these To-Do items visible, and sortable by due date. This way you can see at a glance what\u2019s coming up next. If you are interested in the details of setting it up, expand the section below. For your first introduction to Grist, you are welcome to skip it. > Setting up To-Do tasks # To set up To-Do items as in the example, select Column Options for the \u201cType\u201d column in the Interactions table, and add another choice (\u201cTo-Do\u201d) to the list of choices: Let\u2019s pick our contact \u201cDouglas LLC\u201d and add a To-Do item: In the \u201cContacts\u201d table, add two new columns: Rename them to \u201cDue\u201d and \u201cTo-Do Items\u201d. Both columns are calculated using formulas. Grist has great support for formulas, allowing full Python syntax and many Excel functions. In Grist, a formula always applies to the entire column of data. To enter a formula, click on a cell in the \u201cDue\u201d column, and hit \u201c=\u201d key: In this formula, we want to look up all Interactions for the current Contact whose Type is \u201cTo-Do\u201d, then select the one with the earliest Date. Using Python syntax, the formula is: items = Interactions.lookupRecords(Contact=$id, Type=\"To-Do\") return min(items.Date) if items else None Paste it in, or type in. When typing in multi-line formulas, use Shift+Enter to add new lines, and Enter to save. It\u2019s also a good time to change the column type to \u201cDate\u201d. Open Column Options, and select \u201cDate\u201d for the type. You can choose the Date Format directly below the type. For the \u201cTo-Do Items\u201d, enter a formula similarly. In case of multiple To-Do items, this formula will concatenate them, separated by line breaks. Click into the \u201cTo-Do Items\u201d column, hit \u201c=\u201d to start typing the formula, and enter items = Interactions.lookupRecords(Contact=$id, Type=\"To-Do\") return \"\\n\".join(items.Notes) Now the To-Do item we entered earlier is visible in the main Contacts table. Note that the values in these columns are read-only, since they are calculated. To change the due date, find the To-Do item in the Interactions table where you created it. Sorting tables # We\u2019ll want contacts with To-Do items to show up first, in order of the Due date. Click the triangle in the header of the \u201cDue\u201d column, and select \u201cSort A-Z\u201d. By default, sorting settings are not saved. The highlighted green button in the top right of the \u201cContacts\u201d table reminds us of that. To keep this sort order when you reopen the document, save it by clicking that green button and selecting \u201cSave\u201d. You can also save by clicking the green check mark, to the right of the filter icon. Other features # Grist has more great features, some of which are used in the \u201cLightweight CRM\u201d example document. To read more about those, follow the links to their documentation. Any text column may be shown as a hyperlink. Lightweight CRM example uses it twice: for the \u201cwebsite\u201d field, and for a formula-constructed hyperlink to a Gmail search page for the given contact\u2019s email. The latter is handy if you use Gmail. Grist supports attachments. In the example, there is an \u201cAttachments\u201d field for each contact that may be used to store an image of a business card, for example. In an actual business, you\u2019ll need more. Specialized CRM products have tons of features. Their problem is complexity: trying to satisfy the needs of many different clients makes for a complicated product to use. The beauty of Grist is that you can start simple and add only the level of complexity you need, and nothing more. Other tutorials show how to model more complex data, analyze and chart data, and more. In the database world, this kind of reference or pointer is known as a \u201cforeign key\u201d. \u21a9","title":"Create your own CRM"},{"location":"lightweight-crm/#how-to-create-a-custom-crm","text":"Grist is as easy to use as a spreadsheet, but gives you new powers when data doesn\u2019t fit in a simple grid. A good example is keeping track of contacts and our conversations with them. For a business, this could be customers, sales leads, or job candidates. For an individual, it could be companies they have applied to in a job search. In this tutorial, we\u2019ll explain the \u201cLightweight CRM\u201d example, which you can use as a template for your own contacts, and then show how to build it from scratch. You\u2019ll learn how to: Add tables Link data Set column types Create custom layouts","title":"Intro"},{"location":"lightweight-crm/#exploring-the-example","text":"Open the document Lightweight CRM , found in Examples & Templates in your Grist home page . You\u2019ll see the \u201cContacts\u201d page, listing contacts on the left of the screen. Click on any contact to select it. The two sections on the right show the details and the history of interactions with the selected contact. How does this compare to a spreadsheet? These screenshots show the Lightweight CRM example on the left, and a regular spreadsheet with the same data on the right. Previous Next Previous Next The difficulty is in the history of notes for a contact. In a two-dimensional grid, you have few options for where to include multiple notes. If you include them as multiple columns, it quickly makes the spreadsheet unwieldy and difficult to navigate. Grist feels more like an application, but it\u2019s still as versatile as a spreadsheet. The \u201cLightweight CRM\u201d example can be used immediately as-is (with the sample data), or as a template (just the structure without the data). Here are a few more points on using it as a CRM: To add a new contact, click the blank row at the bottom of the contacts list, then fill in the blank \u201cCONTACTS Card\u201d section that shows on the right. To add a new conversation, select a contact, then click the blank line at the end of the Interactions table. You can enter today\u2019s date using the shortcut \u2318 + ; (semicolon) (Mac) or Ctrl + ; (semicolon) (Windows). Then select the type of interaction using auto-complete, and type in your notes. You can add To-Do items for a contact: in the Interactions list, select \u201cTo-Do\u201d in the \u201cType\u201d column as a special type of interaction. Think of the associated date as the due date for this task. The Contacts table shows the list of coming up To-Do items, sorted by their due date. If you use Gmail, the handy \u201cGmail search\u201d link in the \u201cCONTACTS Card\u201d section will open a browser window with the Gmail search results for this contact\u2019s email address. You can use this example as a template for your own contacts. With the \u201cLightweight CRM\u201d example open, click the \u201cSave Copy\u201d button in in the top bar, then mark the \u201cAs Template\u201d checkbox. You\u2019ll get an empty document with the same layout, and can start filling it in with your own data. If you aren\u2019t signed in, you will need to sign in to make a copy of the example.","title":"Exploring the example"},{"location":"lightweight-crm/#creating-your-own","text":"The rest of this tutorial will show you how to create such a document on your own. It\u2019s a great exercise that will teach you some of the key features of Grist. To start, we\u2019ll import a file with sample contacts from the Grist home page. First, save this file to your desktop: lightweight-crm-contacts.csv . Then click the \u201cAdd New\u201d button on the top left of your Grist home page, click \u201cImport document\u201d, and select the file on your desktop. You\u2019ll see a table of contacts with sample data. Note that in Grist, columns have names. Rename this table to \u201cContacts\u201d by clicking its name in the top bar, and typing the new name. That\u2019s all you need for a simple table of contacts. You can add rows here, or add new columns to associate more data with each contact.","title":"Creating your own"},{"location":"lightweight-crm/#adding-another-table","text":"For our next step, we want to be able to select a contact, and see the list of conversations with that contact. These conversations should be a new table of data. The cue is that it has a different number of rows from the table of contacts. Create the new table using the green \u201cAdd New\u201d button on the top left of your screen, and click \u201cAdd Empty Table\u201d in the menu. This table will represent interactions with our contacts, so let\u2019s rename it \u201cInteractions\u201d by clicking its default name (\u201cTable1\u201d) on top of the screen, as before. It\u2019s a good idea to give meaningful names to columns. In this case, for each interaction, we need to know which Contact it refers to, the date, type, and conversation notes. To rename a column, click its header to select the column, and click the header again to edit its name. You can hit the Tab key to continue to renaming the next column. Finally, hit the \u201c+\u201d button to the right of the last column to create one more column, and name it \u201cNotes\u201d.","title":"Adding another table"},{"location":"lightweight-crm/#linking-data-records","text":"Every record in this table will belong to a particular contact. You set it up by turning the \u201cContact\u201d column into a reference to the table \u201cContacts\u201d. Using the triangle in the header of the column \u201cContact\u201d, open the menu and select \u201cColumn Options\u201d. In the right panel, use the \u201cColumn Type\u201d dropdown to select \u201cReference\u201d, then under \u201cData from table\u201d, select \u201cContacts\u201d. Each cell in this column will hold a pointer to a row in the \u201cContacts\u201d table 1 . While it refers to an entire row, it\u2019s useful to see some particular identifier of that row, so under \u201cShow column\u201d, select \u201cCompany\u201d. You\u2019ll see this in action shortly.","title":"Linking data records"},{"location":"lightweight-crm/#setting-other-types","text":"In Grist, every column has a type. Often, the default of Text or Numeric is correct. For our \u201cDate\u201d column, a better type is Date. Click any cell in the \u201cDate\u201d column, and in the right panel, click into the \u201cColumn Type\u201d dropdown and select \u201cDate\u201d. If you\u2019d like, you can also choose a different date format right below the type. Now, if you click on a cell in the \u201cDate\u201d column and hit Enter, you have a convenient date picker. Another useful column type for us is \u201cChoice\u201d. Our interactions will be either \u201cPhone\u201d, \u201cEmail\u201d, or \u201cIn-person\u201d, and it\u2019s useful to list these options. Click into the \u201cType\u201d column, and in the right panel, set \u201cColumn Type\u201d to \u201cChoice\u201d. You\u2019ll see \u201cChoice Values\u201d textbox below. Click it, and enter your choices there, one per line: \u201cPhone\u201d, \u201cEmail\u201d, \u201cIn-person\u201d. Now, if you click on a cell in the \u201cType\u201d column and hit Enter, you can now choose from among the choices you set, or start typing and use auto-complete.","title":"Setting other types"},{"location":"lightweight-crm/#linking-tables-visually","text":"The next step is to link the two tables visually. Open the \u201cContacts\u201d page, click the \u201cAdd New\u201d button on top of the left panel, then \u201cAdd Widget to Page\u201d. Select widget \u201cTable\u201d and data \u201cInteractions\u201d. In the \u201cSelect By\u201d dropdown at the bottom of the dialog, select \u201cCONTACTS\u201d. This means that choosing a contact will display only the interactions with that contact. Click \u201cAdd to Page\u201d to finish. Next, let\u2019s select a contact in the table on the left (let\u2019s use \u201cDouglas LLC\u201d in the fourth row) and add some notes for it. Type in a date (hint: the shortcut \u2318 + ; (semicolon) on Mac or Ctrl + ; (semicolon) on Windows inserts today\u2019s date), select a type, and enter a note. As soon as that row is created, the \u201cContact\u201d column is automatically filled with \u201cDouglas LLC\u201d, thanks to the sections being linked. The note we added is shown only when \u201cDouglas LLC\u201d is selected. We can add more notes for \u201cDouglas LLC\u201d, or add notes for any of the other contacts. We can now hide the \u201cContact\u201d column in the \u201cInteractions\u201d table: using the menu in the column\u2019s header, select \u201cHide Column\u201d. Because the tables are linked, we already see who the notes are for. For longer notes to be convenient, resize the \u201cNotes\u201d column by dragging the right edge of its header. To wrap long notes, open the Column Options, and click the line-wrapping icon.","title":"Linking tables visually"},{"location":"lightweight-crm/#customizing-layout","text":"Once you have multiple tables on one screen, the layout of the screen may become an issue. Having many columns in the Contacts table may no longer be convenient. It\u2019s better to lay it out like a custom application: select a contact from a list on the left and see that contact\u2019s details and interactions. This can be done by using \u201cAdd Widget to Page\u201d again. This time, we\u2019ll select the widget \u201cCard\u201d for the table \u201cContacts\u201d, and for \u201cSelect By\u201d will again use \u201cCONTACTS\u201d. You can move the resulting sections around to create a convenient layout. Move your mouse to the top left of each section until you see a \u201cdrag handle\u201d icon. Use that icon to drag each section into the desired spot relative to other sections. You can also resize sections by moving the mouse between them to find a dotted line. Drag this line to resize. Note how the same personal data is now shown in two places on the screen. These are not copies of data, but different presentations of the same data. Changing the data in one place will change it in the other.","title":"Customizing layout"},{"location":"lightweight-crm/#customizing-fields","text":"At this point, we may do some cleanup: hide unneeded columns in the main \u201cContacts\u201d table and rearrange fields in the Card widget. A quick way to hide columns is using the right panel. Using the three-dot menu on the top right of the \u201cContacts\u201d table, select \u201cWidget options\u201d. In the panel that opens, find a list of \u201cVisible columns\u201d. Move the mouse over each column to reveal the \u201ceye\u201d icon. Click it to hide all columns except \u201cCompany\u201d. To customize the Card widget, click it. The right panel will show the relevant options. You can select a different Theme, e.g. \u201cCompact\u201d. To rearrange fields, click \u201cEdit Layout\u201d in the right panel. You can now drag-and-drop fields in the card, resize them, or remove them. Click \u201cSave\u201d once you are done. In a few short steps, we have gone from a clunky, unwieldy spreadsheet to a concise, elegant record of your interactions in a simple, effective custom application.","title":"Customizing fields"},{"location":"lightweight-crm/#to-do-tasks-for-contacts","text":"The \u201cLightweight CRM\u201d example has another trick up its sleeve. The \u201cType\u201d column in the interactions table has an extra choice, \u201cTo-Do\u201d. After you talk to a contact, you can add an extra note about what you need to do for the next conversation, and the date when it\u2019s due. The \u201cContacts\u201d table makes these To-Do items visible, and sortable by due date. This way you can see at a glance what\u2019s coming up next. If you are interested in the details of setting it up, expand the section below. For your first introduction to Grist, you are welcome to skip it.","title":"To-Do Tasks for Contacts"},{"location":"lightweight-crm/#setting-up-to-do-tasks","text":"To set up To-Do items as in the example, select Column Options for the \u201cType\u201d column in the Interactions table, and add another choice (\u201cTo-Do\u201d) to the list of choices: Let\u2019s pick our contact \u201cDouglas LLC\u201d and add a To-Do item: In the \u201cContacts\u201d table, add two new columns: Rename them to \u201cDue\u201d and \u201cTo-Do Items\u201d. Both columns are calculated using formulas. Grist has great support for formulas, allowing full Python syntax and many Excel functions. In Grist, a formula always applies to the entire column of data. To enter a formula, click on a cell in the \u201cDue\u201d column, and hit \u201c=\u201d key: In this formula, we want to look up all Interactions for the current Contact whose Type is \u201cTo-Do\u201d, then select the one with the earliest Date. Using Python syntax, the formula is: items = Interactions.lookupRecords(Contact=$id, Type=\"To-Do\") return min(items.Date) if items else None Paste it in, or type in. When typing in multi-line formulas, use Shift+Enter to add new lines, and Enter to save. It\u2019s also a good time to change the column type to \u201cDate\u201d. Open Column Options, and select \u201cDate\u201d for the type. You can choose the Date Format directly below the type. For the \u201cTo-Do Items\u201d, enter a formula similarly. In case of multiple To-Do items, this formula will concatenate them, separated by line breaks. Click into the \u201cTo-Do Items\u201d column, hit \u201c=\u201d to start typing the formula, and enter items = Interactions.lookupRecords(Contact=$id, Type=\"To-Do\") return \"\\n\".join(items.Notes) Now the To-Do item we entered earlier is visible in the main Contacts table. Note that the values in these columns are read-only, since they are calculated. To change the due date, find the To-Do item in the Interactions table where you created it.","title":""},{"location":"lightweight-crm/#sorting-tables","text":"We\u2019ll want contacts with To-Do items to show up first, in order of the Due date. Click the triangle in the header of the \u201cDue\u201d column, and select \u201cSort A-Z\u201d. By default, sorting settings are not saved. The highlighted green button in the top right of the \u201cContacts\u201d table reminds us of that. To keep this sort order when you reopen the document, save it by clicking that green button and selecting \u201cSave\u201d. You can also save by clicking the green check mark, to the right of the filter icon.","title":""},{"location":"lightweight-crm/#other-features","text":"Grist has more great features, some of which are used in the \u201cLightweight CRM\u201d example document. To read more about those, follow the links to their documentation. Any text column may be shown as a hyperlink. Lightweight CRM example uses it twice: for the \u201cwebsite\u201d field, and for a formula-constructed hyperlink to a Gmail search page for the given contact\u2019s email. The latter is handy if you use Gmail. Grist supports attachments. In the example, there is an \u201cAttachments\u201d field for each contact that may be used to store an image of a business card, for example. In an actual business, you\u2019ll need more. Specialized CRM products have tons of features. Their problem is complexity: trying to satisfy the needs of many different clients makes for a complicated product to use. The beauty of Grist is that you can start simple and add only the level of complexity you need, and nothing more. Other tutorials show how to model more complex data, analyze and chart data, and more. In the database world, this kind of reference or pointer is known as a \u201cforeign key\u201d. \u21a9","title":"Other features"},{"location":"limits/","text":"Limits # To help you assess whether Grist will work for a use-case you have in mind, here is a list of limitations that apply to its operation. Number of documents # The number of documents is limited to 10 in free plans. Paid plans allow unlimited documents. To prevent accidental abuse of the system by automation tools, team sites may be limited to 1000 documents. If you encounter such a limit for legitimate use, please contact support to increase it. Number of collaborators # In free plans, each document may be shared with 2 other users, not counting the creator. The set of collaborators can be different for each document. In paid plans, documents can be shared with everyone on your team, which are paid seats. Team members are added to your team site and may inherit access to workspaces or documents within that organization. Learn more about team sharing . Included in the paid plan: You may share each document with 2 additional non-team users without incurring extra costs. Number of tables per document # There is a limit of 500 on the number of tables allowed per document. This is a soft limit. If you find yourself with a large number of tables, consider merging ones that have the same structure. For example, if you have a table for each product type, consider using a single table with the product type as an extra column. Size of documents # As a rule of thumb, Grist works best for documents under 100,000 rows. The actual limit depends also on the number of tables, columns, and the average size of data in each cell. One way to estimate it is to measure the size of the data when it is in CSV format: the limit is around 20MB in this format. For example, a document with 200,000 rows and 12 numeric columns would reach that. Attachments are counted separately. Attachments plus data in a single document are limited to 1GB. Upload limits # Uploads are limited to 50MB, both for attachments and to import data. Note that an import within this limit may result in a document that exceeds the document size limit, in which case the upload is still likely to fail. API limits # Free plans may be limited to 5 API requests per second per document. The team plan does not impose such a rate limit. Separately, there is a concurrency limit of 10 for all plans: if 10 authorized API requests are currently being processed for a particular document, any other API requests will be rejected (with HTTP status code 429) until at least one of the original requests completes. A client that waits for one request to complete before sending the next would not hit this limit (assuming it is the sole client accessing the document). Document availability # From time to time, during upgrades and operational transitions, individual Grist documents may become inaccessible for a period of some seconds. Please bear this in mind when using Grist\u2019s API.","title":"Limits"},{"location":"limits/#limits","text":"To help you assess whether Grist will work for a use-case you have in mind, here is a list of limitations that apply to its operation.","title":"Limits"},{"location":"limits/#number-of-documents","text":"The number of documents is limited to 10 in free plans. Paid plans allow unlimited documents. To prevent accidental abuse of the system by automation tools, team sites may be limited to 1000 documents. If you encounter such a limit for legitimate use, please contact support to increase it.","title":"Number of documents"},{"location":"limits/#number-of-collaborators","text":"In free plans, each document may be shared with 2 other users, not counting the creator. The set of collaborators can be different for each document. In paid plans, documents can be shared with everyone on your team, which are paid seats. Team members are added to your team site and may inherit access to workspaces or documents within that organization. Learn more about team sharing . Included in the paid plan: You may share each document with 2 additional non-team users without incurring extra costs.","title":"Number of collaborators"},{"location":"limits/#number-of-tables-per-document","text":"There is a limit of 500 on the number of tables allowed per document. This is a soft limit. If you find yourself with a large number of tables, consider merging ones that have the same structure. For example, if you have a table for each product type, consider using a single table with the product type as an extra column.","title":"Number of tables per document"},{"location":"limits/#size-of-documents","text":"As a rule of thumb, Grist works best for documents under 100,000 rows. The actual limit depends also on the number of tables, columns, and the average size of data in each cell. One way to estimate it is to measure the size of the data when it is in CSV format: the limit is around 20MB in this format. For example, a document with 200,000 rows and 12 numeric columns would reach that. Attachments are counted separately. Attachments plus data in a single document are limited to 1GB.","title":"Size of documents"},{"location":"limits/#upload-limits","text":"Uploads are limited to 50MB, both for attachments and to import data. Note that an import within this limit may result in a document that exceeds the document size limit, in which case the upload is still likely to fail.","title":"Upload limits"},{"location":"limits/#api-limits","text":"Free plans may be limited to 5 API requests per second per document. The team plan does not impose such a rate limit. Separately, there is a concurrency limit of 10 for all plans: if 10 authorized API requests are currently being processed for a particular document, any other API requests will be rejected (with HTTP status code 429) until at least one of the original requests completes. A client that waits for one request to complete before sending the next would not hit this limit (assuming it is the sole client accessing the document).","title":"API limits"},{"location":"limits/#document-availability","text":"From time to time, during upgrades and operational transitions, individual Grist documents may become inaccessible for a period of some seconds. Please bear this in mind when using Grist\u2019s API.","title":"Document availability"},{"location":"linking-widgets/","text":"Linking Page Widgets # One big reason for placing more than one widget on a page is that widgets can be linked. When linked, selecting a record in one widget will cause another widget to update and show only the data related to the selected record. For example, let\u2019s say you have a table of Departments in a company, and a table of Employees , with each employee tied to some department. You can have one Table widget listing departments and serving as a selector for a second Table widget listing employees: Previous Next To create this, first create a page with a Table widget for Departments data, as described in Page widgets . Then in the \u201cAdd New\u201d menu, select the \u201cAdd Widget to Page\u201d option to add another Table widget for Employees data. In the widget picker, use the \u201cSelect By\u201d dropdown and choose the \u201cDEPARTMENTS\u201d widget added in the first step. That\u2019s all it takes: now selecting a department in the first table will cause the second table to show only the employees in that department. Note that this relies on the Emploeees table having a column of type Reference with the target table of Departments . See Reference columns . Types of linking # Linking widgets only works when there is some relationships between records in the underlying data. There are several kinds of relationships supported. Same-record linking # Most directly you can link two widgets which show data from the same underlying table, usually linking a Table to a Card. This allows you to select a record in the Table widget and see more details of that record in the linked Card widget. For example, you can add a Card of Employees data and link it to an existing Table widget \u201cEMPLOYEES\u201d: When you select a record in the table, the new \u201cEMPLOYEES Card\u201d widget shows a card for the selected record. For another example of such linking, see the \u201cLightweight CRM\u201d document in \u201cExamples & Templates\u201d and the Customizing Layout section in the associated tutorial. Filter linking # As in the Employee-Department example, when one table has a reference to another (i.e. a column of type \u201cReference\u201d), the second table can serve as a selector for the first. Essentially, selecting a record can automatically filter another widget to show only those records that refer to the selected record. In the example shown earlier, the Employees table has a \u201cReference\u201d column pointing to the Departments table, so a list of departments can serve as a selector for employees. When a department is selected, only the employees in that department will be shown. The \u201cLightweight CRM\u201d document in \u201cExamples & Templates\u201d provides another example, where selecting a contact shows only the conversations with that contact. It\u2019s also described in the tutorial . When the target of linking is a Chart widget, you get dynamic charts that reflect data associated with the selected record. For example, you could link a pie chart to a department to show the sum of salaries for each job position in the selected department. Previous Next Indirect linking # Whenever a table A has a reference to B , A can be used in place of B as the source of linking. Instead of considering the currently selected record in A , linking will consider the referenced record in B as the selection. For instance, a Table widget showing Employees can serve as a selector for a Card widget showing data from Departments , using the fact that an employee record contains a \u201cDepartment\u201d reference. In the widget picker, if you select data from Departments , you\u2019ll see a \u201cSelect By\u201d option \u201cEMPLOYEES \u2022 Department\u201d: When you select an employee, you\u2019ll see the details of that employee\u2019s department. Multiple reference columns # When a table that\u2019s the target of linking has multiple reference columns, you may need to choose which one to use for linking. For instance, a Flight record might have fields \u2018DepartureAirport\u2019 and \u2018ArrivalAirport\u2019, each of which is a Reference to the table Airports . When you select an airport in a table, you can have a choice whether to show all flights departing from this airport or all flights arriving to it. The \u201cSelect By\u201d widget will show both options to choose from: Linking summary tables # When widgets display summarized data, as described in Summary tables , they can also be linked, both to the underlying data and to other summary tables. For example, you can summarize the table Employees by job position, and include the count of employees for each position, the average salary, or other summary data. You can also link the Employees table to it, so that selecting a position shows all employees in that position. Furthermore, you can link another summary table. For instance, you can summarize employees by position and gender, and link that to the summary by position. When selecting a job position, you can then see a summary by gender for that position. This is also convenient with charts. In this example, you see a pie chart with the average salary for men vs women for the selected job position. As you click different positions, the pie chart updates to reflect the selected one. More examples of such linking can be found in the Analyze and visualize tutorial. Changing link settings # After a widget is added, you can view and change its link settings from the right panel. One way to get to it is to click on the three-dots icon on the top right of the widget, and click on the \u201cData selection\u201d menu option: This opens the side panel, which shows what data is shown, and which widget, if any, serves as its selector. You can change the \u201cSelect By\u201d setting here, or click the green \u201cEdit Data Selection\u201d button, and change it in the widget picker dialog.","title":"Linking widgets"},{"location":"linking-widgets/#linking-page-widgets","text":"One big reason for placing more than one widget on a page is that widgets can be linked. When linked, selecting a record in one widget will cause another widget to update and show only the data related to the selected record. For example, let\u2019s say you have a table of Departments in a company, and a table of Employees , with each employee tied to some department. You can have one Table widget listing departments and serving as a selector for a second Table widget listing employees: Previous Next To create this, first create a page with a Table widget for Departments data, as described in Page widgets . Then in the \u201cAdd New\u201d menu, select the \u201cAdd Widget to Page\u201d option to add another Table widget for Employees data. In the widget picker, use the \u201cSelect By\u201d dropdown and choose the \u201cDEPARTMENTS\u201d widget added in the first step. That\u2019s all it takes: now selecting a department in the first table will cause the second table to show only the employees in that department. Note that this relies on the Emploeees table having a column of type Reference with the target table of Departments . See Reference columns .","title":"Linking Page Widgets"},{"location":"linking-widgets/#types-of-linking","text":"Linking widgets only works when there is some relationships between records in the underlying data. There are several kinds of relationships supported.","title":""},{"location":"linking-widgets/#same-record-linking","text":"Most directly you can link two widgets which show data from the same underlying table, usually linking a Table to a Card. This allows you to select a record in the Table widget and see more details of that record in the linked Card widget. For example, you can add a Card of Employees data and link it to an existing Table widget \u201cEMPLOYEES\u201d: When you select a record in the table, the new \u201cEMPLOYEES Card\u201d widget shows a card for the selected record. For another example of such linking, see the \u201cLightweight CRM\u201d document in \u201cExamples & Templates\u201d and the Customizing Layout section in the associated tutorial.","title":"Same-record linking"},{"location":"linking-widgets/#filter-linking","text":"As in the Employee-Department example, when one table has a reference to another (i.e. a column of type \u201cReference\u201d), the second table can serve as a selector for the first. Essentially, selecting a record can automatically filter another widget to show only those records that refer to the selected record. In the example shown earlier, the Employees table has a \u201cReference\u201d column pointing to the Departments table, so a list of departments can serve as a selector for employees. When a department is selected, only the employees in that department will be shown. The \u201cLightweight CRM\u201d document in \u201cExamples & Templates\u201d provides another example, where selecting a contact shows only the conversations with that contact. It\u2019s also described in the tutorial . When the target of linking is a Chart widget, you get dynamic charts that reflect data associated with the selected record. For example, you could link a pie chart to a department to show the sum of salaries for each job position in the selected department. Previous Next","title":"Filter linking"},{"location":"linking-widgets/#indirect-linking","text":"Whenever a table A has a reference to B , A can be used in place of B as the source of linking. Instead of considering the currently selected record in A , linking will consider the referenced record in B as the selection. For instance, a Table widget showing Employees can serve as a selector for a Card widget showing data from Departments , using the fact that an employee record contains a \u201cDepartment\u201d reference. In the widget picker, if you select data from Departments , you\u2019ll see a \u201cSelect By\u201d option \u201cEMPLOYEES \u2022 Department\u201d: When you select an employee, you\u2019ll see the details of that employee\u2019s department.","title":"Indirect linking"},{"location":"linking-widgets/#multiple-reference-columns","text":"When a table that\u2019s the target of linking has multiple reference columns, you may need to choose which one to use for linking. For instance, a Flight record might have fields \u2018DepartureAirport\u2019 and \u2018ArrivalAirport\u2019, each of which is a Reference to the table Airports . When you select an airport in a table, you can have a choice whether to show all flights departing from this airport or all flights arriving to it. The \u201cSelect By\u201d widget will show both options to choose from:","title":"Multiple reference columns"},{"location":"linking-widgets/#linking-summary-tables","text":"When widgets display summarized data, as described in Summary tables , they can also be linked, both to the underlying data and to other summary tables. For example, you can summarize the table Employees by job position, and include the count of employees for each position, the average salary, or other summary data. You can also link the Employees table to it, so that selecting a position shows all employees in that position. Furthermore, you can link another summary table. For instance, you can summarize employees by position and gender, and link that to the summary by position. When selecting a job position, you can then see a summary by gender for that position. This is also convenient with charts. In this example, you see a pie chart with the average salary for men vs women for the selected job position. As you click different positions, the pie chart updates to reflect the selected one. More examples of such linking can be found in the Analyze and visualize tutorial.","title":"Linking summary tables"},{"location":"linking-widgets/#changing-link-settings","text":"After a widget is added, you can view and change its link settings from the right panel. One way to get to it is to click on the three-dots icon on the top right of the widget, and click on the \u201cData selection\u201d menu option: This opens the side panel, which shows what data is shown, and which widget, if any, serves as its selector. You can change the \u201cSelect By\u201d setting here, or click the green \u201cEdit Data Selection\u201d button, and change it in the widget picker dialog.","title":"Changing link settings"},{"location":"newsletters/","text":"Grist for the Mill # Welcome to our monthly newsletter of updates and tips for Grist users. The phrase \u201cGrist for the mill\u201d means \u201cuseful experience, material, or knowledge\u201d, perfectly reflecting its purpose. May 2020 Newsletter : Copy as Template, Better URLs, NY Tech Meetup. June 2020 Newsletter : Work on Complex Changes, Automatic Backups. July 2020 Newsletter : Number Format Options, Prepare Emails with Formulas. August 2020 Newsletter : Invoices, Custom Widgets, Document Lists. September 2020 Newsletter : Public Access, Payroll Tracking. October 2020 Newsletter : Printing Support, Mailing Labels, Open Source Beta. November 2020 Newsletter : Open Source, Improved Attachments, Compare Versions. December 2020 Newsletter : Maps, Access Control, Compare Previous. January 2021 Newsletter : Task Management, Find a Consultant, Be a Consultant. February 2021 Newsletter : Improved Mobile Support, Totals. March 2021 Newsletter : Access Rules. April 2021 Newsletter : A 4-Step Guide to Link Keys. May 2021 Newsletter : Choice Lists, 3-step Tutorial on Reference Columns. June 2021 Newsletter : Introducing Freeze Columns and a timesheet-tracking template. July 2021 Newsletter : Colors, Time and Authorship Stamps, and Google Sheets Integration. August 2021 Newsletter : Reference Lists, Embedding, Templates, Pabbly, and more. September 2021 Newsletter : Improved imports, global currencies, and more ways to integrate! October 2021 Newsletter : Editing choices, inline links, enhanced import previews, and more! November 2021 Newsletter : Import column mapping, filter on hidden columns, more sorting options, and more! December 2021 Newsletter : Zapier instant triggers, 4 new templates, and more! January 2022 Newsletter : Managing template document tours, and 4 new templates, including an inventory manager! February 2022 Newsletter : Custom widgets menu, 2FA, access rules improvements, and cell context menu!","title":"Newsletters"},{"location":"newsletters/#grist-for-the-mill","text":"Welcome to our monthly newsletter of updates and tips for Grist users. The phrase \u201cGrist for the mill\u201d means \u201cuseful experience, material, or knowledge\u201d, perfectly reflecting its purpose. May 2020 Newsletter : Copy as Template, Better URLs, NY Tech Meetup. June 2020 Newsletter : Work on Complex Changes, Automatic Backups. July 2020 Newsletter : Number Format Options, Prepare Emails with Formulas. August 2020 Newsletter : Invoices, Custom Widgets, Document Lists. September 2020 Newsletter : Public Access, Payroll Tracking. October 2020 Newsletter : Printing Support, Mailing Labels, Open Source Beta. November 2020 Newsletter : Open Source, Improved Attachments, Compare Versions. December 2020 Newsletter : Maps, Access Control, Compare Previous. January 2021 Newsletter : Task Management, Find a Consultant, Be a Consultant. February 2021 Newsletter : Improved Mobile Support, Totals. March 2021 Newsletter : Access Rules. April 2021 Newsletter : A 4-Step Guide to Link Keys. May 2021 Newsletter : Choice Lists, 3-step Tutorial on Reference Columns. June 2021 Newsletter : Introducing Freeze Columns and a timesheet-tracking template. July 2021 Newsletter : Colors, Time and Authorship Stamps, and Google Sheets Integration. August 2021 Newsletter : Reference Lists, Embedding, Templates, Pabbly, and more. September 2021 Newsletter : Improved imports, global currencies, and more ways to integrate! October 2021 Newsletter : Editing choices, inline links, enhanced import previews, and more! November 2021 Newsletter : Import column mapping, filter on hidden columns, more sorting options, and more! December 2021 Newsletter : Zapier instant triggers, 4 new templates, and more! January 2022 Newsletter : Managing template document tours, and 4 new templates, including an inventory manager! February 2022 Newsletter : Custom widgets menu, 2FA, access rules improvements, and cell context menu!","title":"Grist for the Mill"},{"location":"on-demand-tables/","text":"On-Demand Tables # On-demand tables are an experimental feature The design of on-demand tables may change. For example, configuration options may be added, or aspects of the behavior of on-demand tables may be changed entirely. A defining feature of spreadsheets is the ability to update cells instantly as data they depend on changes. But sometimes a table is just a store of data, without any fancy calculations needed. In that case, you can choose to mark the table as \u201cOn-Demand\u201d in Grist. Grist can then serve data from that table faster, and make certain optimizations that may be helpful as the table gets large and regular tables become slow. When a table is marked \u201cOn-Demand\u201d: Data in the table will not generally be available for use in formulas. The table remains available for viewing and editing, but with caveats. Here\u2019s what you need to know about viewing data: Viewing is limited to 10000 rows at a time. Subsets of the table\u2019s rows can be selected by linking widgets , as for regular tables. You can expect good performance of linked widgets when the subset of the table\u2019s rows is less than 10000 rows, even if the full table is much larger. Here\u2019s what you need to know about editing data: You can edit data as normal in an On-Demand table. Automatic updates of anything that depends on that data simply won\u2019t happen. After edits, you need to reload the webpage to see everything updated. Here are some reasons you might make a table On-Demand: You want to make summaries and charts of slices of a large dataset using linked widgets . You are storing a lot of data in the table, and all you need to do with it is read parts of it back out via the API. Make an On-Demand Table # To convert a table to be an \u201cOn Demand\u201d table, open the right panel, pick the \u201cTable\u201d panel, and the \u201cData\u201d section. Click on \u201cAdvanced Settings\u201d and you should see a \u201cMake On-Demand\u201d button. If you change your mind, and don\u2019t want the table to be \u201cOn-Demand\u201d anymore, you can find a button to undo this setting in the same place: Changing a table to become \u201cOn-Demand\u201d or to stop being \u201cOn-Demand\u201d will force the document to reload for all users viewing it at that moment. Formulas, References and On-Demand Tables # In general, formulas and on-demand tables don\u2019t go together. That said, if you\u2019re careful you can use the following very simple formulas: $column - where the column mentioned is not itself a formula. This copies data from another column verbatim. $reference.column - where reference is a reference column , and column is not itself a formula. This formula support is enough to unlock Grist\u2019s linking widgets feature, which is why it is present. In general, if you try using formulas and On-Demand tables, you are setting yourself up for sadness. Remember, like any edit of an On-Demand table, when you add or change a formula column you\u2019ll generally need to reload to see cell values updated. Some type conversions, such as converting a column to be a reference, are not effective for On-Demand tables. So it is important to perform such conversions before making a table On-Demand. From formulas in regular tables, you cannot access the content of on-demand tables.","title":"On-Demand tables"},{"location":"on-demand-tables/#on-demand-tables","text":"On-demand tables are an experimental feature The design of on-demand tables may change. For example, configuration options may be added, or aspects of the behavior of on-demand tables may be changed entirely. A defining feature of spreadsheets is the ability to update cells instantly as data they depend on changes. But sometimes a table is just a store of data, without any fancy calculations needed. In that case, you can choose to mark the table as \u201cOn-Demand\u201d in Grist. Grist can then serve data from that table faster, and make certain optimizations that may be helpful as the table gets large and regular tables become slow. When a table is marked \u201cOn-Demand\u201d: Data in the table will not generally be available for use in formulas. The table remains available for viewing and editing, but with caveats. Here\u2019s what you need to know about viewing data: Viewing is limited to 10000 rows at a time. Subsets of the table\u2019s rows can be selected by linking widgets , as for regular tables. You can expect good performance of linked widgets when the subset of the table\u2019s rows is less than 10000 rows, even if the full table is much larger. Here\u2019s what you need to know about editing data: You can edit data as normal in an On-Demand table. Automatic updates of anything that depends on that data simply won\u2019t happen. After edits, you need to reload the webpage to see everything updated. Here are some reasons you might make a table On-Demand: You want to make summaries and charts of slices of a large dataset using linked widgets . You are storing a lot of data in the table, and all you need to do with it is read parts of it back out via the API.","title":"On-Demand Tables"},{"location":"on-demand-tables/#make-an-on-demand-table","text":"To convert a table to be an \u201cOn Demand\u201d table, open the right panel, pick the \u201cTable\u201d panel, and the \u201cData\u201d section. Click on \u201cAdvanced Settings\u201d and you should see a \u201cMake On-Demand\u201d button. If you change your mind, and don\u2019t want the table to be \u201cOn-Demand\u201d anymore, you can find a button to undo this setting in the same place: Changing a table to become \u201cOn-Demand\u201d or to stop being \u201cOn-Demand\u201d will force the document to reload for all users viewing it at that moment.","title":"Make an On-Demand Table"},{"location":"on-demand-tables/#formulas-references-and-on-demand-tables","text":"In general, formulas and on-demand tables don\u2019t go together. That said, if you\u2019re careful you can use the following very simple formulas: $column - where the column mentioned is not itself a formula. This copies data from another column verbatim. $reference.column - where reference is a reference column , and column is not itself a formula. This formula support is enough to unlock Grist\u2019s linking widgets feature, which is why it is present. In general, if you try using formulas and On-Demand tables, you are setting yourself up for sadness. Remember, like any edit of an On-Demand table, when you add or change a formula column you\u2019ll generally need to reload to see cell values updated. Some type conversions, such as converting a column to be a reference, are not effective for On-Demand tables. So it is important to perform such conversions before making a table On-Demand. From formulas in regular tables, you cannot access the content of on-demand tables.","title":"Formulas, References and On-Demand Tables"},{"location":"page-widgets/","text":"Pages & widgets # Unlike traditional spreadsheets, in Grist you can create multiple views of the same data, and display multiple data sets on one page. This allows you to create useful dashboards and custom applications tailored to your needs. Pages # In Grist, you organize your document into \u201cpages\u201d. These are listed in the left panel, with collapsible groups. You may rearrange and group pages in the left panel by dragging them to suit your needs. You can rename pages using the three-dots menu next to the page name in the list, or by clicking the page name on top of the screen. Using the opener icon ( ) near the top of the left panel, you can collapse the panel to show only the initials of each page, leaving more screen space to view your data. To add a new page, use the \u201cAdd New\u201d button, and click \u201cAdd Page\u201d. At that point, you\u2019ll get to choose the page widget to include in the new page. Page widgets # A page contains sections, such as tables or charts, which we call \u201cpage widgets\u201d. Each page widget shows data from one table. A page may contain more than one page widget, and you can arrange and link them to create useful layouts. Here are the supported kinds of page widgets. The salient features of each one are described on separate pages. Table : similar to the spreadsheet grid and a good way to see many records at once. Card : shows a single record in a form-like layout which you can customize. Card List : uses the same layout options as a card, displays a scrollable list of records. Chart : plots data on a chart with support for several different chart types. Custom : inserts a custom webpage, optionally granting it access to the document\u2019s data. Widget picker # The menu opened by the \u201cAdd New\u201d button has options \u201cAdd Page\u201d and \u201cAdd Widget to Page\u201d. In either case, you\u2019ll see the \u201cpage widget picker\u201d where you can choose your desired widget: You can select the type of widget and the table of data to show (or \u201cNew Table\u201d to create a new table). The \u201csummary\u201d icon ( ) allows you to summarize data . When adding a widget to an existing page, you\u2019ll also see a \u201cSelect By\u201d option, which allows linking this widget to another one already on the page. This process is described in greater detail in Linking widgets . Once you\u2019ve added widgets, they can be moved around and resized, as described in Custom Layouts . Changing widget or its data # If you\u2019d like to change a widget or the data it displays after it\u2019s added, you may do so. Click the three-dots button on the top right of your widget, and select \u201cWidget options\u201d. This opens the right-side panel. Click on \u201cChange Widget\u201d. You can then use the widget picker to change the widget or the data it displays. Configuring field lists # Although different kinds of page widgets look very different, they all represent a list of records. Any of the widget types can be used to show the same underlying data. In a Table , each record is represented by a row, and columns represent the same kind of value for each record. A table is also a helpful representation of the underlying data to keep in mind when configuring other widget types. In a Card List , each row of the underlying data is shown as a card. Each column in the data corresponds to a field in this card. When talking about a Card widget, we\u2019ll use the term \u201cfield\u201d , which conceptually is the same as a \u201ccolumn\u201d in a Table widget. A Card is just like a Card List, but shows only one row of data at a time. In a Chart , each row of the underlying data table becomes a graphical element, such as a point on a line chart, a bar in a bar chart, or a slice of a pie chart. In this context, the columns of our data table are better known as data \u201cseries\u201d . Click on the opener icon ( ) to open the right panel. Depending on the currently-selected widget, you might see a tab for configuring a Column, Field, or Series. These are not different in substance, but different terms make more sense for different widgets. Clicking on the widget tab (highlighted in green in the images above), you\u2019ll see subtabs for \u201cWidget\u201d, \u201cSort & Filter\u201d, and \u201cData\u201d. We\u2019ll focus on the first one: \u201cWidget\u201d. You\u2019ll see options specific to the type of the selected widget, and below that two lists: \u201cVisible Columns\u201d and \u201cHidden Columns\u201d. The \u201cHidden Columns\u201d are the columns available in the data, but not shown in this widget. In a Card, these lists would show up as \u201cVisible Fields\u201d / \u201cHidden Fields\u201d. In a chart, they show up as \u201cVisible Series\u201d / \u201cHidden Series\u201d. These lists allow you to include, exclude, or rearrange fields in a widget. As you move your mouse over the items in the list, use the \u201ceye\u201d icons that pop up to show or hide them. Alternatively, you can select several items using the checkboxes, and hide or show them together. This ordered list of fields can be used to customize any of the page widget types. It has a particular importance in the Chart widget , where different chart types and options require you to place series in a certain order in the \u201cVisible Series\u201d list to ensure your data is plotted correctly.","title":"Pages & widgets"},{"location":"page-widgets/#pages-widgets","text":"Unlike traditional spreadsheets, in Grist you can create multiple views of the same data, and display multiple data sets on one page. This allows you to create useful dashboards and custom applications tailored to your needs.","title":""},{"location":"page-widgets/#pages","text":"In Grist, you organize your document into \u201cpages\u201d. These are listed in the left panel, with collapsible groups. You may rearrange and group pages in the left panel by dragging them to suit your needs. You can rename pages using the three-dots menu next to the page name in the list, or by clicking the page name on top of the screen. Using the opener icon ( ) near the top of the left panel, you can collapse the panel to show only the initials of each page, leaving more screen space to view your data. To add a new page, use the \u201cAdd New\u201d button, and click \u201cAdd Page\u201d. At that point, you\u2019ll get to choose the page widget to include in the new page.","title":"Pages"},{"location":"page-widgets/#page-widgets","text":"A page contains sections, such as tables or charts, which we call \u201cpage widgets\u201d. Each page widget shows data from one table. A page may contain more than one page widget, and you can arrange and link them to create useful layouts. Here are the supported kinds of page widgets. The salient features of each one are described on separate pages. Table : similar to the spreadsheet grid and a good way to see many records at once. Card : shows a single record in a form-like layout which you can customize. Card List : uses the same layout options as a card, displays a scrollable list of records. Chart : plots data on a chart with support for several different chart types. Custom : inserts a custom webpage, optionally granting it access to the document\u2019s data.","title":"Page widgets"},{"location":"page-widgets/#widget-picker","text":"The menu opened by the \u201cAdd New\u201d button has options \u201cAdd Page\u201d and \u201cAdd Widget to Page\u201d. In either case, you\u2019ll see the \u201cpage widget picker\u201d where you can choose your desired widget: You can select the type of widget and the table of data to show (or \u201cNew Table\u201d to create a new table). The \u201csummary\u201d icon ( ) allows you to summarize data . When adding a widget to an existing page, you\u2019ll also see a \u201cSelect By\u201d option, which allows linking this widget to another one already on the page. This process is described in greater detail in Linking widgets . Once you\u2019ve added widgets, they can be moved around and resized, as described in Custom Layouts .","title":"Widget picker"},{"location":"page-widgets/#changing-widget-or-its-data","text":"If you\u2019d like to change a widget or the data it displays after it\u2019s added, you may do so. Click the three-dots button on the top right of your widget, and select \u201cWidget options\u201d. This opens the right-side panel. Click on \u201cChange Widget\u201d. You can then use the widget picker to change the widget or the data it displays.","title":"Changing widget or its data"},{"location":"page-widgets/#configuring-field-lists","text":"Although different kinds of page widgets look very different, they all represent a list of records. Any of the widget types can be used to show the same underlying data. In a Table , each record is represented by a row, and columns represent the same kind of value for each record. A table is also a helpful representation of the underlying data to keep in mind when configuring other widget types. In a Card List , each row of the underlying data is shown as a card. Each column in the data corresponds to a field in this card. When talking about a Card widget, we\u2019ll use the term \u201cfield\u201d , which conceptually is the same as a \u201ccolumn\u201d in a Table widget. A Card is just like a Card List, but shows only one row of data at a time. In a Chart , each row of the underlying data table becomes a graphical element, such as a point on a line chart, a bar in a bar chart, or a slice of a pie chart. In this context, the columns of our data table are better known as data \u201cseries\u201d . Click on the opener icon ( ) to open the right panel. Depending on the currently-selected widget, you might see a tab for configuring a Column, Field, or Series. These are not different in substance, but different terms make more sense for different widgets. Clicking on the widget tab (highlighted in green in the images above), you\u2019ll see subtabs for \u201cWidget\u201d, \u201cSort & Filter\u201d, and \u201cData\u201d. We\u2019ll focus on the first one: \u201cWidget\u201d. You\u2019ll see options specific to the type of the selected widget, and below that two lists: \u201cVisible Columns\u201d and \u201cHidden Columns\u201d. The \u201cHidden Columns\u201d are the columns available in the data, but not shown in this widget. In a Card, these lists would show up as \u201cVisible Fields\u201d / \u201cHidden Fields\u201d. In a chart, they show up as \u201cVisible Series\u201d / \u201cHidden Series\u201d. These lists allow you to include, exclude, or rearrange fields in a widget. As you move your mouse over the items in the list, use the \u201ceye\u201d icons that pop up to show or hide them. Alternatively, you can select several items using the checkboxes, and hide or show them together. This ordered list of fields can be used to customize any of the page widget types. It has a particular importance in the Chart widget , where different chart types and options require you to place series in a certain order in the \u201cVisible Series\u201d list to ensure your data is plotted correctly.","title":"Configuring field lists"},{"location":"python/","text":"Python # Grist formulas are written in Python, the most popular language for data science. The entirety of Python\u2019s standard library is available to you. For those with a spreadsheet background, we\u2019ve also added a suite of Excel-like functions, with all-uppercase names. Here\u2019s the full list of functions . Python formulas are evaluated in a sandbox, without internet access, and without a persistent filesystem. Supported Python versions # We currently support two versions of Python: Python 3 (specifically 3.9 at the time of writing) Python 2 (specifically 2.7) Newly created documents on our hosted service use Python 3 by default, while older documents (created before November 2021 approximately) use Python 2 by default. To tell which version of Python a specific document uses, look at its Document Settings . The Engine setting may be python2 , python3 , or blank. A blank setting implies python2 . If you have editing rights on a document, you can change the Engine setting, and the document will then reload with all formulas now interpreted using the version of Python you have specified. We recommend caution in doing so. A formula that works as intended in one version of Python may give errors in another, or (worse) give the wrong results. Some formulas may fail or give wrong results if used with a version of Python that is different from the one for which they were written. Python 2 reached its end of life in January 2020, so if you look online for python help, the answers you find are more and more likely to be for Python 3. If you have a document that uses Python 2, and you\u2019d like to switch it to use Python 3, we recommend reading Testing the effect of changing Python versions and Differences between Python versions . Be sure to check all tables and columns, and both regular formalas and trigger formulas. We\u2019d be interested to hear your experience, and to help with any problems, on the community forum . Self-hosted Grist may use any version of Python you configure it with, but bear in mind we actively test only the supported versions. Testing the effect of changing Python versions # Grist has some features that can help you evaluate the consequences of changing the Python version a document uses. The Work on a Copy feature is useful to experiment with changing the Python version without affecting your document until you are ready. There is a \u201cCompare with original\u201d option that will let you visualize which cells changed, if any. Be sure to look at all tables and columns. The Activity tab of Document History (with \u201cAll Tables\u201d selected) lets you review in more detail what has changed. Be careful to test any trigger formulas you may have, since the Python code in them won\u2019t be exercised until you specifically trigger these formulas. You can use the code viewer to quickly remind yourself of all formulas in a document, so you can systematically check them all. Differences between Python versions # There are important differences between Python 2 and 3. Formulas may need to be changed in order to give the same results when switching between Python versions. There are many online resources such as this compatibility cheatsheet which can help figure out what the issue is when you hit a difference, and get ideas on how to resolve it. Here, we list common cases we\u2019ve seen in Grist formulas. Division of whole numbers # In Python 2, dividing whole numbers gives a whole number, so 9 / 2 is 4 . In Python 3, it is 4.5 . For a spreadsheet, this is a much more sensible answer, but if you rely on the Python 2 behavior, we suggest you switch to the // operator which is consistent between versions ( 9 // 2 is 4 for both). For example the General Ledger template had a Python 2 formula for computing the quarter from a date (so a Date of 2021-08-15 gave a Quarter of 2021 Q3 ) as follows: \"%s Q%s\" % ($Date.year, CEILING($Date.month, 3) / 3) when switching to Python 3, this needed correcting to: \"%s Q%s\" % ($Date.year, CEILING($Date.month, 3) // 3) Otherwise Quarters became fractional! Some imports are reorganized # Python has a useful standard library, but some parts of it were moved around between Python 2 and 3. For example, several of our templates have formulas to construct URLs, to open custom searches for example, or to open a pre-populated email with calculated To , CC , and Subject values. Python has handy helpers for constructing URLs, but they moved around a bit between Python versions. Our Lightweight CRM example had a Python 2 formula like this to kick off a search for emails in Gmail: from urllib import quote_plus \"Gmail search https://mail.google.com/mail/u/0/#search/%s\" % quote_plus($Email) In Python 3, the import line needed changing to: from urllib.parse import quote_plus Subtle change in rounding # Python 3 switches the built-in function round() from rounding the way many people learned in school (where when rounding .5 , you always round up) to what is called \u201cbanker\u2019s rounding\u201d (where you round from .5 to the nearest even number). This is generally accepted as an improvement, mitigating a bias to larger numbers that can become significant at scale. But it could be a surprise to see numbers change like this in an established document. If you really need Python 2\u2019s rounding, replace any calls to Python\u2019s round function with the Excel-compatible ROUND function. For example: round($val, 2) would be replaced with: ROUND($val, 2) Unicode text handling # Python 2 does not shine at handling international text and emojis. We have mitigated many problems by setting the default encoding to utf8 for all documents. Nevertheless, when switching from Python 2 to Python 3, you may see type changes or errors. Consider this Python 2 formula to generate a one-way hash of an email address: import hashlib hashlib.sha256($Email).hexdigest() In Python 3 this fails with TypeError: Unicode-objects must be encoded before hashing , which can be resolved by replacing $Email with $Email.encode() : import hashlib hashlib.sha256($Email.encode()).hexdigest()","title":"Python versions"},{"location":"python/#python","text":"Grist formulas are written in Python, the most popular language for data science. The entirety of Python\u2019s standard library is available to you. For those with a spreadsheet background, we\u2019ve also added a suite of Excel-like functions, with all-uppercase names. Here\u2019s the full list of functions . Python formulas are evaluated in a sandbox, without internet access, and without a persistent filesystem.","title":"Python"},{"location":"python/#supported-python-versions","text":"We currently support two versions of Python: Python 3 (specifically 3.9 at the time of writing) Python 2 (specifically 2.7) Newly created documents on our hosted service use Python 3 by default, while older documents (created before November 2021 approximately) use Python 2 by default. To tell which version of Python a specific document uses, look at its Document Settings . The Engine setting may be python2 , python3 , or blank. A blank setting implies python2 . If you have editing rights on a document, you can change the Engine setting, and the document will then reload with all formulas now interpreted using the version of Python you have specified. We recommend caution in doing so. A formula that works as intended in one version of Python may give errors in another, or (worse) give the wrong results. Some formulas may fail or give wrong results if used with a version of Python that is different from the one for which they were written. Python 2 reached its end of life in January 2020, so if you look online for python help, the answers you find are more and more likely to be for Python 3. If you have a document that uses Python 2, and you\u2019d like to switch it to use Python 3, we recommend reading Testing the effect of changing Python versions and Differences between Python versions . Be sure to check all tables and columns, and both regular formalas and trigger formulas. We\u2019d be interested to hear your experience, and to help with any problems, on the community forum . Self-hosted Grist may use any version of Python you configure it with, but bear in mind we actively test only the supported versions.","title":"Supported Python versions"},{"location":"python/#testing-the-effect-of-changing-python-versions","text":"Grist has some features that can help you evaluate the consequences of changing the Python version a document uses. The Work on a Copy feature is useful to experiment with changing the Python version without affecting your document until you are ready. There is a \u201cCompare with original\u201d option that will let you visualize which cells changed, if any. Be sure to look at all tables and columns. The Activity tab of Document History (with \u201cAll Tables\u201d selected) lets you review in more detail what has changed. Be careful to test any trigger formulas you may have, since the Python code in them won\u2019t be exercised until you specifically trigger these formulas. You can use the code viewer to quickly remind yourself of all formulas in a document, so you can systematically check them all.","title":"Testing the effect of changing Python versions"},{"location":"python/#differences-between-python-versions","text":"There are important differences between Python 2 and 3. Formulas may need to be changed in order to give the same results when switching between Python versions. There are many online resources such as this compatibility cheatsheet which can help figure out what the issue is when you hit a difference, and get ideas on how to resolve it. Here, we list common cases we\u2019ve seen in Grist formulas.","title":"Differences between Python versions"},{"location":"python/#division-of-whole-numbers","text":"In Python 2, dividing whole numbers gives a whole number, so 9 / 2 is 4 . In Python 3, it is 4.5 . For a spreadsheet, this is a much more sensible answer, but if you rely on the Python 2 behavior, we suggest you switch to the // operator which is consistent between versions ( 9 // 2 is 4 for both). For example the General Ledger template had a Python 2 formula for computing the quarter from a date (so a Date of 2021-08-15 gave a Quarter of 2021 Q3 ) as follows: \"%s Q%s\" % ($Date.year, CEILING($Date.month, 3) / 3) when switching to Python 3, this needed correcting to: \"%s Q%s\" % ($Date.year, CEILING($Date.month, 3) // 3) Otherwise Quarters became fractional!","title":"Division of whole numbers"},{"location":"python/#some-imports-are-reorganized","text":"Python has a useful standard library, but some parts of it were moved around between Python 2 and 3. For example, several of our templates have formulas to construct URLs, to open custom searches for example, or to open a pre-populated email with calculated To , CC , and Subject values. Python has handy helpers for constructing URLs, but they moved around a bit between Python versions. Our Lightweight CRM example had a Python 2 formula like this to kick off a search for emails in Gmail: from urllib import quote_plus \"Gmail search https://mail.google.com/mail/u/0/#search/%s\" % quote_plus($Email) In Python 3, the import line needed changing to: from urllib.parse import quote_plus","title":"Some imports are reorganized"},{"location":"python/#subtle-change-in-rounding","text":"Python 3 switches the built-in function round() from rounding the way many people learned in school (where when rounding .5 , you always round up) to what is called \u201cbanker\u2019s rounding\u201d (where you round from .5 to the nearest even number). This is generally accepted as an improvement, mitigating a bias to larger numbers that can become significant at scale. But it could be a surprise to see numbers change like this in an established document. If you really need Python 2\u2019s rounding, replace any calls to Python\u2019s round function with the Excel-compatible ROUND function. For example: round($val, 2) would be replaced with: ROUND($val, 2)","title":"Subtle change in rounding"},{"location":"python/#unicode-text-handling","text":"Python 2 does not shine at handling international text and emojis. We have mitigated many problems by setting the default encoding to utf8 for all documents. Nevertheless, when switching from Python 2 to Python 3, you may see type changes or errors. Consider this Python 2 formula to generate a one-way hash of an email address: import hashlib hashlib.sha256($Email).hexdigest() In Python 3 this fails with TypeError: Unicode-objects must be encoded before hashing , which can be resolved by replacing $Email with $Email.encode() : import hashlib hashlib.sha256($Email.encode()).hexdigest()","title":"Unicode text handling"},{"location":"register-as-consultant/","text":"Register to be a Grist consultant # .creg-form { line-height: initial; } .form-group .control-label { font-weight: normal; } .creg-button { margin: 24px 0; background-color: #11b683; border: none; color: white; } .creg-button:hover { background-color: #009058; border: none; color: white; } #creg-submitted, #creg-error { display: none; margin-top: 40px; } Are you a freelancer? Do you enjoy building in Grist and organizing data? We\u2019d be glad to support you, and to add you to our list of independent Grist consultants. Please fill out the information below, and we\u2019ll get in touch with you. Your Name: Email: Phone: Company: Website: Your technical background: Excel: None Beginner Intermediate Advanced SQL: None Beginner Intermediate Advanced Python: None Beginner Intermediate Advanced Javascript: None Beginner Intermediate Advanced Grist: None Beginner Intermediate Advanced Are you interested in receiving Grist training? Interested Submit Thank you for registering! We'll be in touch. Meanwhile, you are welcome to reach out to us with any questions, at support@getgrist.com . Could not submit the form. Try again function formDataToObj(formElem) { const formData = new FormData(formElem); const data = {}; for (const pair of formData.entries()) { if (typeof pair[1] === 'string') { data[pair[0]] = [pair[1]]; } } return data; } const form = document.getElementById('creg-form'); form.addEventListener('submit', (ev) => { ev.preventDefault(); const data = formDataToObj(form); const options = { method: 'POST', body: JSON.stringify(data), headers: { 'Content-Type': 'application/json', 'X-Requested-With': 'XMLHttpRequest', } }; window.fetch(form.action, options) .then(resp => { return resp.json() .then(body => { console.log(\"BODY\", body); if (resp.status !== 200) { throw new Error(\"Could not submit the form: \" + (body && body.error || \"unknown error\")); } console.log(\"Form submitted\", body); document.getElementById('creg-form').style.display = 'none'; document.getElementById('creg-submitted').style.display = 'block'; }) }) .catch(err => { console.warn(\"ERROR\", err); document.getElementById('creg-form').style.display = 'none'; document.getElementById('creg-error-message').textContent = String(err); document.getElementById('creg-error').style.display = 'block'; }); });","title":"Register to be a Grist consultant"},{"location":"register-as-consultant/#register-to-be-a-grist-consultant","text":".creg-form { line-height: initial; } .form-group .control-label { font-weight: normal; } .creg-button { margin: 24px 0; background-color: #11b683; border: none; color: white; } .creg-button:hover { background-color: #009058; border: none; color: white; } #creg-submitted, #creg-error { display: none; margin-top: 40px; } Are you a freelancer? Do you enjoy building in Grist and organizing data? We\u2019d be glad to support you, and to add you to our list of independent Grist consultants. Please fill out the information below, and we\u2019ll get in touch with you. Your Name: Email: Phone: Company: Website: Your technical background: Excel: None Beginner Intermediate Advanced SQL: None Beginner Intermediate Advanced Python: None Beginner Intermediate Advanced Javascript: None Beginner Intermediate Advanced Grist: None Beginner Intermediate Advanced Are you interested in receiving Grist training? Interested Submit Thank you for registering! We'll be in touch. Meanwhile, you are welcome to reach out to us with any questions, at support@getgrist.com . Could not submit the form. Try again function formDataToObj(formElem) { const formData = new FormData(formElem); const data = {}; for (const pair of formData.entries()) { if (typeof pair[1] === 'string') { data[pair[0]] = [pair[1]]; } } return data; } const form = document.getElementById('creg-form'); form.addEventListener('submit', (ev) => { ev.preventDefault(); const data = formDataToObj(form); const options = { method: 'POST', body: JSON.stringify(data), headers: { 'Content-Type': 'application/json', 'X-Requested-With': 'XMLHttpRequest', } }; window.fetch(form.action, options) .then(resp => { return resp.json() .then(body => { console.log(\"BODY\", body); if (resp.status !== 200) { throw new Error(\"Could not submit the form: \" + (body && body.error || \"unknown error\")); } console.log(\"Form submitted\", body); document.getElementById('creg-form').style.display = 'none'; document.getElementById('creg-submitted').style.display = 'block'; }) }) .catch(err => { console.warn(\"ERROR\", err); document.getElementById('creg-form').style.display = 'none'; document.getElementById('creg-error-message').textContent = String(err); document.getElementById('creg-error').style.display = 'block'; }); });","title":"Register to be a Grist consultant"},{"location":"rest-api/","text":"Grist API # Grist has an API for manipulating documents, workspaces, and team sites. To access this API, you\u2019ll need an API key. An API key is owned by a single user, and has the same permissions as that user. To enable API access for yourself, click on the circle with your profile picture or initial on the top right of the screen. Then select the \u201cProfile Settings\u201d option. This shows a dialog with an \u201cAPI key\u201d section. Click on the \u201cCreate\u201d button to create an api key. You can now copy this key for use when making API calls. To be clear, copy the key you get when clicking \u201cCreate\u201d, not the key in the above screenshot, which isn\u2019t a real one. You can revoke your API key by clicking \u201cRemove\u201d from Profile Settings at any time. You\u2019ll then have the option to create a new one if you wish. To test your api key, try this from the command-line (substituting your api key): curl -H \"Authorization: Bearer <API-KEY-GOES HERE>\" https://docs.getgrist.com/api/orgs This should return a list of organizations, which is what the API calls team sites and your personal site. Your personal site is accessible at docs.getgrist.com . Team sites are accessible at <TEAM>.getgrist.com . To access documents on your personal site via the API, simply continue using the docs.getgrist.com domain. To access documents and workspaces on a team site, use <TEAM>.getgrist.com . For example, to list all the workspaces and documents you have access to on a site, do: curl -H \"Authorization: Bearer <API-KEY-GOES-HERE>\" \\ https://<docs|TEAM>.getgrist.com/api/orgs/current/workspaces For details of the endpoints available, see our API docs . There are also client libraries available: JavaScript/TypeScript client library Python client library","title":"API usage"},{"location":"rest-api/#grist-api","text":"Grist has an API for manipulating documents, workspaces, and team sites. To access this API, you\u2019ll need an API key. An API key is owned by a single user, and has the same permissions as that user. To enable API access for yourself, click on the circle with your profile picture or initial on the top right of the screen. Then select the \u201cProfile Settings\u201d option. This shows a dialog with an \u201cAPI key\u201d section. Click on the \u201cCreate\u201d button to create an api key. You can now copy this key for use when making API calls. To be clear, copy the key you get when clicking \u201cCreate\u201d, not the key in the above screenshot, which isn\u2019t a real one. You can revoke your API key by clicking \u201cRemove\u201d from Profile Settings at any time. You\u2019ll then have the option to create a new one if you wish. To test your api key, try this from the command-line (substituting your api key): curl -H \"Authorization: Bearer <API-KEY-GOES HERE>\" https://docs.getgrist.com/api/orgs This should return a list of organizations, which is what the API calls team sites and your personal site. Your personal site is accessible at docs.getgrist.com . Team sites are accessible at <TEAM>.getgrist.com . To access documents on your personal site via the API, simply continue using the docs.getgrist.com domain. To access documents and workspaces on a team site, use <TEAM>.getgrist.com . For example, to list all the workspaces and documents you have access to on a site, do: curl -H \"Authorization: Bearer <API-KEY-GOES-HERE>\" \\ https://<docs|TEAM>.getgrist.com/api/orgs/current/workspaces For details of the endpoints available, see our API docs . There are also client libraries available: JavaScript/TypeScript client library Python client library","title":"Grist API"},{"location":"search-sort-filter/","text":"Search, Sort, and Filter # Grist offers several ways to search within your data, or to organize data to be at your fingertips. Searching # At the top of the document screen, you\u2019ll see a magnifying glass icon ( ) which opens a spreadsheet-like search. You can also start searching using the keyboard shortcut \u2318 F (Mac) or Ctrl + F (Windows). As you type into the search textbox, Grist will move the cursor to the next cell containing your search text. If there are no more matches in the current widget or page, the cursor will move to the next widget or switch to the next page. Sorting # It\u2019s easy to find a word in a dictionary, but it wouldn\u2019t be if the words weren\u2019t sorted! Grist offers flexible and convenient sorting options, which are quite different from a traditional spreadsheet. To sort a table in Grist by a column, open the menu from the column\u2019s header and select \u201cSort\u201d: In the same menu item, you can choose to sort in ascending or descending order. Difference from Excel : Importantly, sorting does not change any formula calculations, it only changes the order in which you see the records. This is different from spreadsheets like Excel. Another difference is that the sort setting is \u201cactive\u201d: if you add a record, or change a cell that\u2019s used for sorting, the record will jump into its correct position in the sort order. See Saving Row Positions below for an option more similar to Excel\u2019s behavior. Multiple Columns # When a table is sorted, you can click another column to add it to the sort: The second column determines the order of records whose values in the first column are the same. You can add more columns to the sort. For example, you could: Sort employees first by Department, then by Last Name, then by First Name. Sort transactions first by Date, then by Amount. Sort tasks first by \u2018Is Completed\u2019 column, then by Priority. Saving Sort Settings # Because sorting only affects your view of data, you can sort data in a Grist document even if you do not have edit access to it. If you can write to a document, then you can also save sort settings. When you change sorting on a table, the icon on top of it gets highlighted in green. Click it to see the currently active setting, as well as the options to manipulate them (e.g. remove a column from the sort), to save the setting, or to revert your changes: When you save sort settings, they will apply to the widget any time this page is opened, either by you or other collaborators. Multiple Views : Just like you can create multiple pages showing data from the same table, you can have different sort settings on each view of the data. E.g. you could have one view showing credit card transactions sorted by date, and another showing them sorted by amount. Sorting from Side Panel # You can sort widgets other than Table, such as Card List or Chart, using the \u201cSort & Filter\u201d subtab in the side panel: You can add one or more columns, save or revert settings and use advanced sorting options. Advance sorting options # The \u201cSort & Filter\u201d subtab exposes additional sorting options that might be useful for various column types: Use choice position \u2013 available on Choice column, sorts records using the configured order of choice items, rather then their names. Empty values last \u2013 in alphabetical order empty values are shown first by default, use this option to put them at the end. Natural sort \u2013 for Text column will treat multi-digit numbers in strings as if they were a single character, allowing more human-friendly ordering. For example, using natural sort , Product10 will be positioned after Product2 . Saving Row Positions # When you use the side panel, you\u2019ll notice one extra button: \u201cUpdate Data\u201d. If you click it, the current position of the records relative to each other is saved, and the active sort by your selected columns is turned off. In other words, rows will no longer jump into place according to values in certain columns, but will remain in the place they are in. You will also be able to reorder rows manually by dragging them. Filtering # You can choose to see only a subset of data in a table by filtering for certain values in a column. Open the column menu from any column\u2019s header, and click \u201cFilter Data\u201d. You\u2019ll see a dialog listing the values in the column: Uncheck the values you don\u2019t want to see, or click \u201cSelect none\u201d and then check only the values you do want to see. The magnifying glass icon in the corner of the dialog lets you find values of interest if the list is long. Click \u201cApply\u201d to apply your setting. You can filter by more than one column. Only those rows will appear which match all of the filters. As with sorting, you can save filters to the view. Click the highlighted \u201cSort & Filter\u201d icon on top of the table: You\u2019ll see the columns for which there are active filters, and options to save the filter, or to revert to saved settings. As with sorting, you can create different widgets or pages showing the same table with different filter settings. For example, you could have one page showing event attendees with status \u201cConfirmed\u201d and another one showing those with status \u201cPending\u201d. Filter Buttons # Another way to apply filtering is through Filter Buttons. To use Filter Buttons, turn on the Filter Bar. Click the \u201cSort & Filter\u201d icon on the top-right of the table then select \u201cToggle Filter Bar\u201d. A grey \u201c+ Add Filter\u201d button will appear at the top-left of the table. When you select this button, a list of your columns will appear. Filtering from the filter bar works exactly like the filtering described above. Note that there is a search bar at the top that allows you to easily find values in longer lists. Click \u201cApply\u201d to apply your settings. If you want to save your filters for future sessions, click the green checkmark next to the \u201cSearch & Filter\u201d icon to save. The value in not saving settings is the ability to do quick filters and lookups without saving that filter forever, or for the rest of your team to see. So it may be useful to save the buttons without any filtering to create a quick filter toolbar. If you do save settings with filters applied, that saves it for future sessions and other team members will see the same thing. With the Filter Bar on, you have buttons that you can use to more easily see and update your filters. If you toggle the Filter Bar to off, any saved filters will still be applied but the buttons will no longer be visible. Complex Filters # To filter for more complex conditions, create a new formula column and filter this column for values of \u201ctrue\u201d. For example, to filter for \u201cPersons with salary over $100,000 or a position of \u2018Board Member\u2019\u201c, you can use a formula like this: $Salary > 100000 or $Position == 'Board Member' This will produce a column of true and false values, which you can filter for the value true .","title":"Search, sort & filter"},{"location":"search-sort-filter/#search-sort-and-filter","text":"Grist offers several ways to search within your data, or to organize data to be at your fingertips.","title":"Search, Sort, and Filter"},{"location":"search-sort-filter/#searching","text":"At the top of the document screen, you\u2019ll see a magnifying glass icon ( ) which opens a spreadsheet-like search. You can also start searching using the keyboard shortcut \u2318 F (Mac) or Ctrl + F (Windows). As you type into the search textbox, Grist will move the cursor to the next cell containing your search text. If there are no more matches in the current widget or page, the cursor will move to the next widget or switch to the next page.","title":"Searching"},{"location":"search-sort-filter/#sorting","text":"It\u2019s easy to find a word in a dictionary, but it wouldn\u2019t be if the words weren\u2019t sorted! Grist offers flexible and convenient sorting options, which are quite different from a traditional spreadsheet. To sort a table in Grist by a column, open the menu from the column\u2019s header and select \u201cSort\u201d: In the same menu item, you can choose to sort in ascending or descending order. Difference from Excel : Importantly, sorting does not change any formula calculations, it only changes the order in which you see the records. This is different from spreadsheets like Excel. Another difference is that the sort setting is \u201cactive\u201d: if you add a record, or change a cell that\u2019s used for sorting, the record will jump into its correct position in the sort order. See Saving Row Positions below for an option more similar to Excel\u2019s behavior.","title":"Sorting"},{"location":"search-sort-filter/#multiple-columns","text":"When a table is sorted, you can click another column to add it to the sort: The second column determines the order of records whose values in the first column are the same. You can add more columns to the sort. For example, you could: Sort employees first by Department, then by Last Name, then by First Name. Sort transactions first by Date, then by Amount. Sort tasks first by \u2018Is Completed\u2019 column, then by Priority.","title":"Multiple Columns"},{"location":"search-sort-filter/#saving-sort-settings","text":"Because sorting only affects your view of data, you can sort data in a Grist document even if you do not have edit access to it. If you can write to a document, then you can also save sort settings. When you change sorting on a table, the icon on top of it gets highlighted in green. Click it to see the currently active setting, as well as the options to manipulate them (e.g. remove a column from the sort), to save the setting, or to revert your changes: When you save sort settings, they will apply to the widget any time this page is opened, either by you or other collaborators. Multiple Views : Just like you can create multiple pages showing data from the same table, you can have different sort settings on each view of the data. E.g. you could have one view showing credit card transactions sorted by date, and another showing them sorted by amount.","title":"Saving Sort Settings"},{"location":"search-sort-filter/#sorting-from-side-panel","text":"You can sort widgets other than Table, such as Card List or Chart, using the \u201cSort & Filter\u201d subtab in the side panel: You can add one or more columns, save or revert settings and use advanced sorting options.","title":"Sorting from Side Panel"},{"location":"search-sort-filter/#advance-sorting-options","text":"The \u201cSort & Filter\u201d subtab exposes additional sorting options that might be useful for various column types: Use choice position \u2013 available on Choice column, sorts records using the configured order of choice items, rather then their names. Empty values last \u2013 in alphabetical order empty values are shown first by default, use this option to put them at the end. Natural sort \u2013 for Text column will treat multi-digit numbers in strings as if they were a single character, allowing more human-friendly ordering. For example, using natural sort , Product10 will be positioned after Product2 .","title":"Advance sorting options"},{"location":"search-sort-filter/#saving-row-positions","text":"When you use the side panel, you\u2019ll notice one extra button: \u201cUpdate Data\u201d. If you click it, the current position of the records relative to each other is saved, and the active sort by your selected columns is turned off. In other words, rows will no longer jump into place according to values in certain columns, but will remain in the place they are in. You will also be able to reorder rows manually by dragging them.","title":"Saving Row Positions"},{"location":"search-sort-filter/#filtering","text":"You can choose to see only a subset of data in a table by filtering for certain values in a column. Open the column menu from any column\u2019s header, and click \u201cFilter Data\u201d. You\u2019ll see a dialog listing the values in the column: Uncheck the values you don\u2019t want to see, or click \u201cSelect none\u201d and then check only the values you do want to see. The magnifying glass icon in the corner of the dialog lets you find values of interest if the list is long. Click \u201cApply\u201d to apply your setting. You can filter by more than one column. Only those rows will appear which match all of the filters. As with sorting, you can save filters to the view. Click the highlighted \u201cSort & Filter\u201d icon on top of the table: You\u2019ll see the columns for which there are active filters, and options to save the filter, or to revert to saved settings. As with sorting, you can create different widgets or pages showing the same table with different filter settings. For example, you could have one page showing event attendees with status \u201cConfirmed\u201d and another one showing those with status \u201cPending\u201d.","title":"Filtering"},{"location":"search-sort-filter/#filter-buttons","text":"Another way to apply filtering is through Filter Buttons. To use Filter Buttons, turn on the Filter Bar. Click the \u201cSort & Filter\u201d icon on the top-right of the table then select \u201cToggle Filter Bar\u201d. A grey \u201c+ Add Filter\u201d button will appear at the top-left of the table. When you select this button, a list of your columns will appear. Filtering from the filter bar works exactly like the filtering described above. Note that there is a search bar at the top that allows you to easily find values in longer lists. Click \u201cApply\u201d to apply your settings. If you want to save your filters for future sessions, click the green checkmark next to the \u201cSearch & Filter\u201d icon to save. The value in not saving settings is the ability to do quick filters and lookups without saving that filter forever, or for the rest of your team to see. So it may be useful to save the buttons without any filtering to create a quick filter toolbar. If you do save settings with filters applied, that saves it for future sessions and other team members will see the same thing. With the Filter Bar on, you have buttons that you can use to more easily see and update your filters. If you toggle the Filter Bar to off, any saved filters will still be applied but the buttons will no longer be visible.","title":"Filter Buttons"},{"location":"search-sort-filter/#complex-filters","text":"To filter for more complex conditions, create a new formula column and filter this column for values of \u201ctrue\u201d. For example, to filter for \u201cPersons with salary over $100,000 or a position of \u2018Board Member\u2019\u201c, you can use a formula like this: $Salary > 100000 or $Position == 'Board Member' This will produce a column of true and false values, which you can filter for the value true .","title":"Complex Filters"},{"location":"sharing/","text":"Sharing # To collaborate in Grist, you can invite other users to access a document. For team plans, you can also add users to your team site, or to a workspace (see Team Sharing ). When the document is open, click on the sharing icon ( ) on the top right of the screen. It opens a menu with sharing and export options. Select \u201cManage Users\u201d. This option is also available in the Grist home page, when you click the three-dots icon to the right of a document\u2019s name. If the \u201cManage Users\u201d item is grayed out, it means you don\u2019t have permission to view or manage the sharing settings for this document. The sharing dialog that opens lists the users that have access to the document. To add a user, enter that user\u2019s email address and hit \u201cEnter\u201d or click \u201cInvite new member\u201d in the dropdown. You may select a role for any invited user, and click \u201cConfirm\u201d to save the changes and send any invitations. Roles # There are three primary roles supported by Grist: Viewer : allows a user to view the document but not make any changes to it. Some operations like sorting and filtering will work without affecting other users of the document. This is the default role when you type in an email address. Editor : allows a user to view or make changes to the document data, structure, or formulas, but not to its sharing settings. Owner : gives a user complete permissions to the document, including to view and change its sharing settings. A document may have one or more owners. If you are able to open the \u201cManage Users\u201d dialog, you have the \u201cowner\u201d role. You may not change your own access, but your access may be reduced or removed by another owner. The option to inherit access does not affect individual plans, and is explained in the Team Sharing article. Public access # If you want to share your document with a wider audience, you can make it publicly accessible. Open the share menu by clicking on the share icon ( ) on top right of the screen and selecting \u201cManage Users\u201d. Toggle the dropdown next to \u201cPublic Access\u201d and select \u201cOn\u201d: Once you click \u201cconfirm\u201d, anyone with the link to your document will be able to view it. They will not be required to have a Grist login. The \u201cCopy Link\u201d button is handy to copy the link to the clipboard for pasting into an email, tweet, or anywhere else. You can also allow anyone with the link to edit your document. Simply switch the role for Public Access to Editor. Note that this allows anyone with the link to change absolutely anything in your document, including deleting all the data. Should anything go wrong, you may recover previous versions of your document in the snapshots section of Document History. Access rules may be combined with view-only link sharing, i.e. when the Public Access role is set to \u201cViewer.\u201d Read more about Link Keys to learn how to set rules that limit which parts of your data users may see when accessing your document via a particular link. Access Rules do not support restricted link sharing when Public Access is set to \u201cEditor.\u201d Supporting access rules in this case, and others, is on our roadmap.","title":"Sharing a document"},{"location":"sharing/#sharing","text":"To collaborate in Grist, you can invite other users to access a document. For team plans, you can also add users to your team site, or to a workspace (see Team Sharing ). When the document is open, click on the sharing icon ( ) on the top right of the screen. It opens a menu with sharing and export options. Select \u201cManage Users\u201d. This option is also available in the Grist home page, when you click the three-dots icon to the right of a document\u2019s name. If the \u201cManage Users\u201d item is grayed out, it means you don\u2019t have permission to view or manage the sharing settings for this document. The sharing dialog that opens lists the users that have access to the document. To add a user, enter that user\u2019s email address and hit \u201cEnter\u201d or click \u201cInvite new member\u201d in the dropdown. You may select a role for any invited user, and click \u201cConfirm\u201d to save the changes and send any invitations.","title":"Sharing"},{"location":"sharing/#roles","text":"There are three primary roles supported by Grist: Viewer : allows a user to view the document but not make any changes to it. Some operations like sorting and filtering will work without affecting other users of the document. This is the default role when you type in an email address. Editor : allows a user to view or make changes to the document data, structure, or formulas, but not to its sharing settings. Owner : gives a user complete permissions to the document, including to view and change its sharing settings. A document may have one or more owners. If you are able to open the \u201cManage Users\u201d dialog, you have the \u201cowner\u201d role. You may not change your own access, but your access may be reduced or removed by another owner. The option to inherit access does not affect individual plans, and is explained in the Team Sharing article.","title":"Roles"},{"location":"sharing/#public-access","text":"If you want to share your document with a wider audience, you can make it publicly accessible. Open the share menu by clicking on the share icon ( ) on top right of the screen and selecting \u201cManage Users\u201d. Toggle the dropdown next to \u201cPublic Access\u201d and select \u201cOn\u201d: Once you click \u201cconfirm\u201d, anyone with the link to your document will be able to view it. They will not be required to have a Grist login. The \u201cCopy Link\u201d button is handy to copy the link to the clipboard for pasting into an email, tweet, or anywhere else. You can also allow anyone with the link to edit your document. Simply switch the role for Public Access to Editor. Note that this allows anyone with the link to change absolutely anything in your document, including deleting all the data. Should anything go wrong, you may recover previous versions of your document in the snapshots section of Document History. Access rules may be combined with view-only link sharing, i.e. when the Public Access role is set to \u201cViewer.\u201d Read more about Link Keys to learn how to set rules that limit which parts of your data users may see when accessing your document via a particular link. Access Rules do not support restricted link sharing when Public Access is set to \u201cEditor.\u201d Supporting access rules in this case, and others, is on our roadmap.","title":"Public access"},{"location":"summary-tables/","text":"Summary Tables # Summary tables are the workhorse of data analysis in Grist. They are similar to \u201cpivot tables\u201d in spreadsheets, and to GROUP BY clauses in databases. They let you get table-wide totals or any subtotals. Summary tables have many uses: Group projects by status, or by priority. Summarize bank transactions by year, or quarter, or by category. Group employees by position, or gender, or department. Summarize by any combination, such as position and gender and department. Group all records to calculate table-wide totals and statistics. Adding summaries # Click \u201cAdd New\u201d button and select \u201cAdd Page\u201d or \u201cAdd Widget to Page\u201d. In the widget picker, click the summation icon ( ) next to the table you\u2019d like to summarize. When creating a summary table, you choose a field or a combination of fields by which data should be grouped. These are called the \u201cGroup by\u201d fields. The summary table will contain one row for each group-by value. For instance, if \u201cPosition\u201d is selected as a group-by field, the summary table will contain one row for each job position. Grist\u2019s powerful formulas then allow arbitrary calculations on the matching subsets of the underlying data. Keep in mind that the group-by fields determine which groups should exist in the summary table. Do not select values you\u2019d like to calculate (e.g. for average salary) as group-by fields; these will be created using formulas in the next step. Tip: You can think of rows in a summary table as buckets into which your records will be placed. Group-by fields determine the labels for these buckets. For instance, a summary of projects grouped by status (e.g. \u201cActive\u201d, \u201cCompleted\u201d, \u201cNotStarted\u201d) will have three such buckets, one for each status. Every project goes into one of these three buckets. You can then easily calculate info for each folder, such as a count of projects or the total of their costs. Summary formulas # When you add a summary table, each of the selected group-by fields becomes a column in the new table. Everything else in the summary table is calculated using formula columns. Some of these columns are created automatically, as a convenience. Specifically, a column count will be added to show the number of records in the group represented by the current summary row. And for any numerical column in the original data, the summary table will contain a same-named column with the total. For instance, the summary of Employees grouped by Position would look like this: Tip: A summary widget will have a header like \u201cEMPLOYEES [by Position]\u201d, to indicate that it\u2019s showing summary data for the Employees table, grouped by \u201cPosition\u201d. You can click the title to rename it. If you select a cell in a column like count or AnnualPay and hit Enter , you\u2019ll see the formulas that calculate them: count is len($group) AnnualPay is SUM($group.AnnualPay) The mysterious $group is simply another column, hidden by default (but you may unhide it). It contains for each cell the group of records represented by this summary row. Side note for Python fans. $group is a special Python object. It\u2019s an iterable collection of records. Using an attribute like $group.A is a shorthand for the list of values in the A column of all the records in the group, similar to [r.A for r in $group] . If you unhide this column, it will show as a python list of numeric row IDs which identify the records in the group. Sometimes the automatically created columns don\u2019t make sense. For instance, the sum of PayRate isn\u2019t very meaningful. Simply delete such columns, either using the column menu or using the Alt + Minus keyboard shortcut. You are free to change formulas for the automatically created columns, or to add new formula columns. Note that summary tables do not allow adding non -formula columns. For instance, you might want to change the formula for PayRate from SUM($group.PayRate) to AVERAGE($group.PayRate) , which would be a more interesting value. Here are some useful recipies of formulas in summary tables: Average : AVERAGE($group.PayRate) or SUM($group.PayRate) / $count Standard deviation : STDEV($group.PayRate) Maximum or minimum : MAX($group.PayRate) , MIN($group.PayRate) Sum over a subset of records : SUM(r.AnnualPay for r in $group if r.EmploymentStatus == \"Active\") Weighted average : AVERAGE_WEIGHTED(zip($group.Life_Expectancy, $group.Population)) In fact, you may use the full power of Python to calculate what you\u2019d like. As for any table, your formula may refer to any of the columns in the summary table, not only $group . Changing summary columns # The group-by columns in a summary table are created when you add the widget. It\u2019s not possible to modify the values in them, or to modify their settings, such as type. The settings and values of the group-by columns reflect those in the underlying table. When new values appear in the underlying table for the group-by columns, the summary tables will also get new rows automatically. What you may change is which columns the table is grouped by. Click the three dots on the top right of the summary table, and click \u201cData selection\u201d: The settings in the side pane tell you which data is shown and how it\u2019s grouped: You can click \u201cEdit Data Selection\u201d button to open the same widget picker that you used to add the summary table. You can now deselect some \u201cGroup by\u201d fields and select others, and click \u201cSave\u201d to update the summary table. Linking summary tables # You can link summary tables to other widgets. If you have a summary table on a page, it can be used as a selector for a table of underlying data, or for a more detailed summary. For example, if you have a summary of Employees by \u201cPosition\u201d, it will be available as a \u201cSELECT BY\u201d option when adding an unsummarized table of Employees : The result is that you can select a position in the summary table, and see all employees in that position. You could similarly link a summary of Employees grouped by \u201cPosition\u201d and \u201cGender\u201d to the first widget: You can then select a position in the \u201cEmployees [by Position]\u201d widget, and see a breakdown by gender among the employees in that position. Note that such linking requires the new widget to include both \u201cPosition\u201d and \u201cGender\u201d in its group-by columns. For more about linking, see Linking widgets . Charting summarized data # Summary tables are a great source of data for charts, including dynamic charts. In the example above, we could add another widget showing Employees grouped by \u201cPosition\u201d and \u201cGender\u201d, but this time in a Chart widget. Select \u201cBar Chart\u201d for the chart type, and select \u201cGender\u201d and \u201cAnnualPay\u201d as Visible Series. You can now click on a position, and see visually the gender difference in average salary for this position. The Analyze and visualize tutorial shows other examples of charts based on summary tables. Detaching summary tables # Summary tables are computed from underlying data. Sometimes, however, its useful to \u201cdetach\u201d a summary table and turn it into an independent data table. For example, we\u2019ve seen how to summarize a table of Employees , grouping it by the column \u201cPosition\u201d. Let\u2019s say you want to associate some data with each position, such as a job description, or a workers compensation insurance code. Such data belongs in its own table, with one row for each position, and a few columns. Summary tables provide an easy way to create such a table. Add a page with a summary of Employees grouped by \u201cPosition\u201d. Now, in the right panel\u2019s \u201cData\u201d tab, click the \u201cDetach\u201d button. Your summary table just got turned into a brand new table with the same rows and an auto-generated name, like \u201cTable1\u201d. You can rename it to \u201cPositions\u201d, and add the columns you need: The calculated columns remain. In fact, anything you could calculate about each position in the \u201cEmployees [by Position]\u201d summary table, you may still calculate in the new \u201cPositions\u201d table. One difference is that new values will not get added to the detached table automatically. In other words, if a never-before-seen position (perhaps \u201cChief Troublemaker\u201d) appears in the underlying data, a summary table would update automatically to include it, but a detached table will not.","title":"Summary tables"},{"location":"summary-tables/#summary-tables","text":"Summary tables are the workhorse of data analysis in Grist. They are similar to \u201cpivot tables\u201d in spreadsheets, and to GROUP BY clauses in databases. They let you get table-wide totals or any subtotals. Summary tables have many uses: Group projects by status, or by priority. Summarize bank transactions by year, or quarter, or by category. Group employees by position, or gender, or department. Summarize by any combination, such as position and gender and department. Group all records to calculate table-wide totals and statistics.","title":"Summary Tables"},{"location":"summary-tables/#adding-summaries","text":"Click \u201cAdd New\u201d button and select \u201cAdd Page\u201d or \u201cAdd Widget to Page\u201d. In the widget picker, click the summation icon ( ) next to the table you\u2019d like to summarize. When creating a summary table, you choose a field or a combination of fields by which data should be grouped. These are called the \u201cGroup by\u201d fields. The summary table will contain one row for each group-by value. For instance, if \u201cPosition\u201d is selected as a group-by field, the summary table will contain one row for each job position. Grist\u2019s powerful formulas then allow arbitrary calculations on the matching subsets of the underlying data. Keep in mind that the group-by fields determine which groups should exist in the summary table. Do not select values you\u2019d like to calculate (e.g. for average salary) as group-by fields; these will be created using formulas in the next step. Tip: You can think of rows in a summary table as buckets into which your records will be placed. Group-by fields determine the labels for these buckets. For instance, a summary of projects grouped by status (e.g. \u201cActive\u201d, \u201cCompleted\u201d, \u201cNotStarted\u201d) will have three such buckets, one for each status. Every project goes into one of these three buckets. You can then easily calculate info for each folder, such as a count of projects or the total of their costs.","title":"Adding summaries"},{"location":"summary-tables/#summary-formulas","text":"When you add a summary table, each of the selected group-by fields becomes a column in the new table. Everything else in the summary table is calculated using formula columns. Some of these columns are created automatically, as a convenience. Specifically, a column count will be added to show the number of records in the group represented by the current summary row. And for any numerical column in the original data, the summary table will contain a same-named column with the total. For instance, the summary of Employees grouped by Position would look like this: Tip: A summary widget will have a header like \u201cEMPLOYEES [by Position]\u201d, to indicate that it\u2019s showing summary data for the Employees table, grouped by \u201cPosition\u201d. You can click the title to rename it. If you select a cell in a column like count or AnnualPay and hit Enter , you\u2019ll see the formulas that calculate them: count is len($group) AnnualPay is SUM($group.AnnualPay) The mysterious $group is simply another column, hidden by default (but you may unhide it). It contains for each cell the group of records represented by this summary row. Side note for Python fans. $group is a special Python object. It\u2019s an iterable collection of records. Using an attribute like $group.A is a shorthand for the list of values in the A column of all the records in the group, similar to [r.A for r in $group] . If you unhide this column, it will show as a python list of numeric row IDs which identify the records in the group. Sometimes the automatically created columns don\u2019t make sense. For instance, the sum of PayRate isn\u2019t very meaningful. Simply delete such columns, either using the column menu or using the Alt + Minus keyboard shortcut. You are free to change formulas for the automatically created columns, or to add new formula columns. Note that summary tables do not allow adding non -formula columns. For instance, you might want to change the formula for PayRate from SUM($group.PayRate) to AVERAGE($group.PayRate) , which would be a more interesting value. Here are some useful recipies of formulas in summary tables: Average : AVERAGE($group.PayRate) or SUM($group.PayRate) / $count Standard deviation : STDEV($group.PayRate) Maximum or minimum : MAX($group.PayRate) , MIN($group.PayRate) Sum over a subset of records : SUM(r.AnnualPay for r in $group if r.EmploymentStatus == \"Active\") Weighted average : AVERAGE_WEIGHTED(zip($group.Life_Expectancy, $group.Population)) In fact, you may use the full power of Python to calculate what you\u2019d like. As for any table, your formula may refer to any of the columns in the summary table, not only $group .","title":"Summary formulas"},{"location":"summary-tables/#changing-summary-columns","text":"The group-by columns in a summary table are created when you add the widget. It\u2019s not possible to modify the values in them, or to modify their settings, such as type. The settings and values of the group-by columns reflect those in the underlying table. When new values appear in the underlying table for the group-by columns, the summary tables will also get new rows automatically. What you may change is which columns the table is grouped by. Click the three dots on the top right of the summary table, and click \u201cData selection\u201d: The settings in the side pane tell you which data is shown and how it\u2019s grouped: You can click \u201cEdit Data Selection\u201d button to open the same widget picker that you used to add the summary table. You can now deselect some \u201cGroup by\u201d fields and select others, and click \u201cSave\u201d to update the summary table.","title":"Changing summary columns"},{"location":"summary-tables/#linking-summary-tables","text":"You can link summary tables to other widgets. If you have a summary table on a page, it can be used as a selector for a table of underlying data, or for a more detailed summary. For example, if you have a summary of Employees by \u201cPosition\u201d, it will be available as a \u201cSELECT BY\u201d option when adding an unsummarized table of Employees : The result is that you can select a position in the summary table, and see all employees in that position. You could similarly link a summary of Employees grouped by \u201cPosition\u201d and \u201cGender\u201d to the first widget: You can then select a position in the \u201cEmployees [by Position]\u201d widget, and see a breakdown by gender among the employees in that position. Note that such linking requires the new widget to include both \u201cPosition\u201d and \u201cGender\u201d in its group-by columns. For more about linking, see Linking widgets .","title":"Linking summary tables"},{"location":"summary-tables/#charting-summarized-data","text":"Summary tables are a great source of data for charts, including dynamic charts. In the example above, we could add another widget showing Employees grouped by \u201cPosition\u201d and \u201cGender\u201d, but this time in a Chart widget. Select \u201cBar Chart\u201d for the chart type, and select \u201cGender\u201d and \u201cAnnualPay\u201d as Visible Series. You can now click on a position, and see visually the gender difference in average salary for this position. The Analyze and visualize tutorial shows other examples of charts based on summary tables.","title":"Charting summarized data"},{"location":"summary-tables/#detaching-summary-tables","text":"Summary tables are computed from underlying data. Sometimes, however, its useful to \u201cdetach\u201d a summary table and turn it into an independent data table. For example, we\u2019ve seen how to summarize a table of Employees , grouping it by the column \u201cPosition\u201d. Let\u2019s say you want to associate some data with each position, such as a job description, or a workers compensation insurance code. Such data belongs in its own table, with one row for each position, and a few columns. Summary tables provide an easy way to create such a table. Add a page with a summary of Employees grouped by \u201cPosition\u201d. Now, in the right panel\u2019s \u201cData\u201d tab, click the \u201cDetach\u201d button. Your summary table just got turned into a brand new table with the same rows and an auto-generated name, like \u201cTable1\u201d. You can rename it to \u201cPositions\u201d, and add the columns you need: The calculated columns remain. In fact, anything you could calculate about each position in the \u201cEmployees [by Position]\u201d summary table, you may still calculate in the new \u201cPositions\u201d table. One difference is that new values will not get added to the detached table automatically. In other words, if a never-before-seen position (perhaps \u201cChief Troublemaker\u201d) appears in the underlying data, a summary table would update automatically to include it, but a detached table will not.","title":"Detaching summary tables"},{"location":"team-sharing/","text":"Team Sharing # We saw how to share individual documents with other users in the Sharing article. Team sites give your further control, allowing you to share a team site\u2019s collections of documents in whole or in part with others. You may further group documents into workspaces and edit permissions at the workspace-level as well. To share a team site, open the user menu by clicking on the circle with your profile picture or initials on the top right of the screen. Then select the \u201cManage Users\u201d option. You can now invite people just as you did for individual documents in Sharing . Just as for documents, you can invite people as viewers, editors, or owners of the team site. All documents within the site will be accessible to those people, unless you turn off the \u201cInherit access\u201d sharing option for individual workspaces or documents . Roles # There are three primary roles supported by Grist for team sites: Viewer : allows a user to view the site but not make any changes to it. A viewer will be allowed to view all workspaces and documents within the site unless otherwise specified. Editor : allows a user to view or make changes to the site and all its workspaces and documents (unless otherwise specified). However, the sharing settings for the site, its workspaces, and its documents cannot be changed by an editor. Owner : gives a user complete permissions to the site\u2019s workspaces and documents, including their sharing settings. Billing Permissions # None of these roles give access to billing information or management. Billing plan managers can be added via the \u201cBilling Account\u201d option. Open the user menu under your user icon, and select \u201cBilling Account\u201d.","title":"Sharing team sites"},{"location":"team-sharing/#team-sharing","text":"We saw how to share individual documents with other users in the Sharing article. Team sites give your further control, allowing you to share a team site\u2019s collections of documents in whole or in part with others. You may further group documents into workspaces and edit permissions at the workspace-level as well. To share a team site, open the user menu by clicking on the circle with your profile picture or initials on the top right of the screen. Then select the \u201cManage Users\u201d option. You can now invite people just as you did for individual documents in Sharing . Just as for documents, you can invite people as viewers, editors, or owners of the team site. All documents within the site will be accessible to those people, unless you turn off the \u201cInherit access\u201d sharing option for individual workspaces or documents .","title":"Team Sharing"},{"location":"team-sharing/#roles","text":"There are three primary roles supported by Grist for team sites: Viewer : allows a user to view the site but not make any changes to it. A viewer will be allowed to view all workspaces and documents within the site unless otherwise specified. Editor : allows a user to view or make changes to the site and all its workspaces and documents (unless otherwise specified). However, the sharing settings for the site, its workspaces, and its documents cannot be changed by an editor. Owner : gives a user complete permissions to the site\u2019s workspaces and documents, including their sharing settings.","title":"Roles"},{"location":"team-sharing/#billing-permissions","text":"None of these roles give access to billing information or management. Billing plan managers can be added via the \u201cBilling Account\u201d option. Open the user menu under your user icon, and select \u201cBilling Account\u201d.","title":"Billing Permissions"},{"location":"teams/","text":"Teams # Team sites are a paid feature. In a team site, team members can collaborate on an unlimited number of documents, which can be further organized with workspaces . Team sites also have custom names and subdomains, such as your-business-name.getgrist.com. To use the features in this section, upgrade to a team plan . If you have a team site but aren\u2019t seeing it, click in the top-left corner to open a drop-down menu of sites to which you have access. Opening the user menu under your profile icon will also list all sites to which you have access. Not seeing your team site? Try selecting the \u201cAdd account\u201d option in the user menu. It\u2019s possible the team site might be linked to a different email address. A fresh team site will look something like this, ready to be filled with Grist documents and shared with your team. If a colleague has shared a team site with you, you\u2019ll see the same thing, but depending on the role they chose for you, some options may be inactive. If you need those options, ask your colleague to change your role. For a team site you own, you can create documents , create workspaces , or immediately start sharing the site with others. Understanding Personal Sites # Sites that begin with the \u201c@\u201d symbol are personal sites, free to use for up to 10 docs. All Grist accounts have a personal site. Documents shared with you will go to your personal site and not count against the 10 document limit. Each document in a personal site may be shared with up to 2 people for free. The personal site itself cannot be shared, and does not support workspaces. It is named using your name, and is always available at https://docs.getgrist.com. a personal site a team site Billing Account # If you created a Team Site, or were added to it as a Billing Manager, then you may manage billing information, and edit your team site\u2019s team name and subdomain from the billing account page. Open the user menu and click on \u201cBilling Account\u201d to open a menu that looks like this. Click on the top \u201cChange\u201d icon to edit your team site name or subdomain. Note, if you change the subdomain, then any links pointing to your site or documents within your site will need updating.","title":"Creating team sites"},{"location":"teams/#teams","text":"Team sites are a paid feature. In a team site, team members can collaborate on an unlimited number of documents, which can be further organized with workspaces . Team sites also have custom names and subdomains, such as your-business-name.getgrist.com. To use the features in this section, upgrade to a team plan . If you have a team site but aren\u2019t seeing it, click in the top-left corner to open a drop-down menu of sites to which you have access. Opening the user menu under your profile icon will also list all sites to which you have access. Not seeing your team site? Try selecting the \u201cAdd account\u201d option in the user menu. It\u2019s possible the team site might be linked to a different email address. A fresh team site will look something like this, ready to be filled with Grist documents and shared with your team. If a colleague has shared a team site with you, you\u2019ll see the same thing, but depending on the role they chose for you, some options may be inactive. If you need those options, ask your colleague to change your role. For a team site you own, you can create documents , create workspaces , or immediately start sharing the site with others.","title":"Teams"},{"location":"teams/#understanding-personal-sites","text":"Sites that begin with the \u201c@\u201d symbol are personal sites, free to use for up to 10 docs. All Grist accounts have a personal site. Documents shared with you will go to your personal site and not count against the 10 document limit. Each document in a personal site may be shared with up to 2 people for free. The personal site itself cannot be shared, and does not support workspaces. It is named using your name, and is always available at https://docs.getgrist.com. a personal site a team site","title":"Understanding Personal Sites"},{"location":"teams/#billing-account","text":"If you created a Team Site, or were added to it as a Billing Manager, then you may manage billing information, and edit your team site\u2019s team name and subdomain from the billing account page. Open the user menu and click on \u201cBilling Account\u201d to open a menu that looks like this. Click on the top \u201cChange\u201d icon to edit your team site name or subdomain. Note, if you change the subdomain, then any links pointing to your site or documents within your site will need updating.","title":"Billing Account"},{"location":"timestamps/","text":"Timestamp columns # Sometimes it is useful to have columns that store when individual records were created and updated. This is useful later, for example to sort records by age or freshness. Grist lets you create such columns easily. A \u201cCreated At\u201d column # Suppose we want a column that stores when a record was created. As a first step, add a column called (for example) Created At and enter NOW() as its formula. Set the column type to DateTime (see Making a date/time column ) and choose how you\u2019d like the time and date to be shown. What we\u2019d like is for the Created At value to stay unchanged once set, and to be calculated only when a record is created. To make the values stay unchanged once set, we need to change column behavior from a Formula Column to a Data Column . Click on the Column behavior drop-down menu, and choose Convert column to data : Now, to calculate values when a record is created, select Apply to new records . And we\u2019re done! All new records will have Created At set with NOW() at the moment of their creation. An \u201cUpdated At\u201d column # If we want a column that stores when a record is updated (as opposed to created), the procedure is similar to that for a \u201cCreated At\u201d column , but instead of Apply to new records , select Apply on record changes . Then select Any field (assuming you want any change in a record to count as an update) and press OK . You can alternatively pick and choose which columns to \u201ccount\u201d as updates and which to ignore. It is still possible for a user to manually edit cells in the Created At and Updated At columns. If you don\u2019t want that to be allowed, use access rules to forbid it. Here is an example of the new columns at work. One new record was added, for Unorthodox Delivery Methods , and a created and updated time were set for it automatically. Then the description of Cotton Candy vs Candy Floss was updated, and the updated time for that record was set automatically. It would also be straightforward to add Created By and Updated By columns. Making the Created At and Updated At columns as we did here filled them for all pre-existing rows with the current date and time. If you\u2019d rather these be left blank, simply do the Convert to data column step before setting a formula, and then set the formula in the Optional Formula area.","title":"Timestamp columns"},{"location":"timestamps/#timestamp-columns","text":"Sometimes it is useful to have columns that store when individual records were created and updated. This is useful later, for example to sort records by age or freshness. Grist lets you create such columns easily.","title":"Timestamp columns"},{"location":"timestamps/#a-created-at-column","text":"Suppose we want a column that stores when a record was created. As a first step, add a column called (for example) Created At and enter NOW() as its formula. Set the column type to DateTime (see Making a date/time column ) and choose how you\u2019d like the time and date to be shown. What we\u2019d like is for the Created At value to stay unchanged once set, and to be calculated only when a record is created. To make the values stay unchanged once set, we need to change column behavior from a Formula Column to a Data Column . Click on the Column behavior drop-down menu, and choose Convert column to data : Now, to calculate values when a record is created, select Apply to new records . And we\u2019re done! All new records will have Created At set with NOW() at the moment of their creation.","title":"A \"Created At\" column"},{"location":"timestamps/#an-updated-at-column","text":"If we want a column that stores when a record is updated (as opposed to created), the procedure is similar to that for a \u201cCreated At\u201d column , but instead of Apply to new records , select Apply on record changes . Then select Any field (assuming you want any change in a record to count as an update) and press OK . You can alternatively pick and choose which columns to \u201ccount\u201d as updates and which to ignore. It is still possible for a user to manually edit cells in the Created At and Updated At columns. If you don\u2019t want that to be allowed, use access rules to forbid it. Here is an example of the new columns at work. One new record was added, for Unorthodox Delivery Methods , and a created and updated time were set for it automatically. Then the description of Cotton Candy vs Candy Floss was updated, and the updated time for that record was set automatically. It would also be straightforward to add Created By and Updated By columns. Making the Created At and Updated At columns as we did here filled them for all pre-existing rows with the current date and time. If you\u2019d rather these be left blank, simply do the Convert to data column step before setting a formula, and then set the formula in the Optional Formula area.","title":"An \"Updated At\" column"},{"location":"widget-card/","text":"Page widget: Card & Card List # The Card and Card List widgets allow viewing data as a form or a record, similar to how data is commonly presented in a custom application. In Grist, you can choose what fields to show and how to lay them out. A Card List shows a scrollable list of cards. A Card shows one at a time. A single Card is most useful when linked to another Table widget (see Linking widgets ). It can then show the details of the selected record. The single Card widget may also be used on its own. In this case, you\u2019ll see navigation buttons on top to move to the next or previous record, or to add a new one. Selecting theme # The widget options panel allows choosing the theme, or style, for the card: Editing card layout # To configure the layout of a card, click the green \u201cEdit Card Layout\u201d button below the theme selector, or click the three dots on the top right of the widget and select \u201cEdit Card Layout\u201d in the menu. While the layout editor is active, you\u2019ll see a single record with draggable fields, and a set of buttons on top of the widget. Resizing a field # To resize a field, move the mouse to a vertical border separating two fields and drag the border to your desired size. Only the width of fields may be changed, while the height changes dynamically to fit the field contents. Moving a field # To move a field, hold down the mouse button on a field and drag it. As you move the mouse near the edges of other fields, you will notice boxes with dashed borders indicating possible drop points in relation to other fields. Release the mouse over one of these boxes to place your field into the desired location. Deleting a field # To delete a field, move the mouse over it. An \u201cx\u201d icon will appear. Click this icon to remove the field. This is similar to hiding a column as removing a field from a widget does not delete the underlying data. You can also delete a field by hiding it in in the \u201cVisible Fields\u201d list in the side panel, as described in Configuring field list . This is available even when the layout editor is not active. Adding a field # To add a field, click the \u201cAdd Field\u201d button on top of the layout editor. In the dropdown menu, select \u201cCreate New Field\u201d to create a new column of data, or one of the existing fields in the table that are not currently shown in the card. When you click on the field, it will be added at the bottom of the layout. You can then move it or resize it as described above. Any new fields you create will only be added to the data when you save the layout. You can rename these in the \u201cField\u201d tab in the side panel. You can also add an existing field by making it visible using the \u201cHidden Fields\u201d list in the side panel, as described in Configuring field list . This is available even when the layout editor is not active. Saving the layout # When done editing the layout, remember to click \u201cSave Layout\u201d on top of the widget, or \u201cCancel\u201d to revert your changes. Once saved, the Card or Card List widget will update to show all cards in the updated layout.","title":"Card & Card List"},{"location":"widget-card/#page-widget-card-card-list","text":"The Card and Card List widgets allow viewing data as a form or a record, similar to how data is commonly presented in a custom application. In Grist, you can choose what fields to show and how to lay them out. A Card List shows a scrollable list of cards. A Card shows one at a time. A single Card is most useful when linked to another Table widget (see Linking widgets ). It can then show the details of the selected record. The single Card widget may also be used on its own. In this case, you\u2019ll see navigation buttons on top to move to the next or previous record, or to add a new one.","title":"Page widget: Card"},{"location":"widget-card/#selecting-theme","text":"The widget options panel allows choosing the theme, or style, for the card:","title":"Selecting theme"},{"location":"widget-card/#editing-card-layout","text":"To configure the layout of a card, click the green \u201cEdit Card Layout\u201d button below the theme selector, or click the three dots on the top right of the widget and select \u201cEdit Card Layout\u201d in the menu. While the layout editor is active, you\u2019ll see a single record with draggable fields, and a set of buttons on top of the widget.","title":"Editing card layout"},{"location":"widget-card/#resizing-a-field","text":"To resize a field, move the mouse to a vertical border separating two fields and drag the border to your desired size. Only the width of fields may be changed, while the height changes dynamically to fit the field contents.","title":"Resizing a field"},{"location":"widget-card/#moving-a-field","text":"To move a field, hold down the mouse button on a field and drag it. As you move the mouse near the edges of other fields, you will notice boxes with dashed borders indicating possible drop points in relation to other fields. Release the mouse over one of these boxes to place your field into the desired location.","title":"Moving a field"},{"location":"widget-card/#deleting-a-field","text":"To delete a field, move the mouse over it. An \u201cx\u201d icon will appear. Click this icon to remove the field. This is similar to hiding a column as removing a field from a widget does not delete the underlying data. You can also delete a field by hiding it in in the \u201cVisible Fields\u201d list in the side panel, as described in Configuring field list . This is available even when the layout editor is not active.","title":"Deleting a field"},{"location":"widget-card/#adding-a-field","text":"To add a field, click the \u201cAdd Field\u201d button on top of the layout editor. In the dropdown menu, select \u201cCreate New Field\u201d to create a new column of data, or one of the existing fields in the table that are not currently shown in the card. When you click on the field, it will be added at the bottom of the layout. You can then move it or resize it as described above. Any new fields you create will only be added to the data when you save the layout. You can rename these in the \u201cField\u201d tab in the side panel. You can also add an existing field by making it visible using the \u201cHidden Fields\u201d list in the side panel, as described in Configuring field list . This is available even when the layout editor is not active.","title":"Adding a field"},{"location":"widget-card/#saving-the-layout","text":"When done editing the layout, remember to click \u201cSave Layout\u201d on top of the widget, or \u201cCancel\u201d to revert your changes. Once saved, the Card or Card List widget will update to show all cards in the updated layout.","title":"Saving the layout"},{"location":"widget-chart/","text":"Page widget: Chart # Grist supports several chart types to help you visualize your data easily. Charts may be used to plot a regular table of data, a linked widget (as described in Linking widgets ), or a summary table (as described in Summary tables ). The most common chart types are illustrated here: Chart types # Each chart type plots several data series. Use the \u201cVisible Series\u201d list in the \u201cWidgets\u201d side panel for choosing the series to plot. The order of the list matters and determines how each series is used, as described below. Bar Chart # Needs two or more series: the first for bar labels (x-axis), the second for bar heights (y-axis). Additional series create additional bars at each data point and specify their heights. Line Chart # Needs two or more series: the first series is for the X values, the second is for Y values to create the line. Additional series specify Y values for additional lines. Pie Chart # Needs two series: the first for the pie slice labels, the second for the pie slice sizes. Area Chart # Similar to a line chart, needs two or more series: the first for the X values, the second for the Y values to create the line. Additional series specify Y values for additional lines. Scatter Plot # Needs three or more series: the first for the point labels, and the second and third for the X and Y values for each point, respectively. Additional series specify Y values for additional sets of points. Kaplan-Meier Plot # The Kaplan-Meier Plot is useful for certain studies, and needs two series: the first for the label of the line to which a point belongs, the second giving a survival time or time-to-failure of that point. The plot shows the survival times on the X axis, and the number of points that survive at that time on the Y axis. Chart options # A number of chart options are available, some of them specific to certain chart types. Group by first column : When checked, an extra series is expected as the first series in the \u201cVisible Series\u201d list, and should contain a group label for each data point. All points with the same group value are plotted as a separate line. For example: Invert Y-axis : When checked the Y axis is flipped, with smaller values above and larger values below. Connect gaps [for Line Charts only]: When checked, gaps caused by missing values are connected by connecting neighboring points. The \u201cShow Markers\u201d option described next can be used to keep a visual cue for which points are present. Show markers [for Line Charts only]: When checked, each point on the line is marked additionally by a small circle. See the example for \u201cGroup by first column\u201d above. Error bars [for Line and Bar Charts]: When set to \u201cSymmetric\u201d, each Y series should be followed by a series for the length of the error bars to show. When set to \u201cAbove+Below\u201d, each Y series should be followed by two series, one for the top error bars, and one for the bottom. In the example here, the first series (\u201cCell Line\u201d) specifies how to group the data into lines, since \u201cGroup by first column\u201d is checked. The second and third series specify the X and Y values, and the last series (\u201cSD\u201d) specifies the error bars for the Y values.","title":"Chart"},{"location":"widget-chart/#page-widget-chart","text":"Grist supports several chart types to help you visualize your data easily. Charts may be used to plot a regular table of data, a linked widget (as described in Linking widgets ), or a summary table (as described in Summary tables ). The most common chart types are illustrated here:","title":"Page widget: Chart"},{"location":"widget-chart/#chart-types","text":"Each chart type plots several data series. Use the \u201cVisible Series\u201d list in the \u201cWidgets\u201d side panel for choosing the series to plot. The order of the list matters and determines how each series is used, as described below.","title":"Chart types"},{"location":"widget-chart/#bar-chart","text":"Needs two or more series: the first for bar labels (x-axis), the second for bar heights (y-axis). Additional series create additional bars at each data point and specify their heights.","title":"Bar Chart"},{"location":"widget-chart/#line-chart","text":"Needs two or more series: the first series is for the X values, the second is for Y values to create the line. Additional series specify Y values for additional lines.","title":"Line Chart"},{"location":"widget-chart/#pie-chart","text":"Needs two series: the first for the pie slice labels, the second for the pie slice sizes.","title":"Pie Chart"},{"location":"widget-chart/#area-chart","text":"Similar to a line chart, needs two or more series: the first for the X values, the second for the Y values to create the line. Additional series specify Y values for additional lines.","title":"Area Chart"},{"location":"widget-chart/#scatter-plot","text":"Needs three or more series: the first for the point labels, and the second and third for the X and Y values for each point, respectively. Additional series specify Y values for additional sets of points.","title":"Scatter Plot"},{"location":"widget-chart/#kaplan-meier-plot","text":"The Kaplan-Meier Plot is useful for certain studies, and needs two series: the first for the label of the line to which a point belongs, the second giving a survival time or time-to-failure of that point. The plot shows the survival times on the X axis, and the number of points that survive at that time on the Y axis.","title":"Kaplan-Meier Plot"},{"location":"widget-chart/#chart-options","text":"A number of chart options are available, some of them specific to certain chart types. Group by first column : When checked, an extra series is expected as the first series in the \u201cVisible Series\u201d list, and should contain a group label for each data point. All points with the same group value are plotted as a separate line. For example: Invert Y-axis : When checked the Y axis is flipped, with smaller values above and larger values below. Connect gaps [for Line Charts only]: When checked, gaps caused by missing values are connected by connecting neighboring points. The \u201cShow Markers\u201d option described next can be used to keep a visual cue for which points are present. Show markers [for Line Charts only]: When checked, each point on the line is marked additionally by a small circle. See the example for \u201cGroup by first column\u201d above. Error bars [for Line and Bar Charts]: When set to \u201cSymmetric\u201d, each Y series should be followed by a series for the length of the error bars to show. When set to \u201cAbove+Below\u201d, each Y series should be followed by two series, one for the top error bars, and one for the bottom. In the example here, the first series (\u201cCell Line\u201d) specifies how to group the data into lines, since \u201cGroup by first column\u201d is checked. The second and third series specify the X and Y values, and the last series (\u201cSD\u201d) specifies the error bars for the Y values.","title":"Chart options"},{"location":"widget-custom/","text":"Page widget: Custom # Custom widgets are an experimental feature The design of custom widgets is likely to evolve, and sometimes that will require updates to documents that use them. We won\u2019t make such changes lightly. The Custom widget allows a user to insert almost anything in their document. To create a custom widget currently requires knowledge of web development, and access to a public web server (for example, GitHub Pages). A good use for custom widgets is to view records or tables in new ways. Using Grist as your data model and modern HTML/CSS/JS as your view is very powerful. Minimal example # To demonstrate to a web developer how custom widgets work, there is a minimal working example at: https://public.getgrist.com/911KcgKA95oQ/Minimal-Custom-Widget/m/fork The example shows a table with some random data (names for pets), and two custom widgets, one showing the selected row in the table as JSON, and the other showing all rows of the table as JSON. If you change data in the table, or move the cursor, the custom widgets update as appropriate. The source code for the widgets is at: https://github.com/gristlabs/grist-widget/tree/master/inspect It is stripped down to the essentials. Here is the full source code of the onRecord widget that shows one row of data: <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"utf-8\"> <title>onRecord</title> <script src=\"https://docs.getgrist.com/grist-plugin-api.js\"></script> </head> <body> <pre id=\"readout\">Waiting for data...</pre> <script> grist.ready(); grist.onRecord(function(record) { document.getElementById('readout').innerHTML = JSON.stringify(record, null, 2); }); </script> </body> </html> The \u201cGrist\u201d parts of this are: Including https://docs.getgrist.com/grist-plugin-api.js to get the Grist API. Calling grist.ready to let Grist know the widget is ready to go. Calling grist.onRecord to subscribe to the current row of the table. After that, everything else is regular HTML/CSS/JS. Once you have data coming in, you can render it any way you like, using React, Vue.js, or your favorite framework. For example, you could render records as a printable invoice , or use some obscure chart format that Grist doesn\u2019t currently support. Adding a custom widget # To add a custom widget that reads from a table, click on Add New , then Add Widget to Page . Then: For Select Widget choose Custom to get a Custom Widget. For Select Data choose the table you want the widget to read data from. Optionally, choose Select By to control the selected data further (read Linking Page Widgets for the possibilities). The custom widget is initially blank. To configure it, click the three-dots button on the top right of the custom widget, and select \u201cWidget options\u201d. In the CUSTOM settings section where it says Enter Custom URL , put the link to your custom widget. Here is a test widget to simply show table data in JSON: https://gristlabs.github.io/grist-widget/inspect/onRecords.html And here\u2019s one to show the selected row only (make sure \u201cSelect By\u201d is set for the custom widget): https://gristlabs.github.io/grist-widget/inspect/onRecord.html Access level # When you put a link to a custom webpage it will be immediately rendered inside the section. Now you have the option to grant that webpage access to data in your document. The following access levels are available: No document access : the webpage is shown in the widget, but it has no access to the Grist document containing the widget. Read selected table : the webpage is shown in the widget, and is given read access to the table the widget is configured to select data from. Full document access : the webpage is shown in the widget, and has full access to read and modify the Grist document containing the widget. The webpage should be owned and controlled by you or someone you trust. With Read selected table permissions, a widget could send the data it accesses to a third party. With Full document access permissions, a widget could send all the document data to a third party, and modify your document in any way. We do not recommend using Full document access permissions at this time, since the API for modifying the document is not yet stabilized. If you have an urgent need, however, do contact us and request early access. If you are writing your own custom widget you can specify what access level it needs as part of the initial ready message. Possible values are: none , read table and full . <script> grist.ready({ requiredAccess: 'read table' }); </script> This directs Grist to request the desired access level from the user. Your widget will be reloaded with the appropriate access level if the user approves the request. If you wish to get notified of the access level, you can subscribe to the onOptions event that is sent to the widget after it tells Grist it is ready: grist.onOptions(function(options, interaction) { console.log(interaction.access_level); }); For now, just skip the options parameter (it will be described in Widget options section). The current access level is part of the second parameter, which describes how Grist will interact with your widget. Invoice example # The minimal example above showed records as plain JSON, but the widget can get as fancy as you like. Here is an example of showing a record as a printable invoice: You can read the details of how to use this widget in our Invoice preparation example . The invoice widget is hosted at: https://gristlabs.github.io/grist-widget/invoices/ And the source HTML/CSS/JS can be browsed at: https://github.com/gristlabs/grist-widget/tree/master/invoices It uses Vue.js and grist.onRecord . Creating a custom widget # As you saw, writing a simple widget that uses data from a table is very easy. First, you need to tell Grist that you are ready and then subscribe to one of the available events: onRecord , onRecords or onOptions . grist.ready(); grist.onRecord(function (record) { // Cursor has moved. }); grist.onRecords(function (record) { // Data in the table has changed. }); grist.onOptions(function (options, interaction) { // Configuration has changed. }); Let\u2019s say you want to build a custom widget that will show an image from a URL and optionally a single line of text below as the image title. You will need to read two values from two columns: Link and Title . You could access those columns directly using literal column names in your script. Here is a complete example of widget source code that will do the job: <script src=\"https://docs.getgrist.com/grist-plugin-api.js\"></script> <img id=\"image\" src=\"\"/> <div id=\"title\"></div> <script> grist.ready({requiredAccess: 'read table'}); grist.onRecord(function (record) { document.getElementById('image').src = record.Link; document.getElementById('title').innerText = record.Title; }); </script> When getting started, this is a good approach, but it has two significant drawbacks. Every time you rename a column, you will also have to change your widget\u2019s source. Moreover, using this widget on a different table or sharing it with your friends can be difficult as column names might be different. To help with this, Grist offers the column mapping API. Column mapping # Instead of using column names directly, you can ask the user to pick which column to use as a Link and Title . The list of expected columns can be sent to Grist as part of the ready call: grist.ready({columns: ['Link', 'Title']}); Using this information, in the creator panel, Grist will hide the regular \u201cVisible\u201d columns section and display specialized column pickers. Your widget will receive this mapping configuration as part of onRecord or onRecords event in the second parameter. You can use this configuration to do the mappings yourself or use the mapColumnNames helper function to do it for you. <script src=\"https://docs.getgrist.com/grist-plugin-api.js\"></script> <img id=\"image\" src=\"\"/> <div id=\"title\"></div> <script> grist.ready({columns: ['Link', 'Title'], requiredAccess: 'read table'}); grist.onRecord(function (record, mappings) { const mapped = grist.mapColumnNames(record); // First check if all columns were mapped. if (mapped) { document.getElementById('image').src = mapped.Link; document.getElementById('title').innerText = mapped.Title; console.log(`Using ${mappings.Link} and ${mappings.Title} columns`); } else { // Helper returned a null value. It means that not all // required columns were mapped. console.error(\"Please map all columns\"); } }); </script> Now, if you rename one of the columns, the widget will still work. You can also use this widget in any other table or share with a friend, as it doesn\u2019t depend on your table structure and can be easily configured. In the configuration used above, we told Grist that all the columns are required, and the user can pick any column even if the column doesn\u2019t contain a text value. To be more precise, we can include more options in the request. For example: grist.ready({columns: [ { name: \"Link\", // What field we will read. title: \"Image link\", // Friendly field name. optional: false, // Is this an optional field. type: \"Text\" // What type of column we expect. } ]}); The optional setting is important for correct operation of the mapColumnNames helper. This helper will return a mapped record only when all required (not optional) columns are picked. By default Grist will allow the user to pick any type of column. To allow only a column of a specific type, you need to set a type property. Here are all valid types: Any , Int ( Integer column ), Numeric ( Numeric column ), Text , Date , DateTime , Bool ( Toggle column ), Choice , ChoiceList , Ref ( Reference column ), RefList ( Reference List ), Attachments . Suppose the user deletes a column or changes its type so that it will no longer match the type requested by the widget. In that case, Grist will automatically remove this column from the mapping. Widget options # If your widget needs to store some options, Grist offers a simple key-value storage API for you to use. Here are some JavaScript code snippets that show how to interact with this API: // Store a simple text value . await grist.setOption('color', '#FF0000'); // Store complex objects as JSON. await grist.setOption('settings', {lines: 10, skipFirst: true}); // Read previously saved option const color = await grist.getOption('color'); // Clear all options. await grist.clearOptions(); // Get and replace all options. await grist.getOptions(); await grist.setOptions({...}); You can experiment with this yourself. Here is a test widget that demonstrates how to use this API: https://gristlabs.github.io/grist-widget/inspect/onOptions.html When your widget saves or edits some options, the icon on top of the section gets highlighted in green. You can either apply those options to the widget or revert that modification. This allows viewers (users with read-only access) or collaborators to configure your widget without overwriting original settings. This behavior should look familiar to you and others, as this works like sorting and filtering on table or card views. Saving current options you will apply them to the widget and make them available to others. Using this menu, you can also clear all options to revert the widget to its initial state. To do this, press the little trash icon and then Save . Grist will also trigger an event, every time the options are changed (or cleared). Here is how you can subscribe to this event. grist.onOptions(function(options, interaction) { if (options) { console.log('Current color', options.color); } else { // No widget options were saved, fallback to default ones. } }); If you are building your own widget, you generally should not read options directly (using grist.widgetApi.getOption() ). A better pattern is to apply them all when they are changed. Using the onOptions handler will make your widget easier to change and understand later. There is one more scenario to cover. Suppose your widget has some kind of custom configuration screen. In that case, you probably need some button or other UI element that the user can use to show it. This additional UI element will likely be rarely used by you or your collaborators, so it doesn\u2019t make sense to show it all the time. To help with this, Grist offers an additional interaction option you can send as part of the ready message: grist.ready({ onEditOptions: function() { // Your custom logic to open the custom configuration screen. } }); This will tell Grist to display an additional button Open configuration in the creator panel and the section menu. When clicked, it will trigger your handler, which you can use to show your own custom configuration screen.","title":"Custom"},{"location":"widget-custom/#page-widget-custom","text":"Custom widgets are an experimental feature The design of custom widgets is likely to evolve, and sometimes that will require updates to documents that use them. We won\u2019t make such changes lightly. The Custom widget allows a user to insert almost anything in their document. To create a custom widget currently requires knowledge of web development, and access to a public web server (for example, GitHub Pages). A good use for custom widgets is to view records or tables in new ways. Using Grist as your data model and modern HTML/CSS/JS as your view is very powerful.","title":"Page widget: Custom"},{"location":"widget-custom/#minimal-example","text":"To demonstrate to a web developer how custom widgets work, there is a minimal working example at: https://public.getgrist.com/911KcgKA95oQ/Minimal-Custom-Widget/m/fork The example shows a table with some random data (names for pets), and two custom widgets, one showing the selected row in the table as JSON, and the other showing all rows of the table as JSON. If you change data in the table, or move the cursor, the custom widgets update as appropriate. The source code for the widgets is at: https://github.com/gristlabs/grist-widget/tree/master/inspect It is stripped down to the essentials. Here is the full source code of the onRecord widget that shows one row of data: <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"utf-8\"> <title>onRecord</title> <script src=\"https://docs.getgrist.com/grist-plugin-api.js\"></script> </head> <body> <pre id=\"readout\">Waiting for data...</pre> <script> grist.ready(); grist.onRecord(function(record) { document.getElementById('readout').innerHTML = JSON.stringify(record, null, 2); }); </script> </body> </html> The \u201cGrist\u201d parts of this are: Including https://docs.getgrist.com/grist-plugin-api.js to get the Grist API. Calling grist.ready to let Grist know the widget is ready to go. Calling grist.onRecord to subscribe to the current row of the table. After that, everything else is regular HTML/CSS/JS. Once you have data coming in, you can render it any way you like, using React, Vue.js, or your favorite framework. For example, you could render records as a printable invoice , or use some obscure chart format that Grist doesn\u2019t currently support.","title":"Minimal example"},{"location":"widget-custom/#adding-a-custom-widget","text":"To add a custom widget that reads from a table, click on Add New , then Add Widget to Page . Then: For Select Widget choose Custom to get a Custom Widget. For Select Data choose the table you want the widget to read data from. Optionally, choose Select By to control the selected data further (read Linking Page Widgets for the possibilities). The custom widget is initially blank. To configure it, click the three-dots button on the top right of the custom widget, and select \u201cWidget options\u201d. In the CUSTOM settings section where it says Enter Custom URL , put the link to your custom widget. Here is a test widget to simply show table data in JSON: https://gristlabs.github.io/grist-widget/inspect/onRecords.html And here\u2019s one to show the selected row only (make sure \u201cSelect By\u201d is set for the custom widget): https://gristlabs.github.io/grist-widget/inspect/onRecord.html","title":"Adding a custom widget"},{"location":"widget-custom/#access-level","text":"When you put a link to a custom webpage it will be immediately rendered inside the section. Now you have the option to grant that webpage access to data in your document. The following access levels are available: No document access : the webpage is shown in the widget, but it has no access to the Grist document containing the widget. Read selected table : the webpage is shown in the widget, and is given read access to the table the widget is configured to select data from. Full document access : the webpage is shown in the widget, and has full access to read and modify the Grist document containing the widget. The webpage should be owned and controlled by you or someone you trust. With Read selected table permissions, a widget could send the data it accesses to a third party. With Full document access permissions, a widget could send all the document data to a third party, and modify your document in any way. We do not recommend using Full document access permissions at this time, since the API for modifying the document is not yet stabilized. If you have an urgent need, however, do contact us and request early access. If you are writing your own custom widget you can specify what access level it needs as part of the initial ready message. Possible values are: none , read table and full . <script> grist.ready({ requiredAccess: 'read table' }); </script> This directs Grist to request the desired access level from the user. Your widget will be reloaded with the appropriate access level if the user approves the request. If you wish to get notified of the access level, you can subscribe to the onOptions event that is sent to the widget after it tells Grist it is ready: grist.onOptions(function(options, interaction) { console.log(interaction.access_level); }); For now, just skip the options parameter (it will be described in Widget options section). The current access level is part of the second parameter, which describes how Grist will interact with your widget.","title":"Access level"},{"location":"widget-custom/#invoice-example","text":"The minimal example above showed records as plain JSON, but the widget can get as fancy as you like. Here is an example of showing a record as a printable invoice: You can read the details of how to use this widget in our Invoice preparation example . The invoice widget is hosted at: https://gristlabs.github.io/grist-widget/invoices/ And the source HTML/CSS/JS can be browsed at: https://github.com/gristlabs/grist-widget/tree/master/invoices It uses Vue.js and grist.onRecord .","title":"Invoice example"},{"location":"widget-custom/#creating-a-custom-widget","text":"As you saw, writing a simple widget that uses data from a table is very easy. First, you need to tell Grist that you are ready and then subscribe to one of the available events: onRecord , onRecords or onOptions . grist.ready(); grist.onRecord(function (record) { // Cursor has moved. }); grist.onRecords(function (record) { // Data in the table has changed. }); grist.onOptions(function (options, interaction) { // Configuration has changed. }); Let\u2019s say you want to build a custom widget that will show an image from a URL and optionally a single line of text below as the image title. You will need to read two values from two columns: Link and Title . You could access those columns directly using literal column names in your script. Here is a complete example of widget source code that will do the job: <script src=\"https://docs.getgrist.com/grist-plugin-api.js\"></script> <img id=\"image\" src=\"\"/> <div id=\"title\"></div> <script> grist.ready({requiredAccess: 'read table'}); grist.onRecord(function (record) { document.getElementById('image').src = record.Link; document.getElementById('title').innerText = record.Title; }); </script> When getting started, this is a good approach, but it has two significant drawbacks. Every time you rename a column, you will also have to change your widget\u2019s source. Moreover, using this widget on a different table or sharing it with your friends can be difficult as column names might be different. To help with this, Grist offers the column mapping API.","title":"Creating a custom widget"},{"location":"widget-custom/#column-mapping","text":"Instead of using column names directly, you can ask the user to pick which column to use as a Link and Title . The list of expected columns can be sent to Grist as part of the ready call: grist.ready({columns: ['Link', 'Title']}); Using this information, in the creator panel, Grist will hide the regular \u201cVisible\u201d columns section and display specialized column pickers. Your widget will receive this mapping configuration as part of onRecord or onRecords event in the second parameter. You can use this configuration to do the mappings yourself or use the mapColumnNames helper function to do it for you. <script src=\"https://docs.getgrist.com/grist-plugin-api.js\"></script> <img id=\"image\" src=\"\"/> <div id=\"title\"></div> <script> grist.ready({columns: ['Link', 'Title'], requiredAccess: 'read table'}); grist.onRecord(function (record, mappings) { const mapped = grist.mapColumnNames(record); // First check if all columns were mapped. if (mapped) { document.getElementById('image').src = mapped.Link; document.getElementById('title').innerText = mapped.Title; console.log(`Using ${mappings.Link} and ${mappings.Title} columns`); } else { // Helper returned a null value. It means that not all // required columns were mapped. console.error(\"Please map all columns\"); } }); </script> Now, if you rename one of the columns, the widget will still work. You can also use this widget in any other table or share with a friend, as it doesn\u2019t depend on your table structure and can be easily configured. In the configuration used above, we told Grist that all the columns are required, and the user can pick any column even if the column doesn\u2019t contain a text value. To be more precise, we can include more options in the request. For example: grist.ready({columns: [ { name: \"Link\", // What field we will read. title: \"Image link\", // Friendly field name. optional: false, // Is this an optional field. type: \"Text\" // What type of column we expect. } ]}); The optional setting is important for correct operation of the mapColumnNames helper. This helper will return a mapped record only when all required (not optional) columns are picked. By default Grist will allow the user to pick any type of column. To allow only a column of a specific type, you need to set a type property. Here are all valid types: Any , Int ( Integer column ), Numeric ( Numeric column ), Text , Date , DateTime , Bool ( Toggle column ), Choice , ChoiceList , Ref ( Reference column ), RefList ( Reference List ), Attachments . Suppose the user deletes a column or changes its type so that it will no longer match the type requested by the widget. In that case, Grist will automatically remove this column from the mapping.","title":"Column mapping"},{"location":"widget-custom/#widget-options","text":"If your widget needs to store some options, Grist offers a simple key-value storage API for you to use. Here are some JavaScript code snippets that show how to interact with this API: // Store a simple text value . await grist.setOption('color', '#FF0000'); // Store complex objects as JSON. await grist.setOption('settings', {lines: 10, skipFirst: true}); // Read previously saved option const color = await grist.getOption('color'); // Clear all options. await grist.clearOptions(); // Get and replace all options. await grist.getOptions(); await grist.setOptions({...}); You can experiment with this yourself. Here is a test widget that demonstrates how to use this API: https://gristlabs.github.io/grist-widget/inspect/onOptions.html When your widget saves or edits some options, the icon on top of the section gets highlighted in green. You can either apply those options to the widget or revert that modification. This allows viewers (users with read-only access) or collaborators to configure your widget without overwriting original settings. This behavior should look familiar to you and others, as this works like sorting and filtering on table or card views. Saving current options you will apply them to the widget and make them available to others. Using this menu, you can also clear all options to revert the widget to its initial state. To do this, press the little trash icon and then Save . Grist will also trigger an event, every time the options are changed (or cleared). Here is how you can subscribe to this event. grist.onOptions(function(options, interaction) { if (options) { console.log('Current color', options.color); } else { // No widget options were saved, fallback to default ones. } }); If you are building your own widget, you generally should not read options directly (using grist.widgetApi.getOption() ). A better pattern is to apply them all when they are changed. Using the onOptions handler will make your widget easier to change and understand later. There is one more scenario to cover. Suppose your widget has some kind of custom configuration screen. In that case, you probably need some button or other UI element that the user can use to show it. This additional UI element will likely be rarely used by you or your collaborators, so it doesn\u2019t make sense to show it all the time. To help with this, Grist offers an additional interaction option you can send as part of the ready message: grist.ready({ onEditOptions: function() { // Your custom logic to open the custom configuration screen. } }); This will tell Grist to display an additional button Open configuration in the creator panel and the section menu. When clicked, it will trigger your handler, which you can use to show your own custom configuration screen.","title":"Widget options"},{"location":"widget-table/","text":"Page widget: Table # The Table widget is a versatile spreadsheet-like grid. Here are some useful features to know. Column operations # Resize columns : Click on the line between column headers, and drag it to resize columns. Reorder columns : With a column selected, drag its header to move it to a different place relative to other columns. (You can also do this by reordering fields in the widget options panel.) Rename columns : With a column selected, click its header to rename it. Hit Enter to save the new name. Add columns : Click the \u201c+\u201d icon on the right of all the column headers to add a new column, or show any of the hidden columns. The column menu also allows inserting a new column next to an existing column, as do the keyboard shortcuts Alt + + (insert before) and Alt + = (insert after). After adding a column, the column name (set by default to \u201cA\u201d, \u201cB\u201d, \u201cC\u201d, etc.) is immediately selected and highlighted to let you quickly rename it. Just type in the new name and hit Enter , or hit Escape to keep the default name. Hide columns : Move the mouse over the column header and click the triangle to open the column menu. Click \u201cHide column\u201d to hide the column. The column remains in the underlying data, and can be shown again using the \u201c+\u201d icon on the right of the column headers, or the field list in the widget options panel. Delete columns : Delete the actual column of data using the column menu option, or the Alt + Minus keyboard shortcut. The table is the only widget that allows deleting a column. Note: deleting and hiding are different. Hiding a columns removes it only from the current page widget, but leaves it in the data and available to formulas. Deleting a column removes it from everywhere. (Of course, undo still works for either operation!) Row operations # Add rows : Type into the last row in a table, which is highlighted to indicate that it\u2019s a placeholder for adding new records. Right click a row number to insert a blank row next to an existing row, or use the keyboard shortcuts \u2318 \u21e7 = (Mac) or Ctrl + Shift + = (Windows) to insert before, and \u2318 = (Mac) or Ctrl + = (Windows) to insert after. Delete rows : Right click a row number and select the \u201cDelete\u201d option to delete a row, or use the \u2318 + Minus (Mac) or Ctrl + Minus (Windows) shortcut. If you select a range of cells first, either of these delete actions will delete all rows included in the range. Link to rows : Right click a row number and select \u201cCopy anchor link\u201d to copy a link to the selected cell of that row. The link will be placed in your clipboard, ready to paste into an email or an instant messaging app. The link will open only for people with access to the document. Navigation and selection # Navigate using shortcuts : Use keyboard shortcuts to navigate the grid: Tab , Shift + Tab Move to the next or previous column, saving changes if editing a cell. \u2318 + Up (Mac) or Ctrl + Up (Windows) Move up to the first row. \u2318 + Down (Mac) or Ctrl + Down (Windows) Move down to the last row. Home or Fn + \u2190 (Mac) Move to the beginning of a row. End or Fn + \u2192 (Mac) Move to the end of a row. PageDown or Fn + \u2193 (Mac) Move down one page of rows. PageUp or Fn + \u2191 (Mac) Move up one page of rows. Alt + Down , Alt + Up Move down or up five rows. Select ranges : Click and drag a mouse across the grid to select a range of cells to copy (copy and paste using the usual keyboard shortcuts for your computer). Another way to select a range is to click one cell, and then hold Shift while clicking another cell, or while navigating with the arrow keys. Fill down data : Select a range of cells, and hit \u2318 + D (Mac) or Ctrl + D (Windows) to fill the whole selected range with the values of the cells in the top row of the range. Customization # Customize table looks : In the widget options panel, you can turn off horizontal or vertical grid lines, or turn on zebra striping. For example, this lets you change the look of your grid to a list like this:","title":"Table widget"},{"location":"widget-table/#page-widget-table","text":"The Table widget is a versatile spreadsheet-like grid. Here are some useful features to know.","title":"Page widget: Table"},{"location":"widget-table/#column-operations","text":"Resize columns : Click on the line between column headers, and drag it to resize columns. Reorder columns : With a column selected, drag its header to move it to a different place relative to other columns. (You can also do this by reordering fields in the widget options panel.) Rename columns : With a column selected, click its header to rename it. Hit Enter to save the new name. Add columns : Click the \u201c+\u201d icon on the right of all the column headers to add a new column, or show any of the hidden columns. The column menu also allows inserting a new column next to an existing column, as do the keyboard shortcuts Alt + + (insert before) and Alt + = (insert after). After adding a column, the column name (set by default to \u201cA\u201d, \u201cB\u201d, \u201cC\u201d, etc.) is immediately selected and highlighted to let you quickly rename it. Just type in the new name and hit Enter , or hit Escape to keep the default name. Hide columns : Move the mouse over the column header and click the triangle to open the column menu. Click \u201cHide column\u201d to hide the column. The column remains in the underlying data, and can be shown again using the \u201c+\u201d icon on the right of the column headers, or the field list in the widget options panel. Delete columns : Delete the actual column of data using the column menu option, or the Alt + Minus keyboard shortcut. The table is the only widget that allows deleting a column. Note: deleting and hiding are different. Hiding a columns removes it only from the current page widget, but leaves it in the data and available to formulas. Deleting a column removes it from everywhere. (Of course, undo still works for either operation!)","title":"Column operations"},{"location":"widget-table/#row-operations","text":"Add rows : Type into the last row in a table, which is highlighted to indicate that it\u2019s a placeholder for adding new records. Right click a row number to insert a blank row next to an existing row, or use the keyboard shortcuts \u2318 \u21e7 = (Mac) or Ctrl + Shift + = (Windows) to insert before, and \u2318 = (Mac) or Ctrl + = (Windows) to insert after. Delete rows : Right click a row number and select the \u201cDelete\u201d option to delete a row, or use the \u2318 + Minus (Mac) or Ctrl + Minus (Windows) shortcut. If you select a range of cells first, either of these delete actions will delete all rows included in the range. Link to rows : Right click a row number and select \u201cCopy anchor link\u201d to copy a link to the selected cell of that row. The link will be placed in your clipboard, ready to paste into an email or an instant messaging app. The link will open only for people with access to the document.","title":"Row operations"},{"location":"widget-table/#navigation-and-selection","text":"Navigate using shortcuts : Use keyboard shortcuts to navigate the grid: Tab , Shift + Tab Move to the next or previous column, saving changes if editing a cell. \u2318 + Up (Mac) or Ctrl + Up (Windows) Move up to the first row. \u2318 + Down (Mac) or Ctrl + Down (Windows) Move down to the last row. Home or Fn + \u2190 (Mac) Move to the beginning of a row. End or Fn + \u2192 (Mac) Move to the end of a row. PageDown or Fn + \u2193 (Mac) Move down one page of rows. PageUp or Fn + \u2191 (Mac) Move up one page of rows. Alt + Down , Alt + Up Move down or up five rows. Select ranges : Click and drag a mouse across the grid to select a range of cells to copy (copy and paste using the usual keyboard shortcuts for your computer). Another way to select a range is to click one cell, and then hold Shift while clicking another cell, or while navigating with the arrow keys. Fill down data : Select a range of cells, and hit \u2318 + D (Mac) or Ctrl + D (Windows) to fill the whole selected range with the values of the cells in the top row of the range.","title":"Navigation and selection"},{"location":"widget-table/#customization","text":"Customize table looks : In the widget options panel, you can turn off horizontal or vertical grid lines, or turn on zebra striping. For example, this lets you change the look of your grid to a list like this:","title":"Customization"},{"location":"workspaces/","text":"Workspaces # A team site can be divided into collections of documents called \u201cworkspaces\u201d which can be shared as a single unit with other users. This is convenient, for example, for documents related to a single project. You can only create workspaces on team sites, not personal sites. To check what kind of site you have, or to find a team site you have purchased, follow the steps at Team sharing . A team site, when first created, has a single workspace called \u201cHome.\u201d You can rename that workspace if you like, by hovering over the workspace name on the left bar, clicking on the three-dots icon, and selecting \u201cRename\u201d. Even better, you can create new workspaces, so you can group your documents and share them as a unit. To add a document to a specific workspace, click on that workspace in the left bar, then select \u201cAdd New\u201d, then \u201cCreate empty document\u201d (or \u201cImport document\u201d). You can control who has access to a workspace using \u201cManage Users.\u201d The controls are just like for sharing documents . Viewers of a team site will also be viewers of all its workspaces. Likewise for editors and owners. To exclude a workspace from inheriting team site viewers, editors, and owners, set \u201cInherit Access\u201d to \u201cNone\u201d. You can also set it to \u201cView Only\u201d to limit inheritance to view rights, or \u201cView & Edit\u201d to limit inheritance to view and edit rights (excluding the right to control sharing options). It is possible to be an editor/owner of a workspace and not be able to open all documents within that workspace. This can happen if an owner of a document limits inheritance to \u201cNone.\u201d You will still see the document listed, so that if you ever decide to delete the workspace you\u2019ll know what you\u2019re deleting. Viewers of a workspace will only see documents they have access to listed. To move a document from one workspace to another, hover over the document, click on the three-dots icon to the right of the document\u2019s name, and select \u201cMove\u201d. You\u2019ll then have the option to pick the workspace you want.","title":"Workspaces"},{"location":"workspaces/#workspaces","text":"A team site can be divided into collections of documents called \u201cworkspaces\u201d which can be shared as a single unit with other users. This is convenient, for example, for documents related to a single project. You can only create workspaces on team sites, not personal sites. To check what kind of site you have, or to find a team site you have purchased, follow the steps at Team sharing . A team site, when first created, has a single workspace called \u201cHome.\u201d You can rename that workspace if you like, by hovering over the workspace name on the left bar, clicking on the three-dots icon, and selecting \u201cRename\u201d. Even better, you can create new workspaces, so you can group your documents and share them as a unit. To add a document to a specific workspace, click on that workspace in the left bar, then select \u201cAdd New\u201d, then \u201cCreate empty document\u201d (or \u201cImport document\u201d). You can control who has access to a workspace using \u201cManage Users.\u201d The controls are just like for sharing documents . Viewers of a team site will also be viewers of all its workspaces. Likewise for editors and owners. To exclude a workspace from inheriting team site viewers, editors, and owners, set \u201cInherit Access\u201d to \u201cNone\u201d. You can also set it to \u201cView Only\u201d to limit inheritance to view rights, or \u201cView & Edit\u201d to limit inheritance to view and edit rights (excluding the right to control sharing options). It is possible to be an editor/owner of a workspace and not be able to open all documents within that workspace. This can happen if an owner of a document limits inheritance to \u201cNone.\u201d You will still see the document listed, so that if you ever decide to delete the workspace you\u2019ll know what you\u2019re deleting. Viewers of a workspace will only see documents they have access to listed. To move a document from one workspace to another, hover over the document, click on the three-dots icon to the right of the document\u2019s name, and select \u201cMove\u201d. You\u2019ll then have the option to pick the workspace you want.","title":"Workspaces"},{"location":"examples/2020-06-book-club/","text":"Book Lists with Library and Store Look-ups # If there\u2019s one thing better than reading a book, it is reading with friends. To organize a book club is pretty simple. The club will work best if everyone actually gets the book, and has opinions for what to read next time. Grist can help with all that. To nudge the book into everyone\u2019s hands, it helps to have links to borrow the book at your local library, and to buy the book from your local (or not-so-local) store. And for ideas about what to read next time, it helps to be able to easily suggest books, and to learn about books others suggest via sites like GoodReads, Wikipedia, and Amazon. Suppose we start with a simple table of books, with book titles and author names. To borrow or buy the book, it is best to have its unique ISBN code, so there\u2019s no ambiguity or mix-ups. One thing we can do is add a link to search for a book on isbnsearch.org by its title and author. To do this, add a new column, and then set it to be a HyperLink column : What we\u2019re going to do is fill this column using a formula that takes the book title and the author\u2019s name, and uses them as a keyword to search on the isbnsearch.org site. Here\u2019s the formula: import urllib keywords = ($Title or \"\") + \" \" + ($Author or \"\") \"[isbn] https://isbnsearch.org/search?s=\" + urllib.quote(keywords) URLs with spaces or apostrophes or other odd letters you might find in names need special encoding, so we\u2019ve used the python urllib module to make sure everything gets encoded correctly. Now we\u2019ve got a handy [isbn] link beside each book: We can click the arrow by [isbn] , locate the book, and make note of its ISBN code in a new column: Then we can add it into our book list. Now that we have a helping hand for finding ISBNs, let\u2019s add a few more books too: Library and store lookups # Once we have the ISBN, adding a link to buy the book is easy. Here\u2019s a formula for the indiebound.org site, which in the U.S. is likely to have an independent book store near you as a member: \"[buy] https://indiebound.org/book/\" + $ISBN If you don\u2019t have a local bookstore, there\u2019s Amazon, or pretty much any site you like (just find a search page on their site, and match the pattern). import urllib keywords = ($Title or \"\") + \" \" + ($Author or \"\") + \" \" + ($ISBN or \"\") \"[amazon] https://www.amazon.com/s?i=stripbooks&k=\" + urllib.quote($keywords) The new links look like this: Clicking on the [buy] link near a book now brings us to that book on indiebound.org . For your local library, the same idea is very likely to work. For example, in northern New Jersey, in the US, here\u2019s what you want: import urllib prefix = \"[borrow] https://catalog.bccls.org/polaris/search/searchresults.aspx?ctx=placeholder&type=Keyword&by=ISBN&term=\" prefix + urllib.quote($ISBN) And here\u2019s how to look up Goodreads to see what people think of a book: \"[opinion] https://www.goodreads.com/search?q=\" + $ISBN And Wikipedia to start a deep dive: import urllib keywords = ($Title or \"\") + \" \" + ($Author.Name or \"\") \"[wikipedia] https://en.wikipedia.org/wiki/Special:Search/\" + urllib.quote(keywords) Once we have all these links, it makes sense to add a Card View so we can lay them out: Ready-made template # Here is an example book list that you can play with. The actual books listed may not be your thing, of course! Adjust to taste.","title":"Book club links"},{"location":"examples/2020-06-book-club/#book-lists-with-library-and-store-look-ups","text":"If there\u2019s one thing better than reading a book, it is reading with friends. To organize a book club is pretty simple. The club will work best if everyone actually gets the book, and has opinions for what to read next time. Grist can help with all that. To nudge the book into everyone\u2019s hands, it helps to have links to borrow the book at your local library, and to buy the book from your local (or not-so-local) store. And for ideas about what to read next time, it helps to be able to easily suggest books, and to learn about books others suggest via sites like GoodReads, Wikipedia, and Amazon. Suppose we start with a simple table of books, with book titles and author names. To borrow or buy the book, it is best to have its unique ISBN code, so there\u2019s no ambiguity or mix-ups. One thing we can do is add a link to search for a book on isbnsearch.org by its title and author. To do this, add a new column, and then set it to be a HyperLink column : What we\u2019re going to do is fill this column using a formula that takes the book title and the author\u2019s name, and uses them as a keyword to search on the isbnsearch.org site. Here\u2019s the formula: import urllib keywords = ($Title or \"\") + \" \" + ($Author or \"\") \"[isbn] https://isbnsearch.org/search?s=\" + urllib.quote(keywords) URLs with spaces or apostrophes or other odd letters you might find in names need special encoding, so we\u2019ve used the python urllib module to make sure everything gets encoded correctly. Now we\u2019ve got a handy [isbn] link beside each book: We can click the arrow by [isbn] , locate the book, and make note of its ISBN code in a new column: Then we can add it into our book list. Now that we have a helping hand for finding ISBNs, let\u2019s add a few more books too:","title":"Book Lists with Library and Store Look-ups"},{"location":"examples/2020-06-book-club/#library-and-store-lookups","text":"Once we have the ISBN, adding a link to buy the book is easy. Here\u2019s a formula for the indiebound.org site, which in the U.S. is likely to have an independent book store near you as a member: \"[buy] https://indiebound.org/book/\" + $ISBN If you don\u2019t have a local bookstore, there\u2019s Amazon, or pretty much any site you like (just find a search page on their site, and match the pattern). import urllib keywords = ($Title or \"\") + \" \" + ($Author or \"\") + \" \" + ($ISBN or \"\") \"[amazon] https://www.amazon.com/s?i=stripbooks&k=\" + urllib.quote($keywords) The new links look like this: Clicking on the [buy] link near a book now brings us to that book on indiebound.org . For your local library, the same idea is very likely to work. For example, in northern New Jersey, in the US, here\u2019s what you want: import urllib prefix = \"[borrow] https://catalog.bccls.org/polaris/search/searchresults.aspx?ctx=placeholder&type=Keyword&by=ISBN&term=\" prefix + urllib.quote($ISBN) And here\u2019s how to look up Goodreads to see what people think of a book: \"[opinion] https://www.goodreads.com/search?q=\" + $ISBN And Wikipedia to start a deep dive: import urllib keywords = ($Title or \"\") + \" \" + ($Author.Name or \"\") \"[wikipedia] https://en.wikipedia.org/wiki/Special:Search/\" + urllib.quote(keywords) Once we have all these links, it makes sense to add a Card View so we can lay them out:","title":"Library and store lookups"},{"location":"examples/2020-06-book-club/#ready-made-template","text":"Here is an example book list that you can play with. The actual books listed may not be your thing, of course! Adjust to taste.","title":"Ready-made template"},{"location":"examples/2020-06-credit-card/","text":"Slicing and Dicing Expenses # Grist offers a handy way to explore your credit card transactions quickly, for example if you want to see transactions by: Category Card Member Month Combination of any of the above Here is an example using data from American Express (redacted for privacy, of course). See below for using it as a template for your own data. This first page is a dashboard: it shows a few summary charts \u2014 your expenses by month, and two pie charts to let you quickly see which card member or which category has the most expenses. The next three pages show breakdowns by Category, Card Member, and by Month. In addition to the totals by Category, you can click on any Category to see all transactions in it, and then click on any transaction to see its complete details. Here is the example with sample data that you can play with. To use it for your own data, start by downloading your transactions. For American Express credit cards: Log in at https://americanexpress.com Go to \u201cStatements & Activity\u201d tab, then select \u201cView By Year\u201d or \u201cCustom Date Range\u201d. Click \u201cDownload your Transactions\u201d icon. When asked to choose the download format, select \u201cCSV\u201d and select the checkbox that says \u201cInclude all additional transaction details\u201d. To import this data into Grist: Open the template here . Click \u201cAdd New\u201d button and choose \u201cImport from file\u201d. In the dialog that shows, change \u201cTo\u201d table from \u201cNew Table\u201d to \u201cActivity\u201d, like so: Click \u201cImport\u201d, and you are done. Your data is ready to explore. Note When you start with a template link, your copy of the document is initially unsaved. To keep this data for later, click \u201cSave Copy\u201d, and give the document a name. You\u2019ll see the document later on your Grist home page at https://docs.getgrist.com . A template like this doesn\u2019t take long to prepare. It uses a combination of summary tables and widget linking . Have feedback or improvements to contribute? Please share with us by emailing support@getgrist.com .","title":"Credit card expenses"},{"location":"examples/2020-06-credit-card/#slicing-and-dicing-expenses","text":"Grist offers a handy way to explore your credit card transactions quickly, for example if you want to see transactions by: Category Card Member Month Combination of any of the above Here is an example using data from American Express (redacted for privacy, of course). See below for using it as a template for your own data. This first page is a dashboard: it shows a few summary charts \u2014 your expenses by month, and two pie charts to let you quickly see which card member or which category has the most expenses. The next three pages show breakdowns by Category, Card Member, and by Month. In addition to the totals by Category, you can click on any Category to see all transactions in it, and then click on any transaction to see its complete details. Here is the example with sample data that you can play with. To use it for your own data, start by downloading your transactions. For American Express credit cards: Log in at https://americanexpress.com Go to \u201cStatements & Activity\u201d tab, then select \u201cView By Year\u201d or \u201cCustom Date Range\u201d. Click \u201cDownload your Transactions\u201d icon. When asked to choose the download format, select \u201cCSV\u201d and select the checkbox that says \u201cInclude all additional transaction details\u201d. To import this data into Grist: Open the template here . Click \u201cAdd New\u201d button and choose \u201cImport from file\u201d. In the dialog that shows, change \u201cTo\u201d table from \u201cNew Table\u201d to \u201cActivity\u201d, like so: Click \u201cImport\u201d, and you are done. Your data is ready to explore. Note When you start with a template link, your copy of the document is initially unsaved. To keep this data for later, click \u201cSave Copy\u201d, and give the document a name. You\u2019ll see the document later on your Grist home page at https://docs.getgrist.com . A template like this doesn\u2019t take long to prepare. It uses a combination of summary tables and widget linking . Have feedback or improvements to contribute? Please share with us by emailing support@getgrist.com .","title":"Slicing and Dicing Expenses"},{"location":"examples/2020-07-email-compose/","text":"Prepare Emails using Formulas # You may already know that you can add hyperlink fields in Grist. You may also know about \u201cmailto\u201d links that open a mail program to create a new email message. Less well-known is that \u201cmailto\u201d links allow pre-filling many parts of the email message. If you use Grist to store contacts, you can essentially create email templates using Grist formulas. Simple Mailto Links # The simplest \u201cmailto\u201d link in Grist looks like mailto:someone@example.com . When the column is set to Text, and its format is set to Hyperlink, it shows as someone@example.com . If you have a table with columns Full_Name and Email , add another column with this formula: \"Compose Email mailto:%s\" % ($Email) . Set its type to Text, and its cell format to Hyperlink: You\u2019ll get a link in each person\u2019s row, which you can click to start composing an email to that person: See an example of this in action here: Simple Compose . Cc, Bcc, Subject, Body # In addition to opening your email program and filling in the \u201cTO\u201d field, a \u201cmailto\u201d link can fill in other parts of the email, using this format: mailto:<to>?cc=<cc>&bcc=<bcc>&reply-to=<email>&subject=<subject>&body=<body> All fields are optional. You can specify multiple email addresses for To/Cc/Bcc lists by separating them with commas. Values of each field should be percent-encoded , which in Python can be done using urllib.parse.quote . To put this together, this formula will produce a hyperlink to create a pre-filled email: from urllib.parse import quote return \"Compose mailto:%s?cc=sales@example.com&subject=%s&body=%s\" % ( quote($Email), quote($Subject), quote($Body)) A live example of this is here: Advanced Compose . Emailing Multiple People # Email links are very handy when emailing a group of people, such as students in a class, or people on a certain project. For instance, if you have a Reference column \u201cProject\u201d that ties a person to a project, then in the table of projects, you can look up all associated people using lookupRecords . You can then build a link to email them as a group: from urllib.parse import quote people = People.lookupRecords(Project=$id) return \"Email Group mailto:%s\" % quote(\", \".join(people.Email)) You can see this formula at work in Group Compose . Don\u2019t use this to replace an email marketing platform: since emails use your regular email program, you shouldn\u2019t use it for emailing thousands of people. But for small groups, this can be very convenient. Configuring Email Program # If your \u201cmailto\u201d links don\u2019t work, or don\u2019t open your preferred email program, here is an article to help you configure it: Changing the default email program . If you need more details, here are some more links: To open a desktop program (such as Mail, Thunderbird, etc.) on a Mac: Instructions . To open a desktop program (such as Outlook, etc. ) on Windows: Instructions . To open Gmail in Chrome and other browsers: Instructions . To open webmail (such as Gmail or Yahoo! Mail) or a desktop program in Firefox: Instructions .","title":"Prefill emails"},{"location":"examples/2020-07-email-compose/#prepare-emails-using-formulas","text":"You may already know that you can add hyperlink fields in Grist. You may also know about \u201cmailto\u201d links that open a mail program to create a new email message. Less well-known is that \u201cmailto\u201d links allow pre-filling many parts of the email message. If you use Grist to store contacts, you can essentially create email templates using Grist formulas.","title":"Prepare Emails using Formulas"},{"location":"examples/2020-07-email-compose/#simple-mailto-links","text":"The simplest \u201cmailto\u201d link in Grist looks like mailto:someone@example.com . When the column is set to Text, and its format is set to Hyperlink, it shows as someone@example.com . If you have a table with columns Full_Name and Email , add another column with this formula: \"Compose Email mailto:%s\" % ($Email) . Set its type to Text, and its cell format to Hyperlink: You\u2019ll get a link in each person\u2019s row, which you can click to start composing an email to that person: See an example of this in action here: Simple Compose .","title":"Simple Mailto Links"},{"location":"examples/2020-07-email-compose/#cc-bcc-subject-body","text":"In addition to opening your email program and filling in the \u201cTO\u201d field, a \u201cmailto\u201d link can fill in other parts of the email, using this format: mailto:<to>?cc=<cc>&bcc=<bcc>&reply-to=<email>&subject=<subject>&body=<body> All fields are optional. You can specify multiple email addresses for To/Cc/Bcc lists by separating them with commas. Values of each field should be percent-encoded , which in Python can be done using urllib.parse.quote . To put this together, this formula will produce a hyperlink to create a pre-filled email: from urllib.parse import quote return \"Compose mailto:%s?cc=sales@example.com&subject=%s&body=%s\" % ( quote($Email), quote($Subject), quote($Body)) A live example of this is here: Advanced Compose .","title":"Cc, Bcc, Subject, Body"},{"location":"examples/2020-07-email-compose/#emailing-multiple-people","text":"Email links are very handy when emailing a group of people, such as students in a class, or people on a certain project. For instance, if you have a Reference column \u201cProject\u201d that ties a person to a project, then in the table of projects, you can look up all associated people using lookupRecords . You can then build a link to email them as a group: from urllib.parse import quote people = People.lookupRecords(Project=$id) return \"Email Group mailto:%s\" % quote(\", \".join(people.Email)) You can see this formula at work in Group Compose . Don\u2019t use this to replace an email marketing platform: since emails use your regular email program, you shouldn\u2019t use it for emailing thousands of people. But for small groups, this can be very convenient.","title":"Emailing Multiple People"},{"location":"examples/2020-07-email-compose/#configuring-email-program","text":"If your \u201cmailto\u201d links don\u2019t work, or don\u2019t open your preferred email program, here is an article to help you configure it: Changing the default email program . If you need more details, here are some more links: To open a desktop program (such as Mail, Thunderbird, etc.) on a Mac: Instructions . To open a desktop program (such as Outlook, etc. ) on Windows: Instructions . To open Gmail in Chrome and other browsers: Instructions . To open webmail (such as Gmail or Yahoo! Mail) or a desktop program in Firefox: Instructions .","title":"Configuring Email Program"},{"location":"examples/2020-08-invoices/","text":"Preparing invoices # If you are keeping records of who is charged what in Grist, it can be convenient to generate invoices right there and then beside those records. This tutorial shows you how to set up a document like this: You can find a finished template at https://templates.getgrist.com/9NH6D58FmxwP/Invoicing . If you\u2019d like to add invoices to an existing document, making them work the way you want, understanding this tutorial should get you there. Setting up an invoice table # First of all, make a table to record invoices by creating an empty document and renaming Table1 to Invoices : Now, let\u2019s add a widget beside the table to view the finished invoices. There are all sorts of possible styles of invoice, so Grist lets web developers create their own using Custom Widgets. We\u2019ll use an example invoice style published by Grist, but if it doesn\u2019t match your needs any web developer could tweak it for you. Click on Add New , then Add Widget to Page . Then: For Select Widget choose Custom since we\u2019ll be using a Custom Widget. For Select Data choose Invoices since we\u2019ll be viewing data from the invoices table. For Select By choose INVOICES so that the Custom Widget will show data from whatever invoice is currently selected by the user. Great, now we have two widgets, a Table Widget that will have invoice data, and a Custom Widget that will view that data as a nicely formatted, printable invoice. The Custom Widget starts off blank; select Widget options to specify what we want in it: In the CUSTOM settings section where it says Full URL of webpage to show , put this link: https://gristlabs.github.io/grist-widget/invoices/ And set Access to read table . This grants the Custom Widget access to read the Invoices table. Now place anything you like in a row of the Invoices table (I just added the number 1 ). An incomplete invoice will immediately show up: The incomplete invoice shows what column names to use to control what parts of the invoice. An extra black box shows what columns the widget understands, what columns it is ignoring, and what extra columns the widget could make use of. Currently it is saying that it doesn\u2019t recognize any of the columns present, is expecting columns like Number , Client , Items , etc., and is ignoring the default A , B , and C columns in the Invoices table. Looking at the start of the invoice we see a space for an invoice number, INVOICE NUMBER: #Number . So let\u2019s rename the A column to Number , we could leave the value as 1, but then it looks like we haven\u2019t done much business yet. I\u2019m going to choose the set the invoice number to be $id + 51371 , where $id is an auto-incrementing numeric identifier assigned to each row. But you could set it manually or with a different formula. As soon as it is set, the invoice updates: The next column the help box suggests is Client , so let\u2019s rename the B column to Client . Later we will give client information in a structured way, but for now let\u2019s just put some text here (use Shift + Enter to insert line breaks): Great, now the Client box is filled out. The next suggested column is Items , so let\u2019s rename the C column to Items . Later we will give item information in a structured way, but for now let\u2019s just put some text here: And now the Description is set. We\u2019re missing a total, so let\u2019s add a column called Total and set it to 100 : The invoice won\u2019t update immediately. This is the first new column we\u2019ve added - until now we\u2019ve been renaming them. When we created the Custom Widget, it was given access to the columns that existed at the time of creation. To let the widget see the new column, open Widget options again and move Total from Hidden Columns to Visible Columns : Great, the invoice updated. Now let\u2019s set who the invoice is from, by adding an Invoicer column (remember to make it visible to the widget via Widget options ). As a last step to creating a usable invoice, let\u2019s make an Issued column and put today\u2019s date in it (remember to make it visible to the widget via Widget options ). As soon as the invoice has a date, the black help box will disappear: Okay! If someone sent me that, I\u2019d pay it. You should nudge me by giving it a due date though. Let\u2019s make a Due column and set it to a month from the Issued date. Remember to make the Due column visible to the widget via Widget options . Also, be sure to set the Column Type for Issued to Date or you won\u2019t be able to do date math on it (it will just be a string). If there are special instructions to go with the invoice, we can add a Note column. Remember to make it visible to the widget via Widget options . Entering client information # Now, let\u2019s make two useful changes to the invoice set-up: Put client information in a separate table, so we don\u2019t have to reenter their address every time we invoice them (and we can import the addresses in bulk). Enter items and prices in a table, so multi-item invoices are easy to make (and we can use formulas and look-ups for pricing if we like). Before doing so, we need to let Grist know that the content of the invoice will depend on these other tables, so that it can update it when something changes, and make sure the invoice gets access to everything it needs. Make a column named References and give it this formula: = RECORD(rec, expand_refs=1) That says \u201ctake the current record, and package it up, including everything it references directly\u201d. Since Grist is a spreadsheet, it also implies \u201cupdate everything that depends on this column if anything in the references changes\u201d. Remember to make the References column visible to the widget via Widget options , so that the widget will get updated as we add and change referenced material. When the invoice widget sees a column named \u201cReferences\u201d, it fills out the invoice using the \u201cpackaged\u201d values in that column, rather than the individual invoice fields. The benefit will be seen in the next step, since these packaged values can include data from related records. Next let\u2019s place client information in a separate table. Add a new table to the page for entering business information by clicking on Add New , Add Widget to Page , then Select Widget > Table and Select Data > New Table : Then rename the table to Businesses . Let\u2019s also empty the Client column so we can see help about what the widget expects there: The widget suggests Name , Street1 , Street2 , City , State and Zip columns. So let\u2019s provide those columns in our Businesses table, and fill them in for an example client. Then place the same Name in the Client column, and in Column options set the Column Type to Reference . Refer to Businesses Name if Grist doesn\u2019t automatically guess that. Once you hit Apply , you will see a nicely formatted Client section. Entering invoicer information # We could do the same thing for the Invoicer column as we did for the Client column, and make it a reference to the Businesses table or a separate table. However, if you will always be using the same name and address for your business, you could skip setting up a reference by entering a formula like this into the Invoicer column (start typing with = to make it a formula): { \"Name\": \"Thunderous Applause\", \"Street1\": \"6502 Automated Rd\", \"City\": \"New York\", \"State\": \"NY\", \"Zip\": \"10003\", \"Email\": \"applause@thunder.com\", \"Phone\": \"+1-800-YAY-YAYS\", \"Website\": \"applause.com\" } Then set the Column Type for Invoicer to Any in the right-side panel. Notice how emails, phone numbers, and links are specially formatted by the widget. Entering item information # Now, let\u2019s set up the list of items and prices that is at the heart of an invoice. Clear the Items column to see what we can put there. It will show that Items can be a list, where each item has a Description , Price , Quantity , and Total . So we go ahead and add an Items table like we added Businesses , and give it those four columns. We can set Total to be this simple formula: $Price * $Quantity Now we need to pull these items into the Invoices table so that the Custom Widget gets access to them. Set the Items column to the formula Items.lookupRecords() , and then reset its column type to be Any . This formula needs a little more work, which we\u2019ll do soon, but let\u2019s just start with that. Great, our invoice is updating nicely! Remove the Total column to get an automatically calculated one: It is probably more comfortable to edit invoices as a Card Widget than a Table Widget, so let\u2019s change that using Widget options , Table , Change Widget , Card , Save . You can customize the card layout to your taste. To add a new invoice, click the little + above the invoices card, set an Issued date, and pick either the existing Client or add a new one. Once we have a second invoice, it becomes clear we skimped on the formula for collecting invoice items - all the invoices contain all the items. No problem, we can get more specific by adding an Invoice column to Items and setting it up to refer to specific Invoices : Once that is done we can sprinkle on some Grist fairy dust, and go to Widget options for the ITEMS Table Widget, click Change Widget , and set SELECT BY to INVOICES Card . Once that is saved, only the items for the currently selected invoice are shown. Even better, when you add new items, the invoice column is automatically set to the invoice you are viewing. So you can just hide the invoice column and forget about it. Now let the Custom Widget know what items to use by updating the Items formula to be more picky: Items.lookupRecords(Invoice=$id) With that, entering new invoices is a breeze! Click + to add a new invoice card. Pick the client, set the issue date. Add items. Done! Final polish # You can adjust the set-up to taste. For example, I would choose to add new clients on a separate page ( B or Businesses on the left panel) since that is relatively infrequent; you could choose to keep that on the same page. I don\u2019t need deductions or taxes, if you do you could add columns and/or formulas for those. The invoice custom widget works for me as is, but if I needed to tweak anything I could copy the GitHub repository it is in and change it a bit (or hire a web developer to do that for me - they don\u2019t need to be Grist experts). For interested developers, the GitHub code is here: https://github.com/gristlabs/grist-widget/tree/master/invoices . Enjoy, and good luck getting paid!","title":"Prepare Invoices"},{"location":"examples/2020-08-invoices/#preparing-invoices","text":"If you are keeping records of who is charged what in Grist, it can be convenient to generate invoices right there and then beside those records. This tutorial shows you how to set up a document like this: You can find a finished template at https://templates.getgrist.com/9NH6D58FmxwP/Invoicing . If you\u2019d like to add invoices to an existing document, making them work the way you want, understanding this tutorial should get you there.","title":"Preparing invoices"},{"location":"examples/2020-08-invoices/#setting-up-an-invoice-table","text":"First of all, make a table to record invoices by creating an empty document and renaming Table1 to Invoices : Now, let\u2019s add a widget beside the table to view the finished invoices. There are all sorts of possible styles of invoice, so Grist lets web developers create their own using Custom Widgets. We\u2019ll use an example invoice style published by Grist, but if it doesn\u2019t match your needs any web developer could tweak it for you. Click on Add New , then Add Widget to Page . Then: For Select Widget choose Custom since we\u2019ll be using a Custom Widget. For Select Data choose Invoices since we\u2019ll be viewing data from the invoices table. For Select By choose INVOICES so that the Custom Widget will show data from whatever invoice is currently selected by the user. Great, now we have two widgets, a Table Widget that will have invoice data, and a Custom Widget that will view that data as a nicely formatted, printable invoice. The Custom Widget starts off blank; select Widget options to specify what we want in it: In the CUSTOM settings section where it says Full URL of webpage to show , put this link: https://gristlabs.github.io/grist-widget/invoices/ And set Access to read table . This grants the Custom Widget access to read the Invoices table. Now place anything you like in a row of the Invoices table (I just added the number 1 ). An incomplete invoice will immediately show up: The incomplete invoice shows what column names to use to control what parts of the invoice. An extra black box shows what columns the widget understands, what columns it is ignoring, and what extra columns the widget could make use of. Currently it is saying that it doesn\u2019t recognize any of the columns present, is expecting columns like Number , Client , Items , etc., and is ignoring the default A , B , and C columns in the Invoices table. Looking at the start of the invoice we see a space for an invoice number, INVOICE NUMBER: #Number . So let\u2019s rename the A column to Number , we could leave the value as 1, but then it looks like we haven\u2019t done much business yet. I\u2019m going to choose the set the invoice number to be $id + 51371 , where $id is an auto-incrementing numeric identifier assigned to each row. But you could set it manually or with a different formula. As soon as it is set, the invoice updates: The next column the help box suggests is Client , so let\u2019s rename the B column to Client . Later we will give client information in a structured way, but for now let\u2019s just put some text here (use Shift + Enter to insert line breaks): Great, now the Client box is filled out. The next suggested column is Items , so let\u2019s rename the C column to Items . Later we will give item information in a structured way, but for now let\u2019s just put some text here: And now the Description is set. We\u2019re missing a total, so let\u2019s add a column called Total and set it to 100 : The invoice won\u2019t update immediately. This is the first new column we\u2019ve added - until now we\u2019ve been renaming them. When we created the Custom Widget, it was given access to the columns that existed at the time of creation. To let the widget see the new column, open Widget options again and move Total from Hidden Columns to Visible Columns : Great, the invoice updated. Now let\u2019s set who the invoice is from, by adding an Invoicer column (remember to make it visible to the widget via Widget options ). As a last step to creating a usable invoice, let\u2019s make an Issued column and put today\u2019s date in it (remember to make it visible to the widget via Widget options ). As soon as the invoice has a date, the black help box will disappear: Okay! If someone sent me that, I\u2019d pay it. You should nudge me by giving it a due date though. Let\u2019s make a Due column and set it to a month from the Issued date. Remember to make the Due column visible to the widget via Widget options . Also, be sure to set the Column Type for Issued to Date or you won\u2019t be able to do date math on it (it will just be a string). If there are special instructions to go with the invoice, we can add a Note column. Remember to make it visible to the widget via Widget options .","title":"Setting up an invoice table"},{"location":"examples/2020-08-invoices/#entering-client-information","text":"Now, let\u2019s make two useful changes to the invoice set-up: Put client information in a separate table, so we don\u2019t have to reenter their address every time we invoice them (and we can import the addresses in bulk). Enter items and prices in a table, so multi-item invoices are easy to make (and we can use formulas and look-ups for pricing if we like). Before doing so, we need to let Grist know that the content of the invoice will depend on these other tables, so that it can update it when something changes, and make sure the invoice gets access to everything it needs. Make a column named References and give it this formula: = RECORD(rec, expand_refs=1) That says \u201ctake the current record, and package it up, including everything it references directly\u201d. Since Grist is a spreadsheet, it also implies \u201cupdate everything that depends on this column if anything in the references changes\u201d. Remember to make the References column visible to the widget via Widget options , so that the widget will get updated as we add and change referenced material. When the invoice widget sees a column named \u201cReferences\u201d, it fills out the invoice using the \u201cpackaged\u201d values in that column, rather than the individual invoice fields. The benefit will be seen in the next step, since these packaged values can include data from related records. Next let\u2019s place client information in a separate table. Add a new table to the page for entering business information by clicking on Add New , Add Widget to Page , then Select Widget > Table and Select Data > New Table : Then rename the table to Businesses . Let\u2019s also empty the Client column so we can see help about what the widget expects there: The widget suggests Name , Street1 , Street2 , City , State and Zip columns. So let\u2019s provide those columns in our Businesses table, and fill them in for an example client. Then place the same Name in the Client column, and in Column options set the Column Type to Reference . Refer to Businesses Name if Grist doesn\u2019t automatically guess that. Once you hit Apply , you will see a nicely formatted Client section.","title":"Entering client information"},{"location":"examples/2020-08-invoices/#entering-invoicer-information","text":"We could do the same thing for the Invoicer column as we did for the Client column, and make it a reference to the Businesses table or a separate table. However, if you will always be using the same name and address for your business, you could skip setting up a reference by entering a formula like this into the Invoicer column (start typing with = to make it a formula): { \"Name\": \"Thunderous Applause\", \"Street1\": \"6502 Automated Rd\", \"City\": \"New York\", \"State\": \"NY\", \"Zip\": \"10003\", \"Email\": \"applause@thunder.com\", \"Phone\": \"+1-800-YAY-YAYS\", \"Website\": \"applause.com\" } Then set the Column Type for Invoicer to Any in the right-side panel. Notice how emails, phone numbers, and links are specially formatted by the widget.","title":"Entering invoicer information"},{"location":"examples/2020-08-invoices/#entering-item-information","text":"Now, let\u2019s set up the list of items and prices that is at the heart of an invoice. Clear the Items column to see what we can put there. It will show that Items can be a list, where each item has a Description , Price , Quantity , and Total . So we go ahead and add an Items table like we added Businesses , and give it those four columns. We can set Total to be this simple formula: $Price * $Quantity Now we need to pull these items into the Invoices table so that the Custom Widget gets access to them. Set the Items column to the formula Items.lookupRecords() , and then reset its column type to be Any . This formula needs a little more work, which we\u2019ll do soon, but let\u2019s just start with that. Great, our invoice is updating nicely! Remove the Total column to get an automatically calculated one: It is probably more comfortable to edit invoices as a Card Widget than a Table Widget, so let\u2019s change that using Widget options , Table , Change Widget , Card , Save . You can customize the card layout to your taste. To add a new invoice, click the little + above the invoices card, set an Issued date, and pick either the existing Client or add a new one. Once we have a second invoice, it becomes clear we skimped on the formula for collecting invoice items - all the invoices contain all the items. No problem, we can get more specific by adding an Invoice column to Items and setting it up to refer to specific Invoices : Once that is done we can sprinkle on some Grist fairy dust, and go to Widget options for the ITEMS Table Widget, click Change Widget , and set SELECT BY to INVOICES Card . Once that is saved, only the items for the currently selected invoice are shown. Even better, when you add new items, the invoice column is automatically set to the invoice you are viewing. So you can just hide the invoice column and forget about it. Now let the Custom Widget know what items to use by updating the Items formula to be more picky: Items.lookupRecords(Invoice=$id) With that, entering new invoices is a breeze! Click + to add a new invoice card. Pick the client, set the issue date. Add items. Done!","title":"Entering item information"},{"location":"examples/2020-08-invoices/#final-polish","text":"You can adjust the set-up to taste. For example, I would choose to add new clients on a separate page ( B or Businesses on the left panel) since that is relatively infrequent; you could choose to keep that on the same page. I don\u2019t need deductions or taxes, if you do you could add columns and/or formulas for those. The invoice custom widget works for me as is, but if I needed to tweak anything I could copy the GitHub repository it is in and change it a bit (or hire a web developer to do that for me - they don\u2019t need to be Grist experts). For interested developers, the GitHub code is here: https://github.com/gristlabs/grist-widget/tree/master/invoices . Enjoy, and good luck getting paid!","title":"Final polish"},{"location":"examples/2020-09-payroll/","text":"Tracking Payroll # If you have employees, then you are keeping track of payroll. You may be using a payroll service, and it probably asks you to enter hours for each employee once a month. This is where Grist can help you keep track of things conveniently, and to reduce mistakes, especially if you have part-time employees. The Payroll Template # The finished template is here: https://templates.getgrist.com/5pHLanQNThxk/Payroll . Feel free to open it in a separate window, and try things yourself as you go along. The template addresses a few needs: We need to be able to add employees, and keep basic contact info for them. We need to set rates at which people are paid, and these rates can change over time. In our example, rates also vary by role: the same person could work as an Instructor in one program, and as a Coordinator in another, at different rates. We need to enter hours for each person. We need to get the monthly totals, both to enter data into our payroll service, and to verify that everything matches. The \u201cPeople\u201d Page # Let\u2019s start with the \u201cPeople\u201d tab in the example. It addresses our needs (1), (2), and (3). On top, we have a list of people, with contact info such as address and phone number. To add a new person, click into the last row of the PEOPLE table, and type in the data. Below that we have a card for the selected person \u2013 a handy way to view or update the selected person\u2019s record. Next to that are the rates for this person. We keep track of all rates, not only the latest one, along with each rate\u2019s effective date. To add a new rate, select a person, click into the last row of the RATES table, and enter the effective date into the Rate Start column (perhaps using the shortcut for today\u2019s date: \u2318 + ; (semicolon) on Mac or Ctrl + ; on Windows). Set the Role that it applies to, and the Hourly Rate . The Comment field is for your own notes. Don\u2019t modify values for existing rates, or past payroll computations will be affected. When you give someone a raise, add it as a new row. This way, full history is preserved, and is available for reference. The \u201cPayroll\u201d Page # To enter payroll hours, switch to the \u201cPayroll\u201d page. It is the most common task, so we placed this page first in the list of pages to have it open by default when you open the document. Scroll to the bottom (you can use these handy shortcuts: \u2318 \u2193 on Mac, Ctrl + \u2193 on Windows). To add a payroll entry, type in the date (or use the date picker), select the person using auto-complete, select their role, and type in their hours. The next few columns automatically look up the relevant rate, and calculate the payment. If you\u2019d like to enter hours for a range of dates, e.g. for a particular week, or for someone working full-time this month, you can use Date as the start date, and enter also an End Date . The interesting bit about this page is how the Per Hour rate is looked up. You don\u2019t need to care if you are just using the template, but if you enjoy looking under the hood, or if you need to customize this further to your needs, I\u2019ll explain it in detail below. The \u201cPay Periods\u201d Page # Here the totals for each period are automatically tallied up to address our need (5) \u2014 to see an overview, to enter data into a payroll system, and to check that everything matches. The latest pay period (in our case, a month) is on top of the top-left table. You can select any pay period there to see a pie chart with an overview of pay broken down by role, and a table of how much each person earned that month. The names and hours in the last table are typically all that a payroll service needs. In addition, we included a Dates column summarizing dates worked that month: for people working part time, it helps remember when the income was earned. It could be a handy note to include into a pay stub if your payroll service allows it. That\u2019s it! We now have a convenient and simple payroll tracker. Under the hood # I promised to show how rates are looked up. Open up the \u201cPayroll\u201d page, click on any cell in the Per Hour column, and hit Enter . The formula you see is an involved Python function, but it is intentionally broken up into bits, with comments explaining what each line does: # Get all the rates for the Person and Role in this row. rates = Rates.lookupRecords(Person=$Person, Role=$Role) # Pick out only those rates whose Rate_Start is on or before this row's Date. past_rates = [r for r in rates if r.Rate_Start <= $Date] # Select the latest of past_rates, i.e. maximum by Rate_Start. current_rate = max(past_rates, key=lambda r: r.Rate_Start) # Return the Hourly_Rate from the relevant Rates record. return current_rate.Hourly_Rate (If this seems too complicated, good luck trying to achieve the same in a traditional spreadsheet!) Read the comments in that code to understand the steps. For those who know Python, it may already make perfect sense. For those who don\u2019t, here are the relevant links to Grist and Python documentation: lookupRecords : how we look up all rates for the given person and role. list comprehensions : how we filter for only those rates with an earlier Rate_Start . max function : how we choose the rate record with the latest Rate_Start . .Field : how we get the Hourly_Rate field from the rate record. This formula is also a good illustration of how helpful it is to have Python available, along with multi-line formulas, variables, and comments. Using the Payroll template # To start using this example for your own payroll, start with the template: GO TO TEMPLATE then click \u201cSave Copy\u201d: Then mark the \u201cAs Template\u201d checkbox. Your copy will then include all the structure, logic, and layouts of the Payroll document with none of the sample data.","title":"Track Payroll"},{"location":"examples/2020-09-payroll/#tracking-payroll","text":"If you have employees, then you are keeping track of payroll. You may be using a payroll service, and it probably asks you to enter hours for each employee once a month. This is where Grist can help you keep track of things conveniently, and to reduce mistakes, especially if you have part-time employees.","title":"Tracking Payroll"},{"location":"examples/2020-09-payroll/#the-payroll-template","text":"The finished template is here: https://templates.getgrist.com/5pHLanQNThxk/Payroll . Feel free to open it in a separate window, and try things yourself as you go along. The template addresses a few needs: We need to be able to add employees, and keep basic contact info for them. We need to set rates at which people are paid, and these rates can change over time. In our example, rates also vary by role: the same person could work as an Instructor in one program, and as a Coordinator in another, at different rates. We need to enter hours for each person. We need to get the monthly totals, both to enter data into our payroll service, and to verify that everything matches.","title":"The Payroll Template"},{"location":"examples/2020-09-payroll/#the-people-page","text":"Let\u2019s start with the \u201cPeople\u201d tab in the example. It addresses our needs (1), (2), and (3). On top, we have a list of people, with contact info such as address and phone number. To add a new person, click into the last row of the PEOPLE table, and type in the data. Below that we have a card for the selected person \u2013 a handy way to view or update the selected person\u2019s record. Next to that are the rates for this person. We keep track of all rates, not only the latest one, along with each rate\u2019s effective date. To add a new rate, select a person, click into the last row of the RATES table, and enter the effective date into the Rate Start column (perhaps using the shortcut for today\u2019s date: \u2318 + ; (semicolon) on Mac or Ctrl + ; on Windows). Set the Role that it applies to, and the Hourly Rate . The Comment field is for your own notes. Don\u2019t modify values for existing rates, or past payroll computations will be affected. When you give someone a raise, add it as a new row. This way, full history is preserved, and is available for reference.","title":"The \"People\" Page"},{"location":"examples/2020-09-payroll/#the-payroll-page","text":"To enter payroll hours, switch to the \u201cPayroll\u201d page. It is the most common task, so we placed this page first in the list of pages to have it open by default when you open the document. Scroll to the bottom (you can use these handy shortcuts: \u2318 \u2193 on Mac, Ctrl + \u2193 on Windows). To add a payroll entry, type in the date (or use the date picker), select the person using auto-complete, select their role, and type in their hours. The next few columns automatically look up the relevant rate, and calculate the payment. If you\u2019d like to enter hours for a range of dates, e.g. for a particular week, or for someone working full-time this month, you can use Date as the start date, and enter also an End Date . The interesting bit about this page is how the Per Hour rate is looked up. You don\u2019t need to care if you are just using the template, but if you enjoy looking under the hood, or if you need to customize this further to your needs, I\u2019ll explain it in detail below.","title":"The \"Payroll\" Page"},{"location":"examples/2020-09-payroll/#the-pay-periods-page","text":"Here the totals for each period are automatically tallied up to address our need (5) \u2014 to see an overview, to enter data into a payroll system, and to check that everything matches. The latest pay period (in our case, a month) is on top of the top-left table. You can select any pay period there to see a pie chart with an overview of pay broken down by role, and a table of how much each person earned that month. The names and hours in the last table are typically all that a payroll service needs. In addition, we included a Dates column summarizing dates worked that month: for people working part time, it helps remember when the income was earned. It could be a handy note to include into a pay stub if your payroll service allows it. That\u2019s it! We now have a convenient and simple payroll tracker.","title":"The \"Pay Periods\" Page"},{"location":"examples/2020-09-payroll/#under-the-hood","text":"I promised to show how rates are looked up. Open up the \u201cPayroll\u201d page, click on any cell in the Per Hour column, and hit Enter . The formula you see is an involved Python function, but it is intentionally broken up into bits, with comments explaining what each line does: # Get all the rates for the Person and Role in this row. rates = Rates.lookupRecords(Person=$Person, Role=$Role) # Pick out only those rates whose Rate_Start is on or before this row's Date. past_rates = [r for r in rates if r.Rate_Start <= $Date] # Select the latest of past_rates, i.e. maximum by Rate_Start. current_rate = max(past_rates, key=lambda r: r.Rate_Start) # Return the Hourly_Rate from the relevant Rates record. return current_rate.Hourly_Rate (If this seems too complicated, good luck trying to achieve the same in a traditional spreadsheet!) Read the comments in that code to understand the steps. For those who know Python, it may already make perfect sense. For those who don\u2019t, here are the relevant links to Grist and Python documentation: lookupRecords : how we look up all rates for the given person and role. list comprehensions : how we filter for only those rates with an earlier Rate_Start . max function : how we choose the rate record with the latest Rate_Start . .Field : how we get the Hourly_Rate field from the rate record. This formula is also a good illustration of how helpful it is to have Python available, along with multi-line formulas, variables, and comments.","title":"Under the hood"},{"location":"examples/2020-09-payroll/#using-the-payroll-template","text":"To start using this example for your own payroll, start with the template: GO TO TEMPLATE then click \u201cSave Copy\u201d: Then mark the \u201cAs Template\u201d checkbox. Your copy will then include all the structure, logic, and layouts of the Payroll document with none of the sample data.","title":"Using the Payroll template"},{"location":"examples/2020-10-print-labels/","text":"Printing Mailing Labels # Do you ever print mailing labels? Typically, it involves a few steps, first exporting addresses, then importing them into Word or other software that can lay them out for a particular type of label. If you maintain addresses in Grist \u2013 or use labels for name tags, storage containers, child belongings, or other creative uses \u2013 you can add a custom widget to have your printable labels available at the click of a button. Ready-made Template # Let me first share a template. Later I\u2019ll describe how to add the same functionality to an existing document, e.g. to add mailing labels alongside CRM or Payroll data. The template is at: https://templates.getgrist.com/9nNr9uQwoXWA/Print-Mailing-Labels . You can use it right away. Simply type in your own addresses. The template shows a few variations of what you can do. Labels for a table of addresses # That\u2019s what you see in the first page: You can use the dropdown on top of the labels widget to select the size of the labels, depending on what actual label paper you are planning to print on. What\u2019s actually printed is a hidden column named LabelText . If you show this column, or find it in the \u201cAddresses\u201d page (where it\u2019s visible), you\u2019ll see that it\u2019s a formula that stitches together all the parts of an address. (We get into the details of this formula below.) To print the labels, select \u201cPrint widget\u201d from the menu above the labels widget (see also Printing Notes below): A sheet of labels for the same address # If you need many identical labels, e.g. for a return address, add another column named LabelCount . This is illustrated in the page \u201cLabel Sheets\u201d. If you have multiple addresses in the table, and want to print just one, simply set the count to zero for the addresses you don\u2019t want to include. A filtered list of labels # There are a few ways in which you can print out only a few labels out of a larger table, and these are illustrated in the linked template: The \u201cAddress Labels\u201d page includes a filter button for State , which allows simple filtering by state. You can click + button to easily create additional filters like this: To print out only a few labels out of a larger table, you can use the LabelCount column with a formula. This formula can produce 1 for a label that should be included, or 0 for a label that should not. The page \u201cFiltered By Formula\u201d shows an example, with the simple formula that includes only California addresses: IF($State == \"CA\", 1, 0) : The \u201cFiltered Manually\u201d page includes a Select for Print column. Click any toggle to include the corresponding row into the label sheet. GO TO TEMPLATE Adding Labels to Your Document # If you have a document with addresses, you can add a page with mailing labels, and the labels will be there \u2013 up-to-date and waiting for you \u2013 any time you open it. I\u2019ll assume that you already have a page that shows a table with addresses. Perhaps it\u2019s called \u201cPeople\u201d, \u201cClients\u201d, or \u201cEmployees\u201d. Open the menu next to the page name in the left panel, and click \u201cDuplicate\u201d: This gives you a new page. We\u2019ll add the labels here, to avoid taking up screen space in the page you used for other purposes. Add the LabelText formula # Next, add a column to the table with addresses, and name it LabelText . Type a formula into it that produces an address formatted into multiple lines. Here is an example, but you may need to rename, add, or remove fields depending on the names of your columns: \"%s\\n%s %s\\n%s, %s %s\" % ($Name, $Street1, $Street2, $City, $State, $Zip) Note that this is Python syntax for formatting strings. Here is a brief guide to decode this: Each %s gets replaced with the next value from the parenthesized list after % . \\n inserts a newline. $Name etc. are Grist variables corresponding to fields of the current record. Add the Custom Widget # Click Add New button and select Add Widget to Page . In the dialog that appears select widget Custom and the table that contains the addresses: Click Add to Page . Open the menu above the widget and select \u201cWidget Options\u201d: In the right-side panel that opens, in the \u201cCustom\u201d section, enter the URL of the widget that implements the mailing labels functionality: https://gristlabs.github.io/grist-widget/printlabels/ Then change the \u201cAccess\u201d dropdown from none to read table . You should now see your labels! If not, check that LabelText is listed below under \u201cVisible Columns\u201d. (If it\u2019s under \u201cHidden Columns\u201d, click the \u201ceye\u201d icon to make it visible to the widget.) You can add another column named LabelCount for printing multiple labels or omitting some labels. If you do, just be sure to add it to \u201cVisible Columns\u201d of the Custom Widget, as those are the only columns available to it. Set Preferred Label Size # The labels widget remembers the last label size you picked. If you\u2019d like it instead to open to a fixed size every time, you can add the preferred size in the widget URL (in the right-side panel), e.g.: https://gristlabs.github.io/grist-widget/printlabels/#labels10 The available sizes are labels8 , labels10 , labels20 , labels30 , labels60 , and labels80 , each of which corresponds to a standard type of label paper (all based on US Letter paper size). In the example document, this is illustrated in the widget on the \u201cFiltered\u201d page. Printing Notes # The widget uses the browser for printing. To match the exact sizes of the label paper, double-check that you don\u2019t have any settings that would change the scaling, and check Print Preview before printing. If there is a scale set, it should be \u201c100%\u201d, and options such as \u201cIgnore Scaling and Shrink to Fit Page Width\u201d should be off. Further Customization # This feature is built using Custom Widgets . It allows you, or a third-party developer, to customize it further using HTML, CSS, and Javascript. For interested developers, the code for this widget is available at https://github.com/gristlabs/grist-widget/tree/master/printlabels .","title":"Print mailing labels"},{"location":"examples/2020-10-print-labels/#printing-mailing-labels","text":"Do you ever print mailing labels? Typically, it involves a few steps, first exporting addresses, then importing them into Word or other software that can lay them out for a particular type of label. If you maintain addresses in Grist \u2013 or use labels for name tags, storage containers, child belongings, or other creative uses \u2013 you can add a custom widget to have your printable labels available at the click of a button.","title":"Printing Mailing Labels"},{"location":"examples/2020-10-print-labels/#ready-made-template","text":"Let me first share a template. Later I\u2019ll describe how to add the same functionality to an existing document, e.g. to add mailing labels alongside CRM or Payroll data. The template is at: https://templates.getgrist.com/9nNr9uQwoXWA/Print-Mailing-Labels . You can use it right away. Simply type in your own addresses. The template shows a few variations of what you can do.","title":"Ready-made Template"},{"location":"examples/2020-10-print-labels/#labels-for-a-table-of-addresses","text":"That\u2019s what you see in the first page: You can use the dropdown on top of the labels widget to select the size of the labels, depending on what actual label paper you are planning to print on. What\u2019s actually printed is a hidden column named LabelText . If you show this column, or find it in the \u201cAddresses\u201d page (where it\u2019s visible), you\u2019ll see that it\u2019s a formula that stitches together all the parts of an address. (We get into the details of this formula below.) To print the labels, select \u201cPrint widget\u201d from the menu above the labels widget (see also Printing Notes below):","title":"Labels for a table of addresses"},{"location":"examples/2020-10-print-labels/#a-sheet-of-labels-for-the-same-address","text":"If you need many identical labels, e.g. for a return address, add another column named LabelCount . This is illustrated in the page \u201cLabel Sheets\u201d. If you have multiple addresses in the table, and want to print just one, simply set the count to zero for the addresses you don\u2019t want to include.","title":"A sheet of labels for the same address"},{"location":"examples/2020-10-print-labels/#a-filtered-list-of-labels","text":"There are a few ways in which you can print out only a few labels out of a larger table, and these are illustrated in the linked template: The \u201cAddress Labels\u201d page includes a filter button for State , which allows simple filtering by state. You can click + button to easily create additional filters like this: To print out only a few labels out of a larger table, you can use the LabelCount column with a formula. This formula can produce 1 for a label that should be included, or 0 for a label that should not. The page \u201cFiltered By Formula\u201d shows an example, with the simple formula that includes only California addresses: IF($State == \"CA\", 1, 0) : The \u201cFiltered Manually\u201d page includes a Select for Print column. Click any toggle to include the corresponding row into the label sheet. GO TO TEMPLATE","title":"A filtered list of labels"},{"location":"examples/2020-10-print-labels/#adding-labels-to-your-document","text":"If you have a document with addresses, you can add a page with mailing labels, and the labels will be there \u2013 up-to-date and waiting for you \u2013 any time you open it. I\u2019ll assume that you already have a page that shows a table with addresses. Perhaps it\u2019s called \u201cPeople\u201d, \u201cClients\u201d, or \u201cEmployees\u201d. Open the menu next to the page name in the left panel, and click \u201cDuplicate\u201d: This gives you a new page. We\u2019ll add the labels here, to avoid taking up screen space in the page you used for other purposes.","title":"Adding Labels to Your Document"},{"location":"examples/2020-10-print-labels/#add-the-labeltext-formula","text":"Next, add a column to the table with addresses, and name it LabelText . Type a formula into it that produces an address formatted into multiple lines. Here is an example, but you may need to rename, add, or remove fields depending on the names of your columns: \"%s\\n%s %s\\n%s, %s %s\" % ($Name, $Street1, $Street2, $City, $State, $Zip) Note that this is Python syntax for formatting strings. Here is a brief guide to decode this: Each %s gets replaced with the next value from the parenthesized list after % . \\n inserts a newline. $Name etc. are Grist variables corresponding to fields of the current record.","title":"Add the LabelText formula"},{"location":"examples/2020-10-print-labels/#add-the-custom-widget","text":"Click Add New button and select Add Widget to Page . In the dialog that appears select widget Custom and the table that contains the addresses: Click Add to Page . Open the menu above the widget and select \u201cWidget Options\u201d: In the right-side panel that opens, in the \u201cCustom\u201d section, enter the URL of the widget that implements the mailing labels functionality: https://gristlabs.github.io/grist-widget/printlabels/ Then change the \u201cAccess\u201d dropdown from none to read table . You should now see your labels! If not, check that LabelText is listed below under \u201cVisible Columns\u201d. (If it\u2019s under \u201cHidden Columns\u201d, click the \u201ceye\u201d icon to make it visible to the widget.) You can add another column named LabelCount for printing multiple labels or omitting some labels. If you do, just be sure to add it to \u201cVisible Columns\u201d of the Custom Widget, as those are the only columns available to it.","title":"Add the Custom Widget"},{"location":"examples/2020-10-print-labels/#set-preferred-label-size","text":"The labels widget remembers the last label size you picked. If you\u2019d like it instead to open to a fixed size every time, you can add the preferred size in the widget URL (in the right-side panel), e.g.: https://gristlabs.github.io/grist-widget/printlabels/#labels10 The available sizes are labels8 , labels10 , labels20 , labels30 , labels60 , and labels80 , each of which corresponds to a standard type of label paper (all based on US Letter paper size). In the example document, this is illustrated in the widget on the \u201cFiltered\u201d page.","title":"Set Preferred Label Size"},{"location":"examples/2020-10-print-labels/#printing-notes","text":"The widget uses the browser for printing. To match the exact sizes of the label paper, double-check that you don\u2019t have any settings that would change the scaling, and check Print Preview before printing. If there is a scale set, it should be \u201c100%\u201d, and options such as \u201cIgnore Scaling and Shrink to Fit Page Width\u201d should be off.","title":"Printing Notes"},{"location":"examples/2020-10-print-labels/#further-customization","text":"This feature is built using Custom Widgets . It allows you, or a third-party developer, to customize it further using HTML, CSS, and Javascript. For interested developers, the code for this widget is available at https://github.com/gristlabs/grist-widget/tree/master/printlabels .","title":"Further Customization"},{"location":"examples/2020-11-treasure-hunt/","text":"Planning a Treasure Hunt # A treasure hunt is a fun party diversion that goes like this: All the players (the \u201cseekers\u201d) listen to a clue for a location, then set out to find it. When seekers find the location, they discover another clue there to read. Each clue leads to a new location, until finally instead of a clue the seeker finds a treasure! Seekers can be paired up in teams as needed, depending on their age. The hunt really rewards preparation, and Grist can help with that. Here\u2019s an example hunt: You can play with the example yourself here: https://templates.getgrist.com/ihsZTnKTF7Lr/Treasure-Hunt Once ready to start your own completely fresh hunt just do \u201cSave Copy\u201d and select \u201cAs Template\u201d. Places # First, think of places to send the seekers. You\u2019re looking for places which have some special character or usage, and where there are some obvious nooks or crannies to hide a clue. The set of places should cover as much space as possible within your territory. It is fine to pick places that are close together, as long as someone searching for a clue around one of them wouldn\u2019t stray to the other. I personally take a certain sadistic pleasure in making seekers retrace their steps across the longest distance as often as possible. For example, in an apartment, posters and paintings can be good to hide clues behind, or visually distinctive books on a book shelf. For other spots like the kitchen sink or towel racks, you have to consider whether the clues will survive long enough to be found! Enter everywhere you think of in the \u201cPlaces\u201d widget in the Treasure Hunt document. Don\u2019t worry about their order just yet. Clues # Now that you\u2019ve thought of some places, brainstorm clues for them. In the Treasure Hunt document, click on a place that you\u2019ve added, and then try to think of at least one clue for it. Put those clues in the \u201cClues\u201d widget. This can be a good time to share the document around, since you never know who in your family is going to have the twisted mind it takes to come up with the quirkiest clues. Or maybe you do know. There\u2019s no need to restrict yourself to people who are going to be present. Especially this COVID-hit year, it can be a pleasure for people who know your space from the before-times but cannot be physically present to at least visualize it and propose devious hidey-holes to torture those who are. The Trail # Now that you\u2019ve got places and clues, all that is left is to assemble them into a sequential trail. You can do this in the \u201cTrail\u201d widget. Just start typing in the clue you want to start with, use the autocomplete to confirm it. Then move on to the next clue, in any order you like. Pick one clue per location. Grist will show where each clue needs to be hidden to make the sequence work, which is definitely not rocket science but still surprisingly easy to lose track of (especially for younger trail creators). It will also warn you if you\u2019ve repeated the same location twice. Printing # When your trail is ready, the document has a \u201cPrint\u201d page where you can print out the clues ready to hide, and the list of where to hide them if delegating this task to enthusiastic helpers. If the trail is outdoors, and it may rain, it is a good idea to wrap clues in aluminum foil or plastic. Ideas for places and clues are good to hang onto for future events, either as a Grist document or as a print-out. Enjoy the hunt, and if you come up with improvements to the spreadsheet please do let us know!","title":"Treasure Hunt"},{"location":"examples/2020-11-treasure-hunt/#planning-a-treasure-hunt","text":"A treasure hunt is a fun party diversion that goes like this: All the players (the \u201cseekers\u201d) listen to a clue for a location, then set out to find it. When seekers find the location, they discover another clue there to read. Each clue leads to a new location, until finally instead of a clue the seeker finds a treasure! Seekers can be paired up in teams as needed, depending on their age. The hunt really rewards preparation, and Grist can help with that. Here\u2019s an example hunt: You can play with the example yourself here: https://templates.getgrist.com/ihsZTnKTF7Lr/Treasure-Hunt Once ready to start your own completely fresh hunt just do \u201cSave Copy\u201d and select \u201cAs Template\u201d.","title":"Planning a Treasure Hunt"},{"location":"examples/2020-11-treasure-hunt/#places","text":"First, think of places to send the seekers. You\u2019re looking for places which have some special character or usage, and where there are some obvious nooks or crannies to hide a clue. The set of places should cover as much space as possible within your territory. It is fine to pick places that are close together, as long as someone searching for a clue around one of them wouldn\u2019t stray to the other. I personally take a certain sadistic pleasure in making seekers retrace their steps across the longest distance as often as possible. For example, in an apartment, posters and paintings can be good to hide clues behind, or visually distinctive books on a book shelf. For other spots like the kitchen sink or towel racks, you have to consider whether the clues will survive long enough to be found! Enter everywhere you think of in the \u201cPlaces\u201d widget in the Treasure Hunt document. Don\u2019t worry about their order just yet.","title":"Places"},{"location":"examples/2020-11-treasure-hunt/#clues","text":"Now that you\u2019ve thought of some places, brainstorm clues for them. In the Treasure Hunt document, click on a place that you\u2019ve added, and then try to think of at least one clue for it. Put those clues in the \u201cClues\u201d widget. This can be a good time to share the document around, since you never know who in your family is going to have the twisted mind it takes to come up with the quirkiest clues. Or maybe you do know. There\u2019s no need to restrict yourself to people who are going to be present. Especially this COVID-hit year, it can be a pleasure for people who know your space from the before-times but cannot be physically present to at least visualize it and propose devious hidey-holes to torture those who are.","title":"Clues"},{"location":"examples/2020-11-treasure-hunt/#the-trail","text":"Now that you\u2019ve got places and clues, all that is left is to assemble them into a sequential trail. You can do this in the \u201cTrail\u201d widget. Just start typing in the clue you want to start with, use the autocomplete to confirm it. Then move on to the next clue, in any order you like. Pick one clue per location. Grist will show where each clue needs to be hidden to make the sequence work, which is definitely not rocket science but still surprisingly easy to lose track of (especially for younger trail creators). It will also warn you if you\u2019ve repeated the same location twice.","title":"The Trail"},{"location":"examples/2020-11-treasure-hunt/#printing","text":"When your trail is ready, the document has a \u201cPrint\u201d page where you can print out the clues ready to hide, and the list of where to hide them if delegating this task to enthusiastic helpers. If the trail is outdoors, and it may rain, it is a good idea to wrap clues in aluminum foil or plastic. Ideas for places and clues are good to hang onto for future events, either as a Grist document or as a print-out. Enjoy the hunt, and if you come up with improvements to the spreadsheet please do let us know!","title":"Printing"},{"location":"examples/2020-12-map/","text":"Adding a Map # It can be useful sometimes to visualize lists of locations on a geographic map. Grist can do that if a table has at least a Name , Latitude , and Longitude column. Suppose we have a list of some of the largest objects in America: The first step to making a map for these is to add a Custom Widget to the page: Once we set the widget to be https://gristlabs.github.io/grist-widget/map/ and give it Read table access, a map should appear: Clicking around in the list of objects brings up the corresponding \u201cpop-up\u201d on the map. We can add other sections to taste, such as a detail \u201ccard\u201d view of the attraction\u2019s details. This example is available at https://public.getgrist.com/3boQPJrgFmFi/Large-in-America/m/fork . This example has some hidden columns related to geocoding (the process of automatically calculating coordinates from addresses). You can see these on the second page called Geocoding . They are Geocode , Address , and GeocodedAddress . If you would like to use geocoding, you\u2019ll need these three columns, and to grant the map widget full access to your document so it can store results. Address should hold exactly what you want to pass to the geocoder. In the example, it is simply \", \".join([$City, $State]) . The GeocodedAddress should be left untouched; it is a space for the geocoder to store information. Finally, Geocode is a toggle that should be turned on to automatically generate latitude and longitudes. The geocoder will not touch any rows with Geocode turned off. When Geocode is turned on for a row, latitudes and longitudes are computed and stored automatically for that row using Nominatim . Nominatim\u2019s Usage Policy allows for limited, non-bulk creative use. Robust geocoding generally requires an account with an external service and a secret API key. We expect to soon have a convenient way to store secrets in a document, and will then be able to support flexible geocoding options. If you are interested in previewing this feature, please get in touch! Finally, if you know some HTML/CSS/JS, or have a web developer on your team, you\u2019ll find the map custom widget simple to restyle as you like. If you need a hand, just let us know.","title":"Map"},{"location":"examples/2020-12-map/#adding-a-map","text":"It can be useful sometimes to visualize lists of locations on a geographic map. Grist can do that if a table has at least a Name , Latitude , and Longitude column. Suppose we have a list of some of the largest objects in America: The first step to making a map for these is to add a Custom Widget to the page: Once we set the widget to be https://gristlabs.github.io/grist-widget/map/ and give it Read table access, a map should appear: Clicking around in the list of objects brings up the corresponding \u201cpop-up\u201d on the map. We can add other sections to taste, such as a detail \u201ccard\u201d view of the attraction\u2019s details. This example is available at https://public.getgrist.com/3boQPJrgFmFi/Large-in-America/m/fork . This example has some hidden columns related to geocoding (the process of automatically calculating coordinates from addresses). You can see these on the second page called Geocoding . They are Geocode , Address , and GeocodedAddress . If you would like to use geocoding, you\u2019ll need these three columns, and to grant the map widget full access to your document so it can store results. Address should hold exactly what you want to pass to the geocoder. In the example, it is simply \", \".join([$City, $State]) . The GeocodedAddress should be left untouched; it is a space for the geocoder to store information. Finally, Geocode is a toggle that should be turned on to automatically generate latitude and longitudes. The geocoder will not touch any rows with Geocode turned off. When Geocode is turned on for a row, latitudes and longitudes are computed and stored automatically for that row using Nominatim . Nominatim\u2019s Usage Policy allows for limited, non-bulk creative use. Robust geocoding generally requires an account with an external service and a secret API key. We expect to soon have a convenient way to store secrets in a document, and will then be able to support flexible geocoding options. If you are interested in previewing this feature, please get in touch! Finally, if you know some HTML/CSS/JS, or have a web developer on your team, you\u2019ll find the map custom widget simple to restyle as you like. If you need a hand, just let us know.","title":"Adding a Map"},{"location":"examples/2021-01-tasks/","text":"Task Management for Teams # I used to be surprised to hear that many people prefer a spreadsheet over project management software. Why? Because it\u2019s simpler. Well, I agree! For the last year, we\u2019ve been using Grist internally to manage projects and tasks within Grist Labs. It feels dead simple, and it works great for us. Our Workflow # We have a small team, and regular scheduled check-ins. The goals for the check-ins are to go over all the work that was assigned, and to end up with a list of new assignments. After the check-in, everyone can see exactly what\u2019s expected of them for the next time. You can explore the example at https://public.getgrist.com/hik1whAV5snj/Task-Management/m/fork . Structure # The structure is simple. There are three tables: People , i.e. the team members, Check-Ins , identified by date, Tasks , each associated with a person and a check-in. We have one special \u201cperson\u201d named \u201cBacklog\u201d. That\u2019s our way of recording tasks that are not yet assigned to anyone. My Tasks # The page called Main shows all the check-ins, ordered with the latest one on top. When that one is selected, the TASKS table shows all the currently assigned tasks, sorted by person. That\u2019s where I look to remember what\u2019s next, and to have the pleasure of checking off a task as done whenever I\u2019m done with it. Check-ins # These days everyone is working remotely, so the check-ins are over Zoom. Everyone opens the \u201cCheck-Ins\u201d Grist document, and one person takes charge of making updates, and shares their screen for others to follow. First, create a record for today\u2019s check-in: click into the CHECK_INS table, and hit Ctrl + = ( \u2318 = on Mac) to add a new record, then Ctrl + ; ( \u2318 + ; on Mac) to insert today\u2019s date into it. Then click the second date (previous check-in) to go over previously assigned work. This is where we take turns going over the finished tasks. It\u2019s a chance to mark things as complete. If a task wasn\u2019t started, change the associated date to today\u2019s date \u2013 this will move the task. There is a field to record optional notes about the outcome. If a task was only partly done, we make a note of what got finished, mark it as complete, and make a new task in today\u2019s check-in for the remaining work. Any follow-up tasks are also created for today\u2019s check-in. By the end of it, all tasks still associated with the last check-in are marked as done. It\u2019s a satisfying record of everyone\u2019s work! Now, click the check-in for today. Any tasks that were moved, or follow-up tasks created will be here. This is a chance to create and assign new tasks, and to revisit the backlog. Backlog # Whenever a new task comes up (say a bug that needs fixing), anyone can add it to the latest check-in. It can be assigned to a person immediately, but if it\u2019s not urgent, it can be assigned to \u201cBacklog\u201d. During check-in, we go over any new backlog items and assign priority for them: just a number. There is a separate Backlog page to view all the backlog tasks, ordered by priority from highest to lowest. When assigning tasks during check-in, visit this page to see if there is anything high-priority that should be assigned. If anyone has spare bandwidth, there are usually plenty of smaller low-priority items that can be picked off as well. That\u2019s about all. The last page we use is called By Person , and it\u2019s just a helpful way to see all tasks completed and pending for any given person. It is a useful reference for quarterly reviews. Task Management Document # The example document is at https://public.getgrist.com/hik1whAV5snj/Task-Management/m/fork . It feels no more complicated than a To-Do list, and that\u2019s the point! To start using it for your own tasks, open the Share menu ( ), and click \u201cDuplicate Document\u2026\u201d. Give it a name and click the \u201cAs Template\u201d checkbox. Your copy will then include the structure and layouts with none of the sample data. Enjoy! May your tasks get done on time!","title":"Task Management"},{"location":"examples/2021-01-tasks/#task-management-for-teams","text":"I used to be surprised to hear that many people prefer a spreadsheet over project management software. Why? Because it\u2019s simpler. Well, I agree! For the last year, we\u2019ve been using Grist internally to manage projects and tasks within Grist Labs. It feels dead simple, and it works great for us.","title":"Task Management for Teams"},{"location":"examples/2021-01-tasks/#our-workflow","text":"We have a small team, and regular scheduled check-ins. The goals for the check-ins are to go over all the work that was assigned, and to end up with a list of new assignments. After the check-in, everyone can see exactly what\u2019s expected of them for the next time. You can explore the example at https://public.getgrist.com/hik1whAV5snj/Task-Management/m/fork .","title":"Our Workflow"},{"location":"examples/2021-01-tasks/#structure","text":"The structure is simple. There are three tables: People , i.e. the team members, Check-Ins , identified by date, Tasks , each associated with a person and a check-in. We have one special \u201cperson\u201d named \u201cBacklog\u201d. That\u2019s our way of recording tasks that are not yet assigned to anyone.","title":"Structure"},{"location":"examples/2021-01-tasks/#my-tasks","text":"The page called Main shows all the check-ins, ordered with the latest one on top. When that one is selected, the TASKS table shows all the currently assigned tasks, sorted by person. That\u2019s where I look to remember what\u2019s next, and to have the pleasure of checking off a task as done whenever I\u2019m done with it.","title":"My Tasks"},{"location":"examples/2021-01-tasks/#check-ins","text":"These days everyone is working remotely, so the check-ins are over Zoom. Everyone opens the \u201cCheck-Ins\u201d Grist document, and one person takes charge of making updates, and shares their screen for others to follow. First, create a record for today\u2019s check-in: click into the CHECK_INS table, and hit Ctrl + = ( \u2318 = on Mac) to add a new record, then Ctrl + ; ( \u2318 + ; on Mac) to insert today\u2019s date into it. Then click the second date (previous check-in) to go over previously assigned work. This is where we take turns going over the finished tasks. It\u2019s a chance to mark things as complete. If a task wasn\u2019t started, change the associated date to today\u2019s date \u2013 this will move the task. There is a field to record optional notes about the outcome. If a task was only partly done, we make a note of what got finished, mark it as complete, and make a new task in today\u2019s check-in for the remaining work. Any follow-up tasks are also created for today\u2019s check-in. By the end of it, all tasks still associated with the last check-in are marked as done. It\u2019s a satisfying record of everyone\u2019s work! Now, click the check-in for today. Any tasks that were moved, or follow-up tasks created will be here. This is a chance to create and assign new tasks, and to revisit the backlog.","title":"Check-ins"},{"location":"examples/2021-01-tasks/#backlog","text":"Whenever a new task comes up (say a bug that needs fixing), anyone can add it to the latest check-in. It can be assigned to a person immediately, but if it\u2019s not urgent, it can be assigned to \u201cBacklog\u201d. During check-in, we go over any new backlog items and assign priority for them: just a number. There is a separate Backlog page to view all the backlog tasks, ordered by priority from highest to lowest. When assigning tasks during check-in, visit this page to see if there is anything high-priority that should be assigned. If anyone has spare bandwidth, there are usually plenty of smaller low-priority items that can be picked off as well. That\u2019s about all. The last page we use is called By Person , and it\u2019s just a helpful way to see all tasks completed and pending for any given person. It is a useful reference for quarterly reviews.","title":"Backlog"},{"location":"examples/2021-01-tasks/#task-management-document","text":"The example document is at https://public.getgrist.com/hik1whAV5snj/Task-Management/m/fork . It feels no more complicated than a To-Do list, and that\u2019s the point! To start using it for your own tasks, open the Share menu ( ), and click \u201cDuplicate Document\u2026\u201d. Give it a name and click the \u201cAs Template\u201d checkbox. Your copy will then include the structure and layouts with none of the sample data. Enjoy! May your tasks get done on time!","title":"Task Management Document"},{"location":"examples/2021-03-leads/","text":"A lead table, with assignments # Access rules let you control how a shared document is used, and maintain a separation of roles and responsibilities. In this example, we suppose an entrepeneur is using Grist as an ad-hoc lead tracker for sales and potential advisors: Our entrepeneur wants to delegate sales leads to a small team of freelancers, and keep potential advisors private. They want to be able to assign someone to follow-up a lead just by writing their initials in an \u201cAssignment\u201d column, and not allow anyone else to change that assignment. Here are the rules they come up with, which you can see yourself by visiting the example : There are three blocks of rules. First, the rule for the Advisors table: This restricts all access to the Advisors table to the owner. We assume the document is owned by the entrepeneur, and shared with anyone else as an editor. Next, there are rules for the Leads table: We allow only the owner to update anything in the Name or Assignment column. We forbid anyone other than the owner from deleting a row of the Leads table. Then there are default rules, not specific to any table: We forbid anyone other than the owner from modifying the document\u2019s structure. The remaining rules here are just the default behavior of any document. There are also two special check-box rules, that would typically be turned off. They give special permission to view access rules and copy this document even if one normally wouldn\u2019t be allowed. These are useful exceptions for an example document with no sensitive information. To play with the document, it is best to make a copy and become its owner. Click \u201cSave Copy\u201d, and place the document in your Personal area or in a team site. Share the document with someone else as an editor and make sure they see what you expect . You\u2019ll want to turn off the \u201cSpecial Rules\u201d that allowed you to inspect the example and to make a complete copy of it: Remember to hit \u201cSave\u201d after you change rules, so they take effect. Per-user access # Suppose we now want to restrict the leads to be viewed only by the person they are assigned to (or by the owner). We can do that in several ways. One convenient way is to add a table listing team members, including their email address: Once we have such a table, we can make the Assignment column refer to it. See https://public.getgrist.com/vuPduz2UdJDi/Lead-list-with-team/m/fork for the complete example (you\u2019ll need to make a copy to get full access, otherwise you\u2019ll see a filtered view). We can then use the team members in rules, via a user attribute table : Then every user the document is shared with (other than owners) will see a filtered view of just those leads assigned to them: Read our introduction to access rules to learn more about what you can do with access rules.","title":"Lead List"},{"location":"examples/2021-03-leads/#a-lead-table-with-assignments","text":"Access rules let you control how a shared document is used, and maintain a separation of roles and responsibilities. In this example, we suppose an entrepeneur is using Grist as an ad-hoc lead tracker for sales and potential advisors: Our entrepeneur wants to delegate sales leads to a small team of freelancers, and keep potential advisors private. They want to be able to assign someone to follow-up a lead just by writing their initials in an \u201cAssignment\u201d column, and not allow anyone else to change that assignment. Here are the rules they come up with, which you can see yourself by visiting the example : There are three blocks of rules. First, the rule for the Advisors table: This restricts all access to the Advisors table to the owner. We assume the document is owned by the entrepeneur, and shared with anyone else as an editor. Next, there are rules for the Leads table: We allow only the owner to update anything in the Name or Assignment column. We forbid anyone other than the owner from deleting a row of the Leads table. Then there are default rules, not specific to any table: We forbid anyone other than the owner from modifying the document\u2019s structure. The remaining rules here are just the default behavior of any document. There are also two special check-box rules, that would typically be turned off. They give special permission to view access rules and copy this document even if one normally wouldn\u2019t be allowed. These are useful exceptions for an example document with no sensitive information. To play with the document, it is best to make a copy and become its owner. Click \u201cSave Copy\u201d, and place the document in your Personal area or in a team site. Share the document with someone else as an editor and make sure they see what you expect . You\u2019ll want to turn off the \u201cSpecial Rules\u201d that allowed you to inspect the example and to make a complete copy of it: Remember to hit \u201cSave\u201d after you change rules, so they take effect.","title":"A lead table, with assignments"},{"location":"examples/2021-03-leads/#per-user-access","text":"Suppose we now want to restrict the leads to be viewed only by the person they are assigned to (or by the owner). We can do that in several ways. One convenient way is to add a table listing team members, including their email address: Once we have such a table, we can make the Assignment column refer to it. See https://public.getgrist.com/vuPduz2UdJDi/Lead-list-with-team/m/fork for the complete example (you\u2019ll need to make a copy to get full access, otherwise you\u2019ll see a filtered view). We can then use the team members in rules, via a user attribute table : Then every user the document is shared with (other than owners) will see a filtered view of just those leads assigned to them: Read our introduction to access rules to learn more about what you can do with access rules.","title":"Per-user access"},{"location":"examples/2021-04-link-keys/","text":"Create Unique Links in 4 Steps # In Grist, \u201clink keys\u201d are URL parameters that when combined with the user.LinkKey variable in access rules will determine which data a link recipient is permitted to view. You can learn to do this in four easy steps. We\u2019ve created a simple template you can copy and edit as you follow along with this guide. In our example, you are a private tutor who uses Grist to track hours, payments, and client data. You would like to share session and payment history with parents via a link that only shows their family\u2019s data. A simple way to do that would be to set access rules that limit a link recipient\u2019s view to just those records tied to their family. Let\u2019s do that now. The private tutor can see all data, but a parent can only see their family\u2019s data. Step 1: Create a unique identifier # In the family\u2019s table, create a new column in which you will use Grist\u2019s UUID() function to generate and assign a unique key to each family. Convert the column to the data column to freeze its values, and set the default formula for new records to UUID() . This will ensure that new rows will also be assigned a unique identifier. Step 2: Connect UUID to records in other tables # In the Students, Sessions, and Payments tables, add a column that ties each record to the referenced family\u2019s UUID. Name these columns \u201cUUID\u201d, with the simple formula $Family.UUID . Not sure how this works? Brush up on Grist\u2019s powerful reference columns . Tip: The formula $Family.UUID gets the UUID from the record that is referenced in the Family column. Step 3: Create unique links # In the Families table, create a new column in which you will use Grist\u2019s SELF_HYPERLINK() function to generate hyperlinks. Use the formula SELF_HYPERLINK(LinkKey_UUID=$UUID) to create a link key called \u201cUUID\u201d that sets the URL parameter to a specific $UUID within a record. Convert the column type to Text > Hyperlink. How does this work? The link generated for \u201cRaddon, Fin\u201d is .../Private-Tutor-recUUID/p/9?UUID=6752c258-443d-4a2c-800d-1491da265b72 . The \u201clink key\u201d is the part of the URL that reads ?UUID_=6752c258-443d-4a2c-800d-1491da265b72 . Step 4: Create access rules # Open the Access Rules page from the left panel, and create rules to give limited access to your clients. Let\u2019s think about who should access each table, and which parts of it should be accessible. You, the owner of the document should have full access to Read (R), Update (U), Create (C) and Delete (D) records in each table. Add the rule user.Access in [OWNER] to each table to grant owners full access. Why user.Access ? Review access rule conditions to learn more. Parents viewing the document should have Read-Only access just to those records related to their family. In previous steps, we created a unique identifier (UUID) for each family, connected relevant records in all tables to a UUID, and generated URLs with link keys that include those UUIDs. Now we must create access rules that match UUIDs and URL link keys. To do so, add the rule user.LinkKey.UUID == rec.UUID to each table . This tells Grist to look at the URL\u2019s link key (named UUID) and match it to records that include that same UUID. Set access to Read-Only by clicking on the drop-down menu next to \u201cpermissions\u201d. Make sure Public Access is turned on in the \u201cManage Users\u201d panel (see Sharing ). Tip: Do not edit the default rules. Row-level access is granted in the relevant tables. You did it! This is just the beginning. There\u2019s a lot more you can do with link keys. Check out another example to deepen your understanding of link keys even more. Still need help? View the tutorial solution here . Make a copy to see all data:","title":"Link Keys Guide"},{"location":"examples/2021-04-link-keys/#create-unique-links-in-4-steps","text":"In Grist, \u201clink keys\u201d are URL parameters that when combined with the user.LinkKey variable in access rules will determine which data a link recipient is permitted to view. You can learn to do this in four easy steps. We\u2019ve created a simple template you can copy and edit as you follow along with this guide. In our example, you are a private tutor who uses Grist to track hours, payments, and client data. You would like to share session and payment history with parents via a link that only shows their family\u2019s data. A simple way to do that would be to set access rules that limit a link recipient\u2019s view to just those records tied to their family. Let\u2019s do that now. The private tutor can see all data, but a parent can only see their family\u2019s data.","title":"Create Unique Links in 4 Steps"},{"location":"examples/2021-04-link-keys/#step-1-create-a-unique-identifier","text":"In the family\u2019s table, create a new column in which you will use Grist\u2019s UUID() function to generate and assign a unique key to each family. Convert the column to the data column to freeze its values, and set the default formula for new records to UUID() . This will ensure that new rows will also be assigned a unique identifier.","title":"Step 1: Create a unique identifier"},{"location":"examples/2021-04-link-keys/#step-2-connect-uuid-to-records-in-other-tables","text":"In the Students, Sessions, and Payments tables, add a column that ties each record to the referenced family\u2019s UUID. Name these columns \u201cUUID\u201d, with the simple formula $Family.UUID . Not sure how this works? Brush up on Grist\u2019s powerful reference columns . Tip: The formula $Family.UUID gets the UUID from the record that is referenced in the Family column.","title":"Step 2: Connect UUID to records in other tables"},{"location":"examples/2021-04-link-keys/#step-3-create-unique-links","text":"In the Families table, create a new column in which you will use Grist\u2019s SELF_HYPERLINK() function to generate hyperlinks. Use the formula SELF_HYPERLINK(LinkKey_UUID=$UUID) to create a link key called \u201cUUID\u201d that sets the URL parameter to a specific $UUID within a record. Convert the column type to Text > Hyperlink. How does this work? The link generated for \u201cRaddon, Fin\u201d is .../Private-Tutor-recUUID/p/9?UUID=6752c258-443d-4a2c-800d-1491da265b72 . The \u201clink key\u201d is the part of the URL that reads ?UUID_=6752c258-443d-4a2c-800d-1491da265b72 .","title":"Step 3: Create unique links"},{"location":"examples/2021-04-link-keys/#step-4-create-access-rules","text":"Open the Access Rules page from the left panel, and create rules to give limited access to your clients. Let\u2019s think about who should access each table, and which parts of it should be accessible. You, the owner of the document should have full access to Read (R), Update (U), Create (C) and Delete (D) records in each table. Add the rule user.Access in [OWNER] to each table to grant owners full access. Why user.Access ? Review access rule conditions to learn more. Parents viewing the document should have Read-Only access just to those records related to their family. In previous steps, we created a unique identifier (UUID) for each family, connected relevant records in all tables to a UUID, and generated URLs with link keys that include those UUIDs. Now we must create access rules that match UUIDs and URL link keys. To do so, add the rule user.LinkKey.UUID == rec.UUID to each table . This tells Grist to look at the URL\u2019s link key (named UUID) and match it to records that include that same UUID. Set access to Read-Only by clicking on the drop-down menu next to \u201cpermissions\u201d. Make sure Public Access is turned on in the \u201cManage Users\u201d panel (see Sharing ). Tip: Do not edit the default rules. Row-level access is granted in the relevant tables. You did it! This is just the beginning. There\u2019s a lot more you can do with link keys. Check out another example to deepen your understanding of link keys even more. Still need help? View the tutorial solution here . Make a copy to see all data:","title":"Step 4: Create access rules"},{"location":"examples/2021-05-reference-columns/","text":"Reference Columns Guide # Mastering Reference Columns in 3 Steps # In Grist, reference columns are the key tool to organize relational data. Reference columns tell Grist that two separate tables are related, and specifies which records within those tables are related. For example, if you have a table of Dogs and a table of Dog Owners , you may want each dog\u2019s record to explicitly reference their owner\u2019s record in Dog Owners . Reference columns are a powerful tool for looking up data from a related table, and for creating highly productive layouts. You can learn to do this in three easy steps. We\u2019ve created a simple template you can copy and edit as you follow along with this guide. Using Reference Columns to Organize Related Data # In our example, you are a graphic designer applying for jobs, and you are using Grist to keep track of your job application process. In the template you have four tables: Job Applications , Milestones , Tasks , and Contacts . Your goal is to relate relevant data between tables and create a custom dashboard where you can easily view each job application\u2019s status, and add new job applications and new milestones easily. In this dashboard , clicking on each job application shows only the milestones related to that job application. We can create this relationship using reference columns. Let\u2019s create this dashboard together. Step 1: Creating References # Reference columns are a type of column available under COLUMN TYPE. It is helpful to think of the table with the reference column as the referencing table , and the table which is being referenced as the underlying table . Converting Columns with Text into Reference Columns # If you already have text in the selected column, set the COLUMN TYPE in the right-side panel to \u201cReference\u201d. Grist will guess the underlying table and column you want to show in the reference column. You can review and edit this guess and set the appropriate underlying table and display column. DATA FROM TABLE points to the underlying table. SHOW COLUMN sets the display value in the reference column. For example, in the Milestones table, convert the Role column into a reference column. DATA FROM TABLE should point to Job Applications . SHOW COLUMN should be set to Role . Note that the reference column is referencing the entire record and you are choosing which column to display in the reference column. Tip: You can easily identify reference columns by the chain link icons in the column\u2019s cells. Creating Reference Columns # In the Contacts table we have a list of contacts that are not associated with any job application or company. Let\u2019s create a new column called Company , set its type to Reference, and point to Job Applications as the underlying table with Company as the display in the reference column. Click on the empty cell to open a drop-down menu and manually select the company at which each contact works. Look at the email address for a hint. Note: You can always click on a Reference Column cell to open the drop-down menu and select a new value. Step 2: Look up additional data in the referenced record # Recall that the reference column is referencing another table, and correlating two specific records. Although you see a specific column in the display of the reference column, the reference is being made to the entire record . This allows us to look up additional data fields in the related record using a simple formula. Let\u2019s try it. In step 1, in the Milestones table we created a reference column called Role . It would be useful to also see for each Milestone record, the relevant company. For example, in row 1 we see the Milestone event \u201cRejected!\u201d for the role \u201cHead of Digital Design\u201d. It is not immediately apparent which company this is. Let\u2019s use the Role reference column to easily look up the company listed in the \u201cHead of Digital Design\u201d record in the Job Applications table. To do so we create a column called Company and we use the formula $Role.Company . The formula structure is $[Reference Column ID in Referencing Table].[Column ID in Underlying Table] . Grist will also auto-complete parts of the formula as you type it. There\u2019s an alternative way to add multiple columns from an underlying table. If you\u2019re interested in learning more, visit our website\u2019s help section on reference columns . Step 3: Create a Highly Productive Layout with Linked Tables # One of the most powerful features of Grist is the ability to link related tables in the same page to create highly productive layouts. In the final dashboard shown at the start of this tutorial, we saw that clicking on a job application would populate a view of milestones related to that job application. Let\u2019s do that now by adding Milestones as a widget to the Job Applications page. ( Brush up on widgets here .) Adding the table as a Card List widget makes the data easier to view. Similarly, you may want to change the Job Applications table to a Card List widget. In the CARD LIST menu on the right, select DATA to set data selection rules. Under SELECT BY you will see the option \u201cJOB_APPLICATIONS Card List\u201d. This option is only available because in step 1 we created a reference from the Milestones table to the Job Applications table in the Role reference column. This reference tells Grist which milestones are related to which job applications. Congrats! You now know how to use reference columns to organize related data, give your data structure, and create linked widgets in productive layouts. If you\u2019d like, compare your document to the tutorial solution . Dig Deeper: Combining formulas and reference columns. # If you\u2019re comfortable with formulas, try using formulas in reference columns to make Grist an even more powerful tool. In the tutorial solution , we\u2019ve used a formula to do more. The formula in the Last Milestone field in the Job Applications widget is looking up the most recent date in related records in the Milestones table. Thus, adding a new milestone with a more recent date would automatically update this field. You can learn more about lookup formulas on our website . Because Last Milestone is both a formula column and a reference column, we\u2019ve also done the following which follows the formula described in step 2 of this tutorial. The Status field uses the formula $Last_Milestone.Round to look up the related milestone\u2019s round status. The Updated On field uses the formula $Last_Milestone.Date to look up the related milestone\u2019s date. By doing this, status and date also auto-update when the Last Milestone field updates. Still need help? Take a peek at the tutorial solution , or contact us at support@getgrist.com .","title":"Reference Columns Guide"},{"location":"examples/2021-05-reference-columns/#reference-columns-guide","text":"","title":"Reference Columns Guide"},{"location":"examples/2021-05-reference-columns/#mastering-reference-columns-in-3-steps","text":"In Grist, reference columns are the key tool to organize relational data. Reference columns tell Grist that two separate tables are related, and specifies which records within those tables are related. For example, if you have a table of Dogs and a table of Dog Owners , you may want each dog\u2019s record to explicitly reference their owner\u2019s record in Dog Owners . Reference columns are a powerful tool for looking up data from a related table, and for creating highly productive layouts. You can learn to do this in three easy steps. We\u2019ve created a simple template you can copy and edit as you follow along with this guide.","title":"Mastering Reference Columns in 3 Steps"},{"location":"examples/2021-05-reference-columns/#using-reference-columns-to-organize-related-data","text":"In our example, you are a graphic designer applying for jobs, and you are using Grist to keep track of your job application process. In the template you have four tables: Job Applications , Milestones , Tasks , and Contacts . Your goal is to relate relevant data between tables and create a custom dashboard where you can easily view each job application\u2019s status, and add new job applications and new milestones easily. In this dashboard , clicking on each job application shows only the milestones related to that job application. We can create this relationship using reference columns. Let\u2019s create this dashboard together.","title":"Using Reference Columns to Organize Related Data"},{"location":"examples/2021-05-reference-columns/#step-1-creating-references","text":"Reference columns are a type of column available under COLUMN TYPE. It is helpful to think of the table with the reference column as the referencing table , and the table which is being referenced as the underlying table .","title":"Step 1: Creating References"},{"location":"examples/2021-05-reference-columns/#converting-columns-with-text-into-reference-columns","text":"If you already have text in the selected column, set the COLUMN TYPE in the right-side panel to \u201cReference\u201d. Grist will guess the underlying table and column you want to show in the reference column. You can review and edit this guess and set the appropriate underlying table and display column. DATA FROM TABLE points to the underlying table. SHOW COLUMN sets the display value in the reference column. For example, in the Milestones table, convert the Role column into a reference column. DATA FROM TABLE should point to Job Applications . SHOW COLUMN should be set to Role . Note that the reference column is referencing the entire record and you are choosing which column to display in the reference column. Tip: You can easily identify reference columns by the chain link icons in the column\u2019s cells.","title":"Converting Columns with Text into Reference Columns"},{"location":"examples/2021-05-reference-columns/#creating-reference-columns","text":"In the Contacts table we have a list of contacts that are not associated with any job application or company. Let\u2019s create a new column called Company , set its type to Reference, and point to Job Applications as the underlying table with Company as the display in the reference column. Click on the empty cell to open a drop-down menu and manually select the company at which each contact works. Look at the email address for a hint. Note: You can always click on a Reference Column cell to open the drop-down menu and select a new value.","title":"Creating Reference Columns"},{"location":"examples/2021-05-reference-columns/#step-2-look-up-additional-data-in-the-referenced-record","text":"Recall that the reference column is referencing another table, and correlating two specific records. Although you see a specific column in the display of the reference column, the reference is being made to the entire record . This allows us to look up additional data fields in the related record using a simple formula. Let\u2019s try it. In step 1, in the Milestones table we created a reference column called Role . It would be useful to also see for each Milestone record, the relevant company. For example, in row 1 we see the Milestone event \u201cRejected!\u201d for the role \u201cHead of Digital Design\u201d. It is not immediately apparent which company this is. Let\u2019s use the Role reference column to easily look up the company listed in the \u201cHead of Digital Design\u201d record in the Job Applications table. To do so we create a column called Company and we use the formula $Role.Company . The formula structure is $[Reference Column ID in Referencing Table].[Column ID in Underlying Table] . Grist will also auto-complete parts of the formula as you type it. There\u2019s an alternative way to add multiple columns from an underlying table. If you\u2019re interested in learning more, visit our website\u2019s help section on reference columns .","title":"Step 2: Look up additional data in the referenced record"},{"location":"examples/2021-05-reference-columns/#step-3-create-a-highly-productive-layout-with-linked-tables","text":"One of the most powerful features of Grist is the ability to link related tables in the same page to create highly productive layouts. In the final dashboard shown at the start of this tutorial, we saw that clicking on a job application would populate a view of milestones related to that job application. Let\u2019s do that now by adding Milestones as a widget to the Job Applications page. ( Brush up on widgets here .) Adding the table as a Card List widget makes the data easier to view. Similarly, you may want to change the Job Applications table to a Card List widget. In the CARD LIST menu on the right, select DATA to set data selection rules. Under SELECT BY you will see the option \u201cJOB_APPLICATIONS Card List\u201d. This option is only available because in step 1 we created a reference from the Milestones table to the Job Applications table in the Role reference column. This reference tells Grist which milestones are related to which job applications. Congrats! You now know how to use reference columns to organize related data, give your data structure, and create linked widgets in productive layouts. If you\u2019d like, compare your document to the tutorial solution .","title":"Step 3: Create a Highly Productive Layout with Linked Tables"},{"location":"examples/2021-05-reference-columns/#dig-deeper-combining-formulas-and-reference-columns","text":"If you\u2019re comfortable with formulas, try using formulas in reference columns to make Grist an even more powerful tool. In the tutorial solution , we\u2019ve used a formula to do more. The formula in the Last Milestone field in the Job Applications widget is looking up the most recent date in related records in the Milestones table. Thus, adding a new milestone with a more recent date would automatically update this field. You can learn more about lookup formulas on our website . Because Last Milestone is both a formula column and a reference column, we\u2019ve also done the following which follows the formula described in step 2 of this tutorial. The Status field uses the formula $Last_Milestone.Round to look up the related milestone\u2019s round status. The Updated On field uses the formula $Last_Milestone.Date to look up the related milestone\u2019s date. By doing this, status and date also auto-update when the Last Milestone field updates. Still need help? Take a peek at the tutorial solution , or contact us at support@getgrist.com .","title":"Dig Deeper: Combining formulas and reference columns."},{"location":"examples/2021-06-timesheets/","text":"Summary Tables Guide # Mastering Summary Tables with 2 Concepts # In Grist, summary tables are the workhorse of data analysis. They are similar to pivot tables in spreadsheets, and group-by functions in databases. They make it possible to summarize tables by grouping records into specific categories. For example, if you have a table of Olympic champions, it may be useful to group champion records by country or by sport \u2014 or by a combination of country and sport. Once records are sorted into useful categories, you may then want to compute sums using those record groups. Grist makes use of a nifty special field, available in formulas as $group . Summary tables make it easy to build pages in which you can quickly capture useful data insights. You can learn to do this by learning two concepts: creating summary tables, and using $group in formulas. We\u2019ve created a simple template ( https://public.getgrist.com/x527ESJATWNS/Time-Sheets-Tutorial ) that you can copy and edit as you follow along with this guide. Using Summary Tables to Analyze Data # In our example, you work for the HR department of a candy factory that hires contractors that work for various departments. In the template, your team has created an advanced time sheet tracker. There is a page where contractors can easily add time sheets for select months. It would be useful to have additional pages that summarize expenses by month, by department, and by contractor. Your goal in this tutorial is to build those summary pages. Creating Summary Tables # Step 1: Create a summary table # Let\u2019s start by creating a summary table that groups records in the time sheet table by month. Grist makes it easy to create summary tables. Simply click on Add New > Add Page > Time Sheet Entries > > Months . Doing so will generate a summary table with some columns. In this case we have the following three columns. First Column: List of month groups, January through June of 2021. Second Column: A count of the total number of records in each month, e.g. in January there are 12 time sheet records. Third Column: A sum of hours worked in each month, e.g. in January the total hours worked in those 12 time sheet records is 81 hours. Note: Grist will automatically take any numerical columns and add them up, saving you some time. Step 2: Create summary tables with multiple categories # It may be useful to also group timesheets by a combination of categories. For example, we may want to know how much time and money was spent on a particular account in a particular month, or on a specific employee in an specific account and month. When creating a summary table, you can select multiple columns by which to group data. Let\u2019s add two new summary tables. When adding these widgets, be sure to Select By the first widget we created on this page. This will link the tables so that selecting a month in the first widget will dynamically update records in the new widgets. Not sure why? Brush up on linking widgets . Add New > Add Widget to Page > Time Sheet Entries > > Months and Account Add New > Add Widget to Page > Time Sheet Entries > > Months and Account and Employee To more easily view this data, drag and drop the new tables so that they tile vertically. You may also want to hide the count columns. Great! But now we want to add the total dollar spend in each of these categories. That\u2019s simple to do with summary formulas. Calculating Totals Using Summary Formulas # Following along with the video? Visit the tutorial solution if you get stuck. Note that there are access rules in place for the tutorial solution which will prevent you from seeing certain pages and most data. Make a copy to become the document owner and see all data and pages. Step 1: Understanding $group field in formulas # In Grist, $group is a special Python object that represents a collection of records that are summarized by the current summary line. If you look at the formula in the Hours Worked column, you will see SUM($group.Hours_Worked) . That is taking the sum of Hours Worked in a group . In this example, in row 1, the group is January 2021. Thus, in that row, the formula is adding hours worked in the January 2021 group. In row 2, the group is February 2021 and the formula sums hours worked in February. If you take a peek at the count column, which we hid previously, you\u2019ll find the formula len($group) . The function len (which stands for length) counts all the records that belong to the group being summarized in a particular row. Another way to express a set of records is by scanning through the list of records in a group using a variable. You can name the variable as you wish; we will use r (for \u201crecord\u201d). We can rewrite the formula in Hours Worked as sum(r.Hours_Worked for r in $group) . Step 2: Using $group in formulas # Let\u2019s calculate the total dollar spend on hours worked in each month. The formula is sum(r.Hours_Worked * r.TimeSheet.Hourly_Rate for r in $group) . Since each record r in the group is a record in the underlying table ( Time Sheet Entries ), r.Hours_Worked refers to the field in that table. In the Time Sheet Entries table, the column TimeSheet is a reference column that is referencing an entire record in the Time Sheets table. Thus, we have to further specify which field from the referenced record should be included in the formula\u2019s calculation, which in this case is Hourly_Rate . To learn more about reference columns, visit our Reference column guide . We can apply the same formula to the other two summary tables on this page. In the second table, the $group function is grouping things in the same month AND account. In the third table, the $group function is grouping expenses in the same month AND account AND by the same employee. And that\u2019s it! You did it. You rebuilt the month summary page. See if you can apply these concepts to rebuild the contractor summary page. Did you know? If needed, you can also add conditions to this formula. For example, sum(r.Hours_Worked * r.TimeSheet.Hourly_Rate for r in $group if r.Hours_Worked > 0) will only add up records in which there is a positive value in the field Hours Worked . Visit our function reference to learn more. Need more help? Visit the tutorial solution or contact us at support@getgrist.com . Note that there are access rules in place for the tutorial solution which will prevent you from seeing certain pages and most data. Make a copy to become the document owner and see all data and pages.","title":"Summary Tables Guide"},{"location":"examples/2021-06-timesheets/#summary-tables-guide","text":"","title":"Summary Tables Guide"},{"location":"examples/2021-06-timesheets/#mastering-summary-tables-with-2-concepts","text":"In Grist, summary tables are the workhorse of data analysis. They are similar to pivot tables in spreadsheets, and group-by functions in databases. They make it possible to summarize tables by grouping records into specific categories. For example, if you have a table of Olympic champions, it may be useful to group champion records by country or by sport \u2014 or by a combination of country and sport. Once records are sorted into useful categories, you may then want to compute sums using those record groups. Grist makes use of a nifty special field, available in formulas as $group . Summary tables make it easy to build pages in which you can quickly capture useful data insights. You can learn to do this by learning two concepts: creating summary tables, and using $group in formulas. We\u2019ve created a simple template ( https://public.getgrist.com/x527ESJATWNS/Time-Sheets-Tutorial ) that you can copy and edit as you follow along with this guide.","title":"Mastering Summary Tables with 2 Concepts"},{"location":"examples/2021-06-timesheets/#using-summary-tables-to-analyze-data","text":"In our example, you work for the HR department of a candy factory that hires contractors that work for various departments. In the template, your team has created an advanced time sheet tracker. There is a page where contractors can easily add time sheets for select months. It would be useful to have additional pages that summarize expenses by month, by department, and by contractor. Your goal in this tutorial is to build those summary pages.","title":"Using Summary Tables to Analyze Data"},{"location":"examples/2021-06-timesheets/#creating-summary-tables","text":"","title":"Creating Summary Tables"},{"location":"examples/2021-06-timesheets/#step-1-create-a-summary-table","text":"Let\u2019s start by creating a summary table that groups records in the time sheet table by month. Grist makes it easy to create summary tables. Simply click on Add New > Add Page > Time Sheet Entries > > Months . Doing so will generate a summary table with some columns. In this case we have the following three columns. First Column: List of month groups, January through June of 2021. Second Column: A count of the total number of records in each month, e.g. in January there are 12 time sheet records. Third Column: A sum of hours worked in each month, e.g. in January the total hours worked in those 12 time sheet records is 81 hours. Note: Grist will automatically take any numerical columns and add them up, saving you some time.","title":"Step 1: Create a summary table"},{"location":"examples/2021-06-timesheets/#step-2-create-summary-tables-with-multiple-categories","text":"It may be useful to also group timesheets by a combination of categories. For example, we may want to know how much time and money was spent on a particular account in a particular month, or on a specific employee in an specific account and month. When creating a summary table, you can select multiple columns by which to group data. Let\u2019s add two new summary tables. When adding these widgets, be sure to Select By the first widget we created on this page. This will link the tables so that selecting a month in the first widget will dynamically update records in the new widgets. Not sure why? Brush up on linking widgets . Add New > Add Widget to Page > Time Sheet Entries > > Months and Account Add New > Add Widget to Page > Time Sheet Entries > > Months and Account and Employee To more easily view this data, drag and drop the new tables so that they tile vertically. You may also want to hide the count columns. Great! But now we want to add the total dollar spend in each of these categories. That\u2019s simple to do with summary formulas.","title":"Step 2: Create summary tables with multiple categories"},{"location":"examples/2021-06-timesheets/#calculating-totals-using-summary-formulas","text":"Following along with the video? Visit the tutorial solution if you get stuck. Note that there are access rules in place for the tutorial solution which will prevent you from seeing certain pages and most data. Make a copy to become the document owner and see all data and pages.","title":"Calculating Totals Using Summary Formulas"},{"location":"examples/2021-06-timesheets/#step-1-understanding-group-field-in-formulas","text":"In Grist, $group is a special Python object that represents a collection of records that are summarized by the current summary line. If you look at the formula in the Hours Worked column, you will see SUM($group.Hours_Worked) . That is taking the sum of Hours Worked in a group . In this example, in row 1, the group is January 2021. Thus, in that row, the formula is adding hours worked in the January 2021 group. In row 2, the group is February 2021 and the formula sums hours worked in February. If you take a peek at the count column, which we hid previously, you\u2019ll find the formula len($group) . The function len (which stands for length) counts all the records that belong to the group being summarized in a particular row. Another way to express a set of records is by scanning through the list of records in a group using a variable. You can name the variable as you wish; we will use r (for \u201crecord\u201d). We can rewrite the formula in Hours Worked as sum(r.Hours_Worked for r in $group) .","title":"Step 1: Understanding $group field in formulas"},{"location":"examples/2021-06-timesheets/#step-2-using-group-in-formulas","text":"Let\u2019s calculate the total dollar spend on hours worked in each month. The formula is sum(r.Hours_Worked * r.TimeSheet.Hourly_Rate for r in $group) . Since each record r in the group is a record in the underlying table ( Time Sheet Entries ), r.Hours_Worked refers to the field in that table. In the Time Sheet Entries table, the column TimeSheet is a reference column that is referencing an entire record in the Time Sheets table. Thus, we have to further specify which field from the referenced record should be included in the formula\u2019s calculation, which in this case is Hourly_Rate . To learn more about reference columns, visit our Reference column guide . We can apply the same formula to the other two summary tables on this page. In the second table, the $group function is grouping things in the same month AND account. In the third table, the $group function is grouping expenses in the same month AND account AND by the same employee. And that\u2019s it! You did it. You rebuilt the month summary page. See if you can apply these concepts to rebuild the contractor summary page. Did you know? If needed, you can also add conditions to this formula. For example, sum(r.Hours_Worked * r.TimeSheet.Hourly_Rate for r in $group if r.Hours_Worked > 0) will only add up records in which there is a positive value in the field Hours Worked . Visit our function reference to learn more. Need more help? Visit the tutorial solution or contact us at support@getgrist.com . Note that there are access rules in place for the tutorial solution which will prevent you from seeing certain pages and most data. Make a copy to become the document owner and see all data and pages.","title":"Step 2: Using $group in formulas"},{"location":"examples/2021-07-auto-stamps/","text":"Automatic Time and User Stamps Guide # It is sometimes useful to know when a record was last updated or created, and by whom. Grist makes it simple to create columns that stamp the time or a user\u2019s name to a record when it is updated or created. This makes it possible to sort records by age, determine how long a record has existed, or quickly track the most recent edit to its author. This is especially useful when working in a team. Suppose you have a document tracking sales opportunities. It may be useful to know the last time a sales person took action on a particular opportunity, and further determine for how long that opportunity has been pending. We\u2019ve created a tutorial based on our Grant Application Tracker template. To follow along with this guide, start with this incomplete version of the template that is missing time and user stamp columns. We will recreate those together in this tutorial. Create a copy and edit the template as you follow along with this guide. Open Tutorial Template Template Overview: Grant Application Tracker # In this template, an NGO focused on ocean conservation projects tracks their grant applications submitted to marine-focused foundations. Here\u2019s a breakdown of the document structure. The Applications Dashboard shows all applications, application details, foundation details, and related tasks in one helpful view. Tasks by Staff lists the NGO\u2019s personnel, the applications they\u2019re overseeing, and tasks assigned to each team member. Our Programs lists the programs the NGO is seeking to fund. Our Funding Overview provides an overview of funding with two charts: (i) breakdown of funds in the fundraising pipeline, and (ii) breakdown of total funding awarded to specific NGO programs. Foundations We Work With lists the foundations to which the NGO has applied for funding. This page also lists related applications and tasks. Creating Time Stamp Columns # Columns can stamp the time when a record was created or updated by using the NOW() formula. Let\u2019s add a column to the Tasks table to track when a task was last updated. This can be accomplished in three steps. In the Tasks table, create a column labeled \u2018Last Updated\u2019 and in column types, select DateTime to select your desired format for date and time . Convert the column to a data column by clicking the ACTIONS dropdown in the creator panel. This prevents the formula from triggering whenever the document loads. Once converted to a data column, enter the NOW() formula. You will see two checkbox options below the formula. Apply to new records triggers the formula only when a record is created. Apply on record changes triggers the formula when a record is updated. Select Apply on record changes to open a submenu where you may select which fields, when updated, will trigger the formula. In this case, we\u2019ll select Any Field which means that updating any field in this record will trigger the time stamp formula to update. Great! You are now tracking when a task was last updated. Next, you may want to know who created a task because that person may have the most information about the task\u2019s goals and parameters. That\u2019s just as simple to create in Grist as time stamps. Creating User Stamp Columns # User stamps are created using the exact same steps as time stamps, expect for one detail \u2014 the formula is user.Name . Let\u2019s add a column to the Tasks table to track who created a task. In the Tasks table, create a column labeled \u2018Created By\u2019 and in column types, select Text and modify the format if you wish. Convert formula column to a data column and enter the user.Name formula. Select Apply to new records so that the formula only triggers when a new record is created. There are other possibilities available in addition to user.Name such as user.Email or a unique user.UserID . The user information available is the same as that in access rule conditions . Note. It is still possible for a user to manually edit cells with time stamp or user stamp formulas. If you don\u2019t want that to be allowed, use access rules to forbid it. And that\u2019s it! You\u2019ve created columns that capture user and time stamp information based on specific triggers, such as when a record is updated or created. Great job! Dig Deeper: Combining time and user stamps using formulas # Typically it is best practice to keep time and user stamp information in separate columns so that you may later sort and filter by those columns. However, there may be times when it would be useful to capture both time and user stamp information in the same column. Let\u2019s add such a column to the Applications table. In the Applications table, create a column labeled \u2018Created At\u2019 and convert to a data column. In column types, select Text. Enter the formula \"{:%b %d, %Y} by {}\".format(NOW(), user.Name) . The part in quotes is a format string. Each set of curly brackets {} in it gets replaced with the next value in parentheses after .format . Note that the format of the date is set within the corresponding {} . The format is set with a colon : followed by the specific Python codes %b , %d , %Y . Here is a table summarizing all the date format options available in Python . Select Apply to new records so that the formula only triggers when a new record is created. Need more help? Visit the final template or contact us at support@getgrist.com .","title":"Time and User Stamps"},{"location":"examples/2021-07-auto-stamps/#automatic-time-and-user-stamps-guide","text":"It is sometimes useful to know when a record was last updated or created, and by whom. Grist makes it simple to create columns that stamp the time or a user\u2019s name to a record when it is updated or created. This makes it possible to sort records by age, determine how long a record has existed, or quickly track the most recent edit to its author. This is especially useful when working in a team. Suppose you have a document tracking sales opportunities. It may be useful to know the last time a sales person took action on a particular opportunity, and further determine for how long that opportunity has been pending. We\u2019ve created a tutorial based on our Grant Application Tracker template. To follow along with this guide, start with this incomplete version of the template that is missing time and user stamp columns. We will recreate those together in this tutorial. Create a copy and edit the template as you follow along with this guide. Open Tutorial Template","title":"Automatic Time and User Stamps Guide"},{"location":"examples/2021-07-auto-stamps/#template-overview-grant-application-tracker","text":"In this template, an NGO focused on ocean conservation projects tracks their grant applications submitted to marine-focused foundations. Here\u2019s a breakdown of the document structure. The Applications Dashboard shows all applications, application details, foundation details, and related tasks in one helpful view. Tasks by Staff lists the NGO\u2019s personnel, the applications they\u2019re overseeing, and tasks assigned to each team member. Our Programs lists the programs the NGO is seeking to fund. Our Funding Overview provides an overview of funding with two charts: (i) breakdown of funds in the fundraising pipeline, and (ii) breakdown of total funding awarded to specific NGO programs. Foundations We Work With lists the foundations to which the NGO has applied for funding. This page also lists related applications and tasks.","title":"Template Overview: Grant Application Tracker"},{"location":"examples/2021-07-auto-stamps/#creating-time-stamp-columns","text":"Columns can stamp the time when a record was created or updated by using the NOW() formula. Let\u2019s add a column to the Tasks table to track when a task was last updated. This can be accomplished in three steps. In the Tasks table, create a column labeled \u2018Last Updated\u2019 and in column types, select DateTime to select your desired format for date and time . Convert the column to a data column by clicking the ACTIONS dropdown in the creator panel. This prevents the formula from triggering whenever the document loads. Once converted to a data column, enter the NOW() formula. You will see two checkbox options below the formula. Apply to new records triggers the formula only when a record is created. Apply on record changes triggers the formula when a record is updated. Select Apply on record changes to open a submenu where you may select which fields, when updated, will trigger the formula. In this case, we\u2019ll select Any Field which means that updating any field in this record will trigger the time stamp formula to update. Great! You are now tracking when a task was last updated. Next, you may want to know who created a task because that person may have the most information about the task\u2019s goals and parameters. That\u2019s just as simple to create in Grist as time stamps.","title":"Creating Time Stamp Columns"},{"location":"examples/2021-07-auto-stamps/#creating-user-stamp-columns","text":"User stamps are created using the exact same steps as time stamps, expect for one detail \u2014 the formula is user.Name . Let\u2019s add a column to the Tasks table to track who created a task. In the Tasks table, create a column labeled \u2018Created By\u2019 and in column types, select Text and modify the format if you wish. Convert formula column to a data column and enter the user.Name formula. Select Apply to new records so that the formula only triggers when a new record is created. There are other possibilities available in addition to user.Name such as user.Email or a unique user.UserID . The user information available is the same as that in access rule conditions . Note. It is still possible for a user to manually edit cells with time stamp or user stamp formulas. If you don\u2019t want that to be allowed, use access rules to forbid it. And that\u2019s it! You\u2019ve created columns that capture user and time stamp information based on specific triggers, such as when a record is updated or created. Great job!","title":"Creating User Stamp Columns"},{"location":"examples/2021-07-auto-stamps/#dig-deeper-combining-time-and-user-stamps-using-formulas","text":"Typically it is best practice to keep time and user stamp information in separate columns so that you may later sort and filter by those columns. However, there may be times when it would be useful to capture both time and user stamp information in the same column. Let\u2019s add such a column to the Applications table. In the Applications table, create a column labeled \u2018Created At\u2019 and convert to a data column. In column types, select Text. Enter the formula \"{:%b %d, %Y} by {}\".format(NOW(), user.Name) . The part in quotes is a format string. Each set of curly brackets {} in it gets replaced with the next value in parentheses after .format . Note that the format of the date is set within the corresponding {} . The format is set with a colon : followed by the specific Python codes %b , %d , %Y . Here is a table summarizing all the date format options available in Python . Select Apply to new records so that the formula only triggers when a new record is created. Need more help? Visit the final template or contact us at support@getgrist.com .","title":"Dig Deeper: Combining time and user stamps using formulas"},{"location":"newsletters/2020-05/","text":"May 2020 Newsletter # /* restore some poorly overridden defaults */ .newsletter-header .table { background-color: initial; border: initial; } .newsletter-header .table > tbody > tr > td { padding: initial; border: initial; vertical-align: initial; } .newsletter-header img.header-img { padding: initial; max-width: initial; display: initial; padding: initial; line-height: initial; background-color: initial; border: initial; border-radius: initial; margin: initial; } /* copy newsletter styles, with a prefix for sufficient specificity */ .newsletter-header .header { border: none; padding: 0; margin: 0; } .newsletter-header table > tbody > tr > td.header-image { width: 80px; padding-right: 16px; } .newsletter-header table > tbody > tr > td.header-text { background-color: #c4ffcd; padding: 16px 36px; } .newsletter-header table.header-top { border: none; padding: 0; margin: 0; width: 100%; } .header-title { font-family: Helvetica Neue, Helvetica, Arial, sans-serif; font-size: 24px; line-height: 28px; } .header-month { } .header-welcome { margin-top: 12px; color: #666666; } Grist for the Mill May 2020 \u2022 getgrist.com Welcome to our monthly newsletter of updates and tips for Grist users. Quick Tips # Copy as Template. Want to use your carefully crafted document with all new data? Click the \u201cShare\u201d menu on top ( ), and select \u201cCopy as Template\u201d 1 . The copy will have all the structure, formulas, and layouts, but none of the data. Link to a specific cell. Select a cell and press \u2318 \u21e7 A (Mac) or Ctrl + Shift + A (Windows). Share the copied link to have your recipient open your document to the same selected cell. More here . What\u2019s New # Grist is being constantly improved. Here are some of the more recent changes: New Grist documents have better-looking URLs , and include the document title. Now when you see a Grist link, it\u2019s easy to remember which document it\u2019s for. Reference columns now offer a more helpful auto-complete . To set a Reference value, start to type, and see suggestions from the linked table ranked by best match. Charts have a new \u201cLog Scale Y-axis\u201d option, to show data on a log scale , which is important in many data science applications. Super-user? If you are itching to hack, there is now an experimental way to add your very own components to Grist. See Custom page widget for more. Grist @ New York Tech Meetup # We presented a nice demo at the NY Tech Meetup back in February. We finally have a video of our demo and Q&A to share with you: https://www.youtube.com/watch?v=a2RlRGRnr9Q Learning Grist # Get started quickly with basic Grist concepts by watching this playlist of a few very short introductory videos: Grist Video Series Each of our featured Examples & Templates has a related tutorial that shows step-by-step how to build it from scratch. Read through one to gain a deeper understanding of how various features play together. Visit our Help Center to find all of the above, along with the full product documentation. Questions or suggestions? Click Give Feedback link near the bottom left in the Grist application, or simply email support@getgrist.com . After the July 2020 update, select \u201cDuplicate Document\u201d, and mark the \u201cAs Template\u201d checkbox in the dialog that opens. See Copying Documents . \u21a9","title":"2020/05"},{"location":"newsletters/2020-05/#may-2020-newsletter","text":"/* restore some poorly overridden defaults */ .newsletter-header .table { background-color: initial; border: initial; } .newsletter-header .table > tbody > tr > td { padding: initial; border: initial; vertical-align: initial; } .newsletter-header img.header-img { padding: initial; max-width: initial; display: initial; padding: initial; line-height: initial; background-color: initial; border: initial; border-radius: initial; margin: initial; } /* copy newsletter styles, with a prefix for sufficient specificity */ .newsletter-header .header { border: none; padding: 0; margin: 0; } .newsletter-header table > tbody > tr > td.header-image { width: 80px; padding-right: 16px; } .newsletter-header table > tbody > tr > td.header-text { background-color: #c4ffcd; padding: 16px 36px; } .newsletter-header table.header-top { border: none; padding: 0; margin: 0; width: 100%; } .header-title { font-family: Helvetica Neue, Helvetica, Arial, sans-serif; font-size: 24px; line-height: 28px; } .header-month { } .header-welcome { margin-top: 12px; color: #666666; } Grist for the Mill May 2020 \u2022 getgrist.com Welcome to our monthly newsletter of updates and tips for Grist users.","title":"May 2020 Newsletter"},{"location":"newsletters/2020-05/#quick-tips","text":"Copy as Template. Want to use your carefully crafted document with all new data? Click the \u201cShare\u201d menu on top ( ), and select \u201cCopy as Template\u201d 1 . The copy will have all the structure, formulas, and layouts, but none of the data. Link to a specific cell. Select a cell and press \u2318 \u21e7 A (Mac) or Ctrl + Shift + A (Windows). Share the copied link to have your recipient open your document to the same selected cell. More here .","title":"Quick Tips"},{"location":"newsletters/2020-05/#whats-new","text":"Grist is being constantly improved. Here are some of the more recent changes: New Grist documents have better-looking URLs , and include the document title. Now when you see a Grist link, it\u2019s easy to remember which document it\u2019s for. Reference columns now offer a more helpful auto-complete . To set a Reference value, start to type, and see suggestions from the linked table ranked by best match. Charts have a new \u201cLog Scale Y-axis\u201d option, to show data on a log scale , which is important in many data science applications. Super-user? If you are itching to hack, there is now an experimental way to add your very own components to Grist. See Custom page widget for more.","title":"What\u2019s New"},{"location":"newsletters/2020-05/#grist-new-york-tech-meetup","text":"We presented a nice demo at the NY Tech Meetup back in February. We finally have a video of our demo and Q&A to share with you: https://www.youtube.com/watch?v=a2RlRGRnr9Q","title":"Grist @ New York Tech Meetup"},{"location":"newsletters/2020-05/#learning-grist","text":"Get started quickly with basic Grist concepts by watching this playlist of a few very short introductory videos: Grist Video Series Each of our featured Examples & Templates has a related tutorial that shows step-by-step how to build it from scratch. Read through one to gain a deeper understanding of how various features play together. Visit our Help Center to find all of the above, along with the full product documentation. Questions or suggestions? Click Give Feedback link near the bottom left in the Grist application, or simply email support@getgrist.com . After the July 2020 update, select \u201cDuplicate Document\u201d, and mark the \u201cAs Template\u201d checkbox in the dialog that opens. See Copying Documents . \u21a9","title":"Learning Grist"},{"location":"newsletters/2020-06/","text":"June 2020 Newsletter # /* restore some poorly overridden defaults */ .newsletter-header .table { background-color: initial; border: initial; } .newsletter-header .table > tbody > tr > td { padding: initial; border: initial; vertical-align: initial; } .newsletter-header img.header-img { padding: initial; max-width: initial; display: initial; padding: initial; line-height: initial; background-color: initial; border: initial; border-radius: initial; margin: initial; } /* copy newsletter styles, with a prefix for sufficient specificity */ .newsletter-header .header { border: none; padding: 0; margin: 0; } .newsletter-header table > tbody > tr > td.header-image { width: 80px; padding-right: 16px; } .newsletter-header table > tbody > tr > td.header-text { background-color: #c4ffcd; padding: 16px 36px; } .newsletter-header table.header-top { border: none; padding: 0; margin: 0; width: 100%; } .header-title { font-family: Helvetica Neue, Helvetica, Arial, sans-serif; font-size: 24px; line-height: 28px; } .header-month { } .header-welcome { margin-top: 12px; color: #666666; } Grist for the Mill June 2020 \u2022 getgrist.com Welcome to our monthly newsletter of updates and tips for Grist users. Quick Tips # Get the Calendar Quarter. If you have a column of type Date, you can extract parts of it with Excel-like functions for year , month , and more . But how to get the quarter? This formula will produce values like \u201c2020 Q2\u201d: \"%s Q%s\" % ($MyDate.year, CEILING($MyDate.month, 3) / 3) Make Hyperlinks. To create a column of links in Grist, set the column type to Text, and click the \u201cHyperLink\u201d button under CELL FORMAT: Now, a value like Grist Labs https://getgrist.com will show a link to https://getgrist.com with \u201cGrist Labs\u201d as the text. See below for a Book Club example that uses formulas extensively to generate useful links. What\u2019s New # Safely work on complex changes. As your document or spreadsheet grows in importance, the ease of making changes may get overshadowed by the fear of breaking something. Grist now has a tool to help. Click \u201cDuplicate Document\u201d 1 in the Share menu: You\u2019ll get an unsaved copy of your document. You can experiment on it without fear of affecting the original. Make changes big or small, one or many. Once satisfied, open the dropdown next to \u201cSave Copy\u201d and click \u201cReplace Original\u201d: Grist will warn you if the replacement risks overwriting any recent changes in the original. Examine and restore backups. Grist automatically saves backups of your documents as you work on them. You can now view them easily. Click \u201cDocument History\u201d in the left panel, then click the \u201cSnapshots\u201d tab in the panel on the right: You can open any of the listed snapshots. You can revert to an old version using the \u201cReplace Original\u201d option 2 , or save an old version as a new document. New Examples # Here are some examples of what you can do with Grist: Slice and Dice Credit Card Expenses : Grist offers handy way to explore your credit card transactions quickly. American Express card members can use the ready-made template in the example. Book Lists with Library and Store Look-ups : Grist\u2019s link handling and formulas can help you with your book club, by adding automatic links to libraries, stores, review sites, and other references. The same ideas could work with Ikea furniture, food orders, whatever you like. Grist Overview Demo # Interested in seeing an overview of Grist features on a realistic example? Check out our new demo video: https://www.youtube.com/watch?v=XYZ_ZGSxU00 . Learning Grist # Get started quickly with basic Grist concepts by watching this playlist of a few very short introductory videos: Grist Video Series . Each of our featured Examples & Templates has a related tutorial that shows step-by-step how to build it from scratch. Read through one to gain a deeper understanding of how various features play together. Visit our Help Center to find all of the above, along with the full product documentation. Questions or suggestions? Click the Give Feedback link near the bottom left in the Grist application, or simply email support@getgrist.com . After the July 2020 update, use the \u201cWork on a Copy\u201d option for this functionality. See Copying Documents . \u21a9 This menu was updated in July 2020, see Automatic Backups . \u21a9","title":"2020/06"},{"location":"newsletters/2020-06/#june-2020-newsletter","text":"/* restore some poorly overridden defaults */ .newsletter-header .table { background-color: initial; border: initial; } .newsletter-header .table > tbody > tr > td { padding: initial; border: initial; vertical-align: initial; } .newsletter-header img.header-img { padding: initial; max-width: initial; display: initial; padding: initial; line-height: initial; background-color: initial; border: initial; border-radius: initial; margin: initial; } /* copy newsletter styles, with a prefix for sufficient specificity */ .newsletter-header .header { border: none; padding: 0; margin: 0; } .newsletter-header table > tbody > tr > td.header-image { width: 80px; padding-right: 16px; } .newsletter-header table > tbody > tr > td.header-text { background-color: #c4ffcd; padding: 16px 36px; } .newsletter-header table.header-top { border: none; padding: 0; margin: 0; width: 100%; } .header-title { font-family: Helvetica Neue, Helvetica, Arial, sans-serif; font-size: 24px; line-height: 28px; } .header-month { } .header-welcome { margin-top: 12px; color: #666666; } Grist for the Mill June 2020 \u2022 getgrist.com Welcome to our monthly newsletter of updates and tips for Grist users.","title":"June 2020 Newsletter"},{"location":"newsletters/2020-06/#quick-tips","text":"Get the Calendar Quarter. If you have a column of type Date, you can extract parts of it with Excel-like functions for year , month , and more . But how to get the quarter? This formula will produce values like \u201c2020 Q2\u201d: \"%s Q%s\" % ($MyDate.year, CEILING($MyDate.month, 3) / 3) Make Hyperlinks. To create a column of links in Grist, set the column type to Text, and click the \u201cHyperLink\u201d button under CELL FORMAT: Now, a value like Grist Labs https://getgrist.com will show a link to https://getgrist.com with \u201cGrist Labs\u201d as the text. See below for a Book Club example that uses formulas extensively to generate useful links.","title":"Quick Tips"},{"location":"newsletters/2020-06/#whats-new","text":"Safely work on complex changes. As your document or spreadsheet grows in importance, the ease of making changes may get overshadowed by the fear of breaking something. Grist now has a tool to help. Click \u201cDuplicate Document\u201d 1 in the Share menu: You\u2019ll get an unsaved copy of your document. You can experiment on it without fear of affecting the original. Make changes big or small, one or many. Once satisfied, open the dropdown next to \u201cSave Copy\u201d and click \u201cReplace Original\u201d: Grist will warn you if the replacement risks overwriting any recent changes in the original. Examine and restore backups. Grist automatically saves backups of your documents as you work on them. You can now view them easily. Click \u201cDocument History\u201d in the left panel, then click the \u201cSnapshots\u201d tab in the panel on the right: You can open any of the listed snapshots. You can revert to an old version using the \u201cReplace Original\u201d option 2 , or save an old version as a new document.","title":"What\u2019s New"},{"location":"newsletters/2020-06/#new-examples","text":"Here are some examples of what you can do with Grist: Slice and Dice Credit Card Expenses : Grist offers handy way to explore your credit card transactions quickly. American Express card members can use the ready-made template in the example. Book Lists with Library and Store Look-ups : Grist\u2019s link handling and formulas can help you with your book club, by adding automatic links to libraries, stores, review sites, and other references. The same ideas could work with Ikea furniture, food orders, whatever you like.","title":"New Examples"},{"location":"newsletters/2020-06/#grist-overview-demo","text":"Interested in seeing an overview of Grist features on a realistic example? Check out our new demo video: https://www.youtube.com/watch?v=XYZ_ZGSxU00 .","title":"Grist Overview Demo"},{"location":"newsletters/2020-06/#learning-grist","text":"Get started quickly with basic Grist concepts by watching this playlist of a few very short introductory videos: Grist Video Series . Each of our featured Examples & Templates has a related tutorial that shows step-by-step how to build it from scratch. Read through one to gain a deeper understanding of how various features play together. Visit our Help Center to find all of the above, along with the full product documentation. Questions or suggestions? Click the Give Feedback link near the bottom left in the Grist application, or simply email support@getgrist.com . After the July 2020 update, use the \u201cWork on a Copy\u201d option for this functionality. See Copying Documents . \u21a9 This menu was updated in July 2020, see Automatic Backups . \u21a9","title":"Learning Grist"},{"location":"newsletters/2020-07/","text":"July 2020 Newsletter # /* restore some poorly overridden defaults */ .newsletter-header .table { background-color: initial; border: initial; } .newsletter-header .table > tbody > tr > td { padding: initial; border: initial; vertical-align: initial; } .newsletter-header img.header-img { padding: initial; max-width: initial; display: initial; padding: initial; line-height: initial; background-color: initial; border: initial; border-radius: initial; margin: initial; } /* copy newsletter styles, with a prefix for sufficient specificity */ .newsletter-header .header { border: none; padding: 0; margin: 0; } .newsletter-header table > tbody > tr > td.header-image { width: 80px; padding-right: 16px; } .newsletter-header table > tbody > tr > td.header-text { background-color: #c4ffcd; padding: 16px 36px; } .newsletter-header table.header-top { border: none; padding: 0; margin: 0; width: 100%; } .header-title { font-family: Helvetica Neue, Helvetica, Arial, sans-serif; font-size: 24px; line-height: 28px; } .header-month { } .header-welcome { margin-top: 12px; color: #666666; } Grist for the Mill July 2020 \u2022 getgrist.com Welcome to our monthly newsletter of updates and tips for Grist users. Quick Tips # Review Document Logic. The \u201cCode View\u201d link in the left panel shows a Python module that describes the full data model of your document: all tables, all columns with types, and all formulas. It\u2019s a great overview of the logic that drives a document\u2019s calculations. Links to Compose Emails. If you have a column like \u201cEmail\u201d, try adding a formula column with the formula \"mailto:\" + $Email , set its type to Text , and CELL FORMAT to HyperLink . You can now click a link to compose an email to this address. See New Examples below for much more you can do with this. What\u2019s New # More number format options . One-click formatting for dollar amounts, percentages, showing negative numbers in parentheses, and more: Longer backup retention. Grist makes regular automatic backups of your documents as you work on them. It now retains them for longer, even on the free plan. Recover or purge deleted documents. Deleted documents are moved to Trash. It is now easy to recover them. Documents in Trash get deleted permanently after 30 days, or you can delete them permanently yourself to purge them from our systems sooner. Use your own domain. If you use Grist to share data with your own customers and would like it served from your own domain, this option is now available as an add-on to the Team Plan . Zapier integration. Grist integration on Zapier is now available in beta. Go ahead and connect Grist to other apps. New Examples # Here is an example of what you can do with Grist: Prepare Emails using Formulas : Turn cells into links that open an email program to compose a new message, and prefill its recipients, subject, and more. You can essentially create email templates using Grist formulas. Learning Grist # Get started quickly with basic Grist concepts by watching this playlist of a few very short introductory videos: Grist Video Series . Each of our featured Examples & Templates has a related tutorial that shows step-by-step how to build it from scratch. Read through one to gain a deeper understanding of how various features play together. Visit our Help Center to find all of the above, along with the full product documentation. Questions or suggestions? Click the Give Feedback link near the bottom left in the Grist application, or simply email support@getgrist.com .","title":"2020/07"},{"location":"newsletters/2020-07/#july-2020-newsletter","text":"/* restore some poorly overridden defaults */ .newsletter-header .table { background-color: initial; border: initial; } .newsletter-header .table > tbody > tr > td { padding: initial; border: initial; vertical-align: initial; } .newsletter-header img.header-img { padding: initial; max-width: initial; display: initial; padding: initial; line-height: initial; background-color: initial; border: initial; border-radius: initial; margin: initial; } /* copy newsletter styles, with a prefix for sufficient specificity */ .newsletter-header .header { border: none; padding: 0; margin: 0; } .newsletter-header table > tbody > tr > td.header-image { width: 80px; padding-right: 16px; } .newsletter-header table > tbody > tr > td.header-text { background-color: #c4ffcd; padding: 16px 36px; } .newsletter-header table.header-top { border: none; padding: 0; margin: 0; width: 100%; } .header-title { font-family: Helvetica Neue, Helvetica, Arial, sans-serif; font-size: 24px; line-height: 28px; } .header-month { } .header-welcome { margin-top: 12px; color: #666666; } Grist for the Mill July 2020 \u2022 getgrist.com Welcome to our monthly newsletter of updates and tips for Grist users.","title":"July 2020 Newsletter"},{"location":"newsletters/2020-07/#quick-tips","text":"Review Document Logic. The \u201cCode View\u201d link in the left panel shows a Python module that describes the full data model of your document: all tables, all columns with types, and all formulas. It\u2019s a great overview of the logic that drives a document\u2019s calculations. Links to Compose Emails. If you have a column like \u201cEmail\u201d, try adding a formula column with the formula \"mailto:\" + $Email , set its type to Text , and CELL FORMAT to HyperLink . You can now click a link to compose an email to this address. See New Examples below for much more you can do with this.","title":"Quick Tips"},{"location":"newsletters/2020-07/#whats-new","text":"More number format options . One-click formatting for dollar amounts, percentages, showing negative numbers in parentheses, and more: Longer backup retention. Grist makes regular automatic backups of your documents as you work on them. It now retains them for longer, even on the free plan. Recover or purge deleted documents. Deleted documents are moved to Trash. It is now easy to recover them. Documents in Trash get deleted permanently after 30 days, or you can delete them permanently yourself to purge them from our systems sooner. Use your own domain. If you use Grist to share data with your own customers and would like it served from your own domain, this option is now available as an add-on to the Team Plan . Zapier integration. Grist integration on Zapier is now available in beta. Go ahead and connect Grist to other apps.","title":"What\u2019s New"},{"location":"newsletters/2020-07/#new-examples","text":"Here is an example of what you can do with Grist: Prepare Emails using Formulas : Turn cells into links that open an email program to compose a new message, and prefill its recipients, subject, and more. You can essentially create email templates using Grist formulas.","title":"New Examples"},{"location":"newsletters/2020-07/#learning-grist","text":"Get started quickly with basic Grist concepts by watching this playlist of a few very short introductory videos: Grist Video Series . Each of our featured Examples & Templates has a related tutorial that shows step-by-step how to build it from scratch. Read through one to gain a deeper understanding of how various features play together. Visit our Help Center to find all of the above, along with the full product documentation. Questions or suggestions? Click the Give Feedback link near the bottom left in the Grist application, or simply email support@getgrist.com .","title":"Learning Grist"},{"location":"newsletters/2020-08/","text":"August 2020 Newsletter # /* restore some poorly overridden defaults */ .newsletter-header .table { background-color: initial; border: initial; } .newsletter-header .table > tbody > tr > td { padding: initial; border: initial; vertical-align: initial; } .newsletter-header img.header-img { padding: initial; max-width: initial; display: initial; padding: initial; line-height: initial; background-color: initial; border: initial; border-radius: initial; margin: initial; } /* copy newsletter styles, with a prefix for sufficient specificity */ .newsletter-header .header { border: none; padding: 0; margin: 0; } .newsletter-header table > tbody > tr > td.header-image { width: 80px; padding-right: 16px; } .newsletter-header table > tbody > tr > td.header-text { background-color: #c4ffcd; padding: 16px 36px; } .newsletter-header table.header-top { border: none; padding: 0; margin: 0; width: 100%; } .header-title { font-family: Helvetica Neue, Helvetica, Arial, sans-serif; font-size: 24px; line-height: 28px; } .header-month { } .header-welcome { margin-top: 12px; color: #666666; } Grist for the Mill August 2020 \u2022 getgrist.com Welcome to our monthly newsletter of updates and tips for Grist users. Quick Tips # Date Offsets. It is easy to get into muddles calculating dates. DATEADD is an easy and reliable way to add years, months, weeks, and days to a date. For example, to calculate three months on from a specific date, do DATEADD($date, months=3) . For a week and a day before that, do DATEADD($date, months=3, weeks=-1, day=-1) . Simple! Column Names. Sometimes, there is a tension between choosing a column name as a verbose label to explain what it is about, and choosing something short and snappy that is comfortable in formulas. You can have both! Just open the column options and uncheck \u201c Use Name as ID? \u201d. Then you can set the name used as a label and the name used in formulas separately. And as always with Grist, if you change your mind later you can change or relink the names and all your formulas will update automatically. What\u2019s New # Sort your documents by modification date. You can now choose to order your documents so that the most recently changed ones show up first, using the new By Name / By Date Modified option at the top right of document lists. List documents as icons. You may now also control whether documents show as a grid of icons or as a list of names, using the new grid and stack icons at the top right of document lists. Reactive custom widgets. We have made it simple for web developers to create Custom Widgets that offer new reactive views of your data that update automatically. A developer need only call grist.onRecord(s) to subscribe to a record or a set of records linked to the widget; after that, presentation is a matter of preparing HTML/CSS/JS assets (no Grist-specific knowledge needed). The user of the widget controls data selection using regular Widget Linking . We invite web developers to have a go at building new widgets or visualizations, and we\u2019d be excited to hear about the results (shoot us a mail at support@getgrist.com ). New Examples # Here is an example of what you can do with Grist: Preparing Invoices : Preview printable invoices side by side with your client and order data. Enter billable items quickly, making use of formulas, and see the invoice update immediately just like any other part of a spreadsheet. This is also an example of the kind of new visualization that can be built with Custom Widgets . Learning Grist # Get started quickly with basic Grist concepts by watching this playlist of a few very short introductory videos: Grist Video Series . Each of our featured Examples & Templates has a related tutorial that shows step-by-step how to build it from scratch. Read through one to gain a deeper understanding of how various features play together. Visit our Help Center to find all of the above, along with the full product documentation. Questions or suggestions? Click the Give Feedback link near the bottom left in the Grist application, or simply email support@getgrist.com .","title":"2020/08"},{"location":"newsletters/2020-08/#august-2020-newsletter","text":"/* restore some poorly overridden defaults */ .newsletter-header .table { background-color: initial; border: initial; } .newsletter-header .table > tbody > tr > td { padding: initial; border: initial; vertical-align: initial; } .newsletter-header img.header-img { padding: initial; max-width: initial; display: initial; padding: initial; line-height: initial; background-color: initial; border: initial; border-radius: initial; margin: initial; } /* copy newsletter styles, with a prefix for sufficient specificity */ .newsletter-header .header { border: none; padding: 0; margin: 0; } .newsletter-header table > tbody > tr > td.header-image { width: 80px; padding-right: 16px; } .newsletter-header table > tbody > tr > td.header-text { background-color: #c4ffcd; padding: 16px 36px; } .newsletter-header table.header-top { border: none; padding: 0; margin: 0; width: 100%; } .header-title { font-family: Helvetica Neue, Helvetica, Arial, sans-serif; font-size: 24px; line-height: 28px; } .header-month { } .header-welcome { margin-top: 12px; color: #666666; } Grist for the Mill August 2020 \u2022 getgrist.com Welcome to our monthly newsletter of updates and tips for Grist users.","title":"August 2020 Newsletter"},{"location":"newsletters/2020-08/#quick-tips","text":"Date Offsets. It is easy to get into muddles calculating dates. DATEADD is an easy and reliable way to add years, months, weeks, and days to a date. For example, to calculate three months on from a specific date, do DATEADD($date, months=3) . For a week and a day before that, do DATEADD($date, months=3, weeks=-1, day=-1) . Simple! Column Names. Sometimes, there is a tension between choosing a column name as a verbose label to explain what it is about, and choosing something short and snappy that is comfortable in formulas. You can have both! Just open the column options and uncheck \u201c Use Name as ID? \u201d. Then you can set the name used as a label and the name used in formulas separately. And as always with Grist, if you change your mind later you can change or relink the names and all your formulas will update automatically.","title":"Quick Tips"},{"location":"newsletters/2020-08/#whats-new","text":"Sort your documents by modification date. You can now choose to order your documents so that the most recently changed ones show up first, using the new By Name / By Date Modified option at the top right of document lists. List documents as icons. You may now also control whether documents show as a grid of icons or as a list of names, using the new grid and stack icons at the top right of document lists. Reactive custom widgets. We have made it simple for web developers to create Custom Widgets that offer new reactive views of your data that update automatically. A developer need only call grist.onRecord(s) to subscribe to a record or a set of records linked to the widget; after that, presentation is a matter of preparing HTML/CSS/JS assets (no Grist-specific knowledge needed). The user of the widget controls data selection using regular Widget Linking . We invite web developers to have a go at building new widgets or visualizations, and we\u2019d be excited to hear about the results (shoot us a mail at support@getgrist.com ).","title":"What\u2019s New"},{"location":"newsletters/2020-08/#new-examples","text":"Here is an example of what you can do with Grist: Preparing Invoices : Preview printable invoices side by side with your client and order data. Enter billable items quickly, making use of formulas, and see the invoice update immediately just like any other part of a spreadsheet. This is also an example of the kind of new visualization that can be built with Custom Widgets .","title":"New Examples"},{"location":"newsletters/2020-08/#learning-grist","text":"Get started quickly with basic Grist concepts by watching this playlist of a few very short introductory videos: Grist Video Series . Each of our featured Examples & Templates has a related tutorial that shows step-by-step how to build it from scratch. Read through one to gain a deeper understanding of how various features play together. Visit our Help Center to find all of the above, along with the full product documentation. Questions or suggestions? Click the Give Feedback link near the bottom left in the Grist application, or simply email support@getgrist.com .","title":"Learning Grist"},{"location":"newsletters/2020-09/","text":"September 2020 Newsletter # /* restore some poorly overridden defaults */ .newsletter-header .table { background-color: initial; border: initial; } .newsletter-header .table > tbody > tr > td { padding: initial; border: initial; vertical-align: initial; } .newsletter-header img.header-img { padding: initial; max-width: initial; display: initial; padding: initial; line-height: initial; background-color: initial; border: initial; border-radius: initial; margin: initial; } /* copy newsletter styles, with a prefix for sufficient specificity */ .newsletter-header .header { border: none; padding: 0; margin: 0; } .newsletter-header table > tbody > tr > td.header-image { width: 80px; padding-right: 16px; } .newsletter-header table > tbody > tr > td.header-text { background-color: #c4ffcd; padding: 16px 36px; } .newsletter-header table.header-top { border: none; padding: 0; margin: 0; width: 100%; } .header-title { font-family: Helvetica Neue, Helvetica, Arial, sans-serif; font-size: 24px; line-height: 28px; } .header-month { } .header-welcome { margin-top: 12px; color: #666666; } Grist for the Mill September 2020 \u2022 getgrist.com Welcome to our monthly newsletter of updates and tips for Grist users. Quick Tips # Keyboard Shortcuts. Grist supports many keyboard shortcuts, including quite a few from Excel and Google Sheets. These are listed here , and also available within Grist by pressing F1 or \u2318 / (Mac) or Ctrl + / (Windows). Referenced Columns. With the cursor anywhere in a column of type Reference (used to store a pointer to another record), the Column Options panel on the right has a section called \u201cAdd Referenced Columns\u201d. It allows quickly adding any field from the linked record. If you hit Enter on the added column, you\u2019ll notice that it is simply a formula column, such as $Contact.Email . What\u2019s New # Public Sharing. You can now share your documents publicly. In the \u201cShare\u201d menu ( ) on top, select \u201cManage Users\u201d. Then toggle the dropdown next to \u201cPublic Access\u201d to \u201cOn\u201d: Once you confirm the change, anyone with the link to your document will be able to view it. They don\u2019t even need to have a Grist login. The \u201cCopy Link\u201d button is handy to copy the link to the clipboard for pasting into an email, tweet, or anywhere else. You can also allow anyone with the link to your document to edit it: simply switch the role in the Public Access row to Editor. Note that this allows anyone with the link to change absolutely anything in your document, including deleting all the data. The snapshots in Document History should help if anything goes wrong. Improved Formula Suggestions. While typing in formulas, Grist is now more helpful in suggesting common functions, and includes their parameters, and a link to documentation. New Examples # Here is an example of what you can do with Grist: Tracking Payroll : This template is convenient for small businesses, especially those with part-time employees. Grist can help you keep track of employee hours, rates, and roles, and to reduce mistakes with up-to-date payroll summaries and detailed histories of rates and hours. Learning Grist # Get started quickly with basic Grist concepts by watching this playlist of a few very short introductory videos: Grist Video Series . Each of our featured Examples & Templates has a related tutorial that shows step-by-step how to build it from scratch. Read through one to gain a deeper understanding of how various features play together. Visit our Help Center to find all of the above, along with the full product documentation. Questions or suggestions? Click the Give Feedback link near the bottom left in the Grist application, or simply email support@getgrist.com .","title":"2020/09"},{"location":"newsletters/2020-09/#september-2020-newsletter","text":"/* restore some poorly overridden defaults */ .newsletter-header .table { background-color: initial; border: initial; } .newsletter-header .table > tbody > tr > td { padding: initial; border: initial; vertical-align: initial; } .newsletter-header img.header-img { padding: initial; max-width: initial; display: initial; padding: initial; line-height: initial; background-color: initial; border: initial; border-radius: initial; margin: initial; } /* copy newsletter styles, with a prefix for sufficient specificity */ .newsletter-header .header { border: none; padding: 0; margin: 0; } .newsletter-header table > tbody > tr > td.header-image { width: 80px; padding-right: 16px; } .newsletter-header table > tbody > tr > td.header-text { background-color: #c4ffcd; padding: 16px 36px; } .newsletter-header table.header-top { border: none; padding: 0; margin: 0; width: 100%; } .header-title { font-family: Helvetica Neue, Helvetica, Arial, sans-serif; font-size: 24px; line-height: 28px; } .header-month { } .header-welcome { margin-top: 12px; color: #666666; } Grist for the Mill September 2020 \u2022 getgrist.com Welcome to our monthly newsletter of updates and tips for Grist users.","title":"September 2020 Newsletter"},{"location":"newsletters/2020-09/#quick-tips","text":"Keyboard Shortcuts. Grist supports many keyboard shortcuts, including quite a few from Excel and Google Sheets. These are listed here , and also available within Grist by pressing F1 or \u2318 / (Mac) or Ctrl + / (Windows). Referenced Columns. With the cursor anywhere in a column of type Reference (used to store a pointer to another record), the Column Options panel on the right has a section called \u201cAdd Referenced Columns\u201d. It allows quickly adding any field from the linked record. If you hit Enter on the added column, you\u2019ll notice that it is simply a formula column, such as $Contact.Email .","title":"Quick Tips"},{"location":"newsletters/2020-09/#whats-new","text":"Public Sharing. You can now share your documents publicly. In the \u201cShare\u201d menu ( ) on top, select \u201cManage Users\u201d. Then toggle the dropdown next to \u201cPublic Access\u201d to \u201cOn\u201d: Once you confirm the change, anyone with the link to your document will be able to view it. They don\u2019t even need to have a Grist login. The \u201cCopy Link\u201d button is handy to copy the link to the clipboard for pasting into an email, tweet, or anywhere else. You can also allow anyone with the link to your document to edit it: simply switch the role in the Public Access row to Editor. Note that this allows anyone with the link to change absolutely anything in your document, including deleting all the data. The snapshots in Document History should help if anything goes wrong. Improved Formula Suggestions. While typing in formulas, Grist is now more helpful in suggesting common functions, and includes their parameters, and a link to documentation.","title":"What\u2019s New"},{"location":"newsletters/2020-09/#new-examples","text":"Here is an example of what you can do with Grist: Tracking Payroll : This template is convenient for small businesses, especially those with part-time employees. Grist can help you keep track of employee hours, rates, and roles, and to reduce mistakes with up-to-date payroll summaries and detailed histories of rates and hours.","title":"New Examples"},{"location":"newsletters/2020-09/#learning-grist","text":"Get started quickly with basic Grist concepts by watching this playlist of a few very short introductory videos: Grist Video Series . Each of our featured Examples & Templates has a related tutorial that shows step-by-step how to build it from scratch. Read through one to gain a deeper understanding of how various features play together. Visit our Help Center to find all of the above, along with the full product documentation. Questions or suggestions? Click the Give Feedback link near the bottom left in the Grist application, or simply email support@getgrist.com .","title":"Learning Grist"},{"location":"newsletters/2020-10/","text":"October 2020 Newsletter # /* restore some poorly overridden defaults */ .newsletter-header .table { background-color: initial; border: initial; } .newsletter-header .table > tbody > tr > td { padding: initial; border: initial; vertical-align: initial; } .newsletter-header img.header-img { padding: initial; max-width: initial; display: initial; padding: initial; line-height: initial; background-color: initial; border: initial; border-radius: initial; margin: initial; } /* copy newsletter styles, with a prefix for sufficient specificity */ .newsletter-header .header { border: none; padding: 0; margin: 0; } .newsletter-header table > tbody > tr > td.header-image { width: 80px; padding-right: 16px; } .newsletter-header table > tbody > tr > td.header-text { background-color: #c4ffcd; padding: 16px 36px; } .newsletter-header table.header-top { border: none; padding: 0; margin: 0; width: 100%; } .header-title { font-family: Helvetica Neue, Helvetica, Arial, sans-serif; font-size: 24px; line-height: 28px; } .header-month { } .header-welcome { margin-top: 12px; color: #666666; } Grist for the Mill October 2020 \u2022 getgrist.com Welcome to our monthly newsletter of updates and tips for Grist users. Quick Tips # Fill a Range. To fill a range of cells with the same value, enter the value in the top cell, then select the range below starting with this cell (which you can do by dragging the mouse, or Shift -clicking the bottom cell), then press Ctrl + D (Windows) or \u2318 D (Mac). Remember it as \u201cD\u201d for filling D own. The usual Copy-Paste shortcuts work too \u2013 Ctrl + C Ctrl + V (Windows) or \u2318 C \u2318 V (Mac). Pasting a value into a larger range will fill the range with multiple copies of the value. Conditional Expressions. If you have a formula like $Birthday.year , you\u2019ll find that when the Birthday column is empty, the formula shows an error. It\u2019s easy to avoid it using Python\u2019s conditional expressions: $Birthday.year if $Birthday else None The same idea can help in other situations, e.g. to avoid a ZeroDivisionError: $Total / $Count if $Count else 0 What\u2019s New # Printing. You can now easily print any widget on your screen, whether a table of data, a card, or a custom widget. Click the three-dots icon on top of the widget, and select \u201cPrint Widget\u201d: Printing also works for special-purpose widgets such as Invoices or Mailing Labels (see below). Open Source Beta # We are excited to announce that we are taking Grist open-source! The open-source version should be considered in Beta for now, but eager developers are welcome to check it out: https://github.com/gristlabs/grist-core . The secure managed service you know and love remains unchanged, and will be all the stronger from engagement with the open-source community. Placing our code in the public domain also brings added trust in quality of code and in long-term availability of Grist. Read more at Why Open Source . New Examples # Print Mailing Labels . This custom widget supports popular label sizes and makes it easy to create printable labels and have them available at the click of a button. It\u2019s yet another example of the extensibility of Grist. Learning Grist # Get started quickly with basic Grist concepts by watching this playlist of a few very short introductory videos: Grist Video Series . Each of our featured Examples & Templates has a related tutorial that shows step-by-step how to build it from scratch. Read through one to gain a deeper understanding of how various features play together. Visit our Help Center to find all of the above, along with the full product documentation. Questions or suggestions? Click the Give Feedback link near the bottom left in the Grist application, or simply email support@getgrist.com .","title":"2020/10"},{"location":"newsletters/2020-10/#october-2020-newsletter","text":"/* restore some poorly overridden defaults */ .newsletter-header .table { background-color: initial; border: initial; } .newsletter-header .table > tbody > tr > td { padding: initial; border: initial; vertical-align: initial; } .newsletter-header img.header-img { padding: initial; max-width: initial; display: initial; padding: initial; line-height: initial; background-color: initial; border: initial; border-radius: initial; margin: initial; } /* copy newsletter styles, with a prefix for sufficient specificity */ .newsletter-header .header { border: none; padding: 0; margin: 0; } .newsletter-header table > tbody > tr > td.header-image { width: 80px; padding-right: 16px; } .newsletter-header table > tbody > tr > td.header-text { background-color: #c4ffcd; padding: 16px 36px; } .newsletter-header table.header-top { border: none; padding: 0; margin: 0; width: 100%; } .header-title { font-family: Helvetica Neue, Helvetica, Arial, sans-serif; font-size: 24px; line-height: 28px; } .header-month { } .header-welcome { margin-top: 12px; color: #666666; } Grist for the Mill October 2020 \u2022 getgrist.com Welcome to our monthly newsletter of updates and tips for Grist users.","title":"October 2020 Newsletter"},{"location":"newsletters/2020-10/#quick-tips","text":"Fill a Range. To fill a range of cells with the same value, enter the value in the top cell, then select the range below starting with this cell (which you can do by dragging the mouse, or Shift -clicking the bottom cell), then press Ctrl + D (Windows) or \u2318 D (Mac). Remember it as \u201cD\u201d for filling D own. The usual Copy-Paste shortcuts work too \u2013 Ctrl + C Ctrl + V (Windows) or \u2318 C \u2318 V (Mac). Pasting a value into a larger range will fill the range with multiple copies of the value. Conditional Expressions. If you have a formula like $Birthday.year , you\u2019ll find that when the Birthday column is empty, the formula shows an error. It\u2019s easy to avoid it using Python\u2019s conditional expressions: $Birthday.year if $Birthday else None The same idea can help in other situations, e.g. to avoid a ZeroDivisionError: $Total / $Count if $Count else 0","title":"Quick Tips"},{"location":"newsletters/2020-10/#whats-new","text":"Printing. You can now easily print any widget on your screen, whether a table of data, a card, or a custom widget. Click the three-dots icon on top of the widget, and select \u201cPrint Widget\u201d: Printing also works for special-purpose widgets such as Invoices or Mailing Labels (see below).","title":"What\u2019s New"},{"location":"newsletters/2020-10/#open-source-beta","text":"We are excited to announce that we are taking Grist open-source! The open-source version should be considered in Beta for now, but eager developers are welcome to check it out: https://github.com/gristlabs/grist-core . The secure managed service you know and love remains unchanged, and will be all the stronger from engagement with the open-source community. Placing our code in the public domain also brings added trust in quality of code and in long-term availability of Grist. Read more at Why Open Source .","title":"Open Source Beta"},{"location":"newsletters/2020-10/#new-examples","text":"Print Mailing Labels . This custom widget supports popular label sizes and makes it easy to create printable labels and have them available at the click of a button. It\u2019s yet another example of the extensibility of Grist.","title":"New Examples"},{"location":"newsletters/2020-10/#learning-grist","text":"Get started quickly with basic Grist concepts by watching this playlist of a few very short introductory videos: Grist Video Series . Each of our featured Examples & Templates has a related tutorial that shows step-by-step how to build it from scratch. Read through one to gain a deeper understanding of how various features play together. Visit our Help Center to find all of the above, along with the full product documentation. Questions or suggestions? Click the Give Feedback link near the bottom left in the Grist application, or simply email support@getgrist.com .","title":"Learning Grist"},{"location":"newsletters/2020-11/","text":"November 2020 Newsletter # /* restore some poorly overridden defaults */ .newsletter-header .table { background-color: initial; border: initial; } .newsletter-header .table > tbody > tr > td { padding: initial; border: initial; vertical-align: initial; } .newsletter-header img.header-img { padding: initial; max-width: initial; display: initial; padding: initial; line-height: initial; background-color: initial; border: initial; border-radius: initial; margin: initial; } /* copy newsletter styles, with a prefix for sufficient specificity */ .newsletter-header .header { border: none; padding: 0; margin: 0; } .newsletter-header table > tbody > tr > td.header-image { width: 80px; padding-right: 16px; } .newsletter-header table > tbody > tr > td.header-text { background-color: #c4ffcd; padding: 16px 36px; } .newsletter-header table.header-top { border: none; padding: 0; margin: 0; width: 100%; } .header-title { font-family: Helvetica Neue, Helvetica, Arial, sans-serif; font-size: 24px; line-height: 28px; } .header-month { } .header-welcome { margin-top: 12px; color: #666666; } Grist for the Mill November 2020 \u2022 getgrist.com Welcome to our monthly newsletter of updates and tips for Grist users. Open Source Announcement # We are happy to announce the beta release of the open source version of Grist ! As a modern, powerful spreadsheet, Grist fits well into the open-source ecosystem, and is as friendly to hacker-developers as to hacker-users. Join the discussion at HackerNews . Read the announcement . This will interest technically-minded users who\u2019d like to extend Grist, or those with unusual requirements. Meanwhile, the service you know and love remains the best supported and cost-efficient option, and will benefit from the increased confidence in Grist source code. Quick Tips # Add a Record. Some of the simplest shortcuts are the most useful. To add a record, press Ctrl + = (Windows) or \u2318 = (Mac). Press Shift at the same time to insert the record above the cursor rather than below. Cook up a Unique Identifier. Let\u2019s say you\u2019d like to refer to records in a table, but don\u2019t have a column that identifies each record uniquely. Perhaps you have people with First_Name and Last_Name , or sessions with Program_Name and Date . To use such tables as a destination of a Reference column, you\u2019ll need a unique identifier. You can create one using a formula that stitches together the fields that identify a record uniquely. For example, create a column Full_Name with the formula $Last_Name + \", \" + $First_Name or a column Session_Name with the formula \"[%s] %s\" % ($Date, $Program_Name) The latter is Python syntax for formatting strings: each occurrence of %s in the quoted string is replaced by a value from the list in parentheses. What\u2019s New # Improved Attachments. The preview of attachments has been vastly improved, and supports showing PDF, video, and audio files. Simply double-click a cell with attachments to preview its content: View Differences. You can now view differences between a copy of a document you make using \u201cWork on a Copy\u201d and the original, as well as what changed since a backup snapshot in the document\u2019s history. Find the \u201cCompare\u201d menu item in the Share menu: This feature is experimental for now, but is already quite useful: This supports the workflow of trying out changes , which should be familiar to users of version control systems such as Git. One of its benefits is allowing view-only users to propose changes, even though they cannot edit the document directly. New Examples # Treasure Hunt : Even better than using Grist for work is using Grist for fun! Check out this template that helps you plan a treasure hunt without losing track. Conspire with relatives or friends online to create a trail of clues, then watch and laugh as the rest of your household flails their way through it. Learning Grist # Get started quickly with basic Grist concepts by watching this playlist of a few very short introductory videos: Grist Video Series . Each of our featured Examples & Templates has a related tutorial that shows step-by-step how to build it from scratch. Read through one to gain a deeper understanding of how various features play together. Visit our Help Center to find all of the above, along with the full product documentation. Questions or suggestions? Click the Give Feedback link near the bottom left in the Grist application, or simply email support@getgrist.com .","title":"2020/11"},{"location":"newsletters/2020-11/#november-2020-newsletter","text":"/* restore some poorly overridden defaults */ .newsletter-header .table { background-color: initial; border: initial; } .newsletter-header .table > tbody > tr > td { padding: initial; border: initial; vertical-align: initial; } .newsletter-header img.header-img { padding: initial; max-width: initial; display: initial; padding: initial; line-height: initial; background-color: initial; border: initial; border-radius: initial; margin: initial; } /* copy newsletter styles, with a prefix for sufficient specificity */ .newsletter-header .header { border: none; padding: 0; margin: 0; } .newsletter-header table > tbody > tr > td.header-image { width: 80px; padding-right: 16px; } .newsletter-header table > tbody > tr > td.header-text { background-color: #c4ffcd; padding: 16px 36px; } .newsletter-header table.header-top { border: none; padding: 0; margin: 0; width: 100%; } .header-title { font-family: Helvetica Neue, Helvetica, Arial, sans-serif; font-size: 24px; line-height: 28px; } .header-month { } .header-welcome { margin-top: 12px; color: #666666; } Grist for the Mill November 2020 \u2022 getgrist.com Welcome to our monthly newsletter of updates and tips for Grist users.","title":"November 2020 Newsletter"},{"location":"newsletters/2020-11/#open-source-announcement","text":"We are happy to announce the beta release of the open source version of Grist ! As a modern, powerful spreadsheet, Grist fits well into the open-source ecosystem, and is as friendly to hacker-developers as to hacker-users. Join the discussion at HackerNews . Read the announcement . This will interest technically-minded users who\u2019d like to extend Grist, or those with unusual requirements. Meanwhile, the service you know and love remains the best supported and cost-efficient option, and will benefit from the increased confidence in Grist source code.","title":"Open Source Announcement"},{"location":"newsletters/2020-11/#quick-tips","text":"Add a Record. Some of the simplest shortcuts are the most useful. To add a record, press Ctrl + = (Windows) or \u2318 = (Mac). Press Shift at the same time to insert the record above the cursor rather than below. Cook up a Unique Identifier. Let\u2019s say you\u2019d like to refer to records in a table, but don\u2019t have a column that identifies each record uniquely. Perhaps you have people with First_Name and Last_Name , or sessions with Program_Name and Date . To use such tables as a destination of a Reference column, you\u2019ll need a unique identifier. You can create one using a formula that stitches together the fields that identify a record uniquely. For example, create a column Full_Name with the formula $Last_Name + \", \" + $First_Name or a column Session_Name with the formula \"[%s] %s\" % ($Date, $Program_Name) The latter is Python syntax for formatting strings: each occurrence of %s in the quoted string is replaced by a value from the list in parentheses.","title":"Quick Tips"},{"location":"newsletters/2020-11/#whats-new","text":"Improved Attachments. The preview of attachments has been vastly improved, and supports showing PDF, video, and audio files. Simply double-click a cell with attachments to preview its content: View Differences. You can now view differences between a copy of a document you make using \u201cWork on a Copy\u201d and the original, as well as what changed since a backup snapshot in the document\u2019s history. Find the \u201cCompare\u201d menu item in the Share menu: This feature is experimental for now, but is already quite useful: This supports the workflow of trying out changes , which should be familiar to users of version control systems such as Git. One of its benefits is allowing view-only users to propose changes, even though they cannot edit the document directly.","title":"What\u2019s New"},{"location":"newsletters/2020-11/#new-examples","text":"Treasure Hunt : Even better than using Grist for work is using Grist for fun! Check out this template that helps you plan a treasure hunt without losing track. Conspire with relatives or friends online to create a trail of clues, then watch and laugh as the rest of your household flails their way through it.","title":"New Examples"},{"location":"newsletters/2020-11/#learning-grist","text":"Get started quickly with basic Grist concepts by watching this playlist of a few very short introductory videos: Grist Video Series . Each of our featured Examples & Templates has a related tutorial that shows step-by-step how to build it from scratch. Read through one to gain a deeper understanding of how various features play together. Visit our Help Center to find all of the above, along with the full product documentation. Questions or suggestions? Click the Give Feedback link near the bottom left in the Grist application, or simply email support@getgrist.com .","title":"Learning Grist"},{"location":"newsletters/2020-12/","text":"December 2020 Newsletter # /* restore some poorly overridden defaults */ .newsletter-header .table { background-color: initial; border: initial; } .newsletter-header .table > tbody > tr > td { padding: initial; border: initial; vertical-align: initial; } .newsletter-header img.header-img { padding: initial; max-width: initial; display: initial; padding: initial; line-height: initial; background-color: initial; border: initial; border-radius: initial; margin: initial; } /* copy newsletter styles, with a prefix for sufficient specificity */ .newsletter-header .header { border: none; padding: 0; margin: 0; } .newsletter-header table > tbody > tr > td.header-image { width: 80px; padding-right: 16px; } .newsletter-header table > tbody > tr > td.header-text { background-color: #c4ffcd; padding: 16px 36px; } .newsletter-header table.header-top { border: none; padding: 0; margin: 0; width: 100%; } .header-title { font-family: Helvetica Neue, Helvetica, Arial, sans-serif; font-size: 24px; line-height: 28px; } .header-month { } .header-welcome { margin-top: 12px; color: #666666; } Grist for the Mill December 2020 \u2022 getgrist.com Welcome to our monthly newsletter of updates and tips for Grist users. What\u2019s New # Want to check how your document has changed recently? Just press the Document History button in the bottom left of your document, choose a snapshot on the right, click the three-dots symbol ( ) beside it, and select one of the new Compare to Previous or Compare to Current options. What\u2019s Coming # Grist has brought you a lot of new features in 2020, and it looks like 2021 is going to be another bumper year. One big feature we\u2019re particularly excited about is fine-grained access control, where you\u2019ll be able to determine who can see (or edit) which parts of your document at the table, column, and row level. Several of you have been asking for this, in different ways, and we\u2019re happy to have a solution in hand that will cover a lot of use-cases. If you are interested in getting early access, let us know! New Examples # Show a Map . This custom widget renders a list of locations as a geographic map. So if you\u2019re making a list of places you want to go once travel is a thing again, you can lay them out and start making plans\u2026 Learning Grist # Get started quickly with basic Grist concepts by watching this playlist of a few very short introductory videos: Grist Video Series . Each of our featured Examples & Templates has a related tutorial that shows step-by-step how to build it from scratch. Read through one to gain a deeper understanding of how various features play together. Visit our Help Center to find all of the above, along with the full product documentation. Questions or suggestions? Click the Give Feedback link near the bottom left in the Grist application, or simply email support@getgrist.com .","title":"2020/12"},{"location":"newsletters/2020-12/#december-2020-newsletter","text":"/* restore some poorly overridden defaults */ .newsletter-header .table { background-color: initial; border: initial; } .newsletter-header .table > tbody > tr > td { padding: initial; border: initial; vertical-align: initial; } .newsletter-header img.header-img { padding: initial; max-width: initial; display: initial; padding: initial; line-height: initial; background-color: initial; border: initial; border-radius: initial; margin: initial; } /* copy newsletter styles, with a prefix for sufficient specificity */ .newsletter-header .header { border: none; padding: 0; margin: 0; } .newsletter-header table > tbody > tr > td.header-image { width: 80px; padding-right: 16px; } .newsletter-header table > tbody > tr > td.header-text { background-color: #c4ffcd; padding: 16px 36px; } .newsletter-header table.header-top { border: none; padding: 0; margin: 0; width: 100%; } .header-title { font-family: Helvetica Neue, Helvetica, Arial, sans-serif; font-size: 24px; line-height: 28px; } .header-month { } .header-welcome { margin-top: 12px; color: #666666; } Grist for the Mill December 2020 \u2022 getgrist.com Welcome to our monthly newsletter of updates and tips for Grist users.","title":"December 2020 Newsletter"},{"location":"newsletters/2020-12/#whats-new","text":"Want to check how your document has changed recently? Just press the Document History button in the bottom left of your document, choose a snapshot on the right, click the three-dots symbol ( ) beside it, and select one of the new Compare to Previous or Compare to Current options.","title":"What's New"},{"location":"newsletters/2020-12/#whats-coming","text":"Grist has brought you a lot of new features in 2020, and it looks like 2021 is going to be another bumper year. One big feature we\u2019re particularly excited about is fine-grained access control, where you\u2019ll be able to determine who can see (or edit) which parts of your document at the table, column, and row level. Several of you have been asking for this, in different ways, and we\u2019re happy to have a solution in hand that will cover a lot of use-cases. If you are interested in getting early access, let us know!","title":"What's Coming"},{"location":"newsletters/2020-12/#new-examples","text":"Show a Map . This custom widget renders a list of locations as a geographic map. So if you\u2019re making a list of places you want to go once travel is a thing again, you can lay them out and start making plans\u2026","title":"New Examples"},{"location":"newsletters/2020-12/#learning-grist","text":"Get started quickly with basic Grist concepts by watching this playlist of a few very short introductory videos: Grist Video Series . Each of our featured Examples & Templates has a related tutorial that shows step-by-step how to build it from scratch. Read through one to gain a deeper understanding of how various features play together. Visit our Help Center to find all of the above, along with the full product documentation. Questions or suggestions? Click the Give Feedback link near the bottom left in the Grist application, or simply email support@getgrist.com .","title":"Learning Grist"},{"location":"newsletters/2021-01/","text":"January 2021 Newsletter # /* restore some poorly overridden defaults */ .newsletter-header .table { background-color: initial; border: initial; } .newsletter-header .table > tbody > tr > td { padding: initial; border: initial; vertical-align: initial; } .newsletter-header img.header-img { padding: initial; max-width: initial; display: initial; padding: initial; line-height: initial; background-color: initial; border: initial; border-radius: initial; margin: initial; margin-bottom: -32px; display: inline-block; width: 80px; height: 128px; } /* copy newsletter styles, with a prefix for sufficient specificity */ .newsletter-header .header { border: none; padding: 0; margin: 0; } .newsletter-header table > tbody > tr > td.header-image { width: 80px; padding-right: 16px; } .newsletter-header table > tbody > tr > td.header-text { background-color: #c4ffcd; padding: 16px 36px; } .newsletter-header table.header-top { border: none; padding: 0; margin: 0; width: 100%; } .header-title { font-family: Helvetica Neue, Helvetica, Arial, sans-serif; font-size: 24px; line-height: 28px; } .header-month { } .header-welcome { margin-top: 12px; color: #666666; } .center { text-align: center; } Grist for the Mill January 2021 \u2022 getgrist.com Welcome to our monthly newsletter of updates and tips for Grist users. Quick Tips # Entering Formulas. To enter a formula in Grist, simply hit the equal sign ( = ) on the keyboard. To edit an existing formula, hit Enter . Unlike a typical spreadsheet, a Grist formula applies to the whole column, and you can edit this single formula via any of the cells in the column. Read more about formulas . Use Date Picker. If you convert a column to type Date, you\u2019ll be able to enter dates using the date picker interface. To convert a column, open the right-side \u201cColumn\u201d panel, and select \u201cDate\u201d under Column Type: There are options for how to format dates too! See here for more . New Example # In our Task Management article, we share a document similar to what we use internally at Grist Labs to manage our work. This simple document works better for us than any custom software, thanks to the combination of data linking, dropdowns to assign tasks, easy copy-pasting when needed, and live collaboration. And it works just as well in the all-remote work setup, when all our meetings are over video. Find a Consultant, Be a Consultant # Get help building. Many businesses have complex data. Feel free to reach out to us for help building your database. A good way is to email us at support@getgrist.com with a description of what you\u2019d like for your database (maybe even sketch some screens on paper and send photos). Then schedule a call . Often that\u2019s enough to get rolling and continue on your own. For bigger projects, or custom integrations, we can recommend a consultant to work with. Help others! Are you a freelancer? Do you enjoy building in Grist and organizing data? We\u2019d be glad to support you, and to add you to our list of independent Grist consultants. Please fill out this interest form: register to be a Grist consultant . Learning Grist # Get started quickly with basic Grist concepts by watching this playlist of a few very short introductory videos: Grist Video Series . Each of our featured Examples & Templates has a related tutorial that shows step-by-step how to build it from scratch. Read through one to gain a deeper understanding of how various features play together. Visit our Help Center to find all of the above, along with the full product documentation. Questions or suggestions? Click the Give Feedback link near the bottom left in the Grist application, or simply email support@getgrist.com .","title":"2021/01"},{"location":"newsletters/2021-01/#january-2021-newsletter","text":"/* restore some poorly overridden defaults */ .newsletter-header .table { background-color: initial; border: initial; } .newsletter-header .table > tbody > tr > td { padding: initial; border: initial; vertical-align: initial; } .newsletter-header img.header-img { padding: initial; max-width: initial; display: initial; padding: initial; line-height: initial; background-color: initial; border: initial; border-radius: initial; margin: initial; margin-bottom: -32px; display: inline-block; width: 80px; height: 128px; } /* copy newsletter styles, with a prefix for sufficient specificity */ .newsletter-header .header { border: none; padding: 0; margin: 0; } .newsletter-header table > tbody > tr > td.header-image { width: 80px; padding-right: 16px; } .newsletter-header table > tbody > tr > td.header-text { background-color: #c4ffcd; padding: 16px 36px; } .newsletter-header table.header-top { border: none; padding: 0; margin: 0; width: 100%; } .header-title { font-family: Helvetica Neue, Helvetica, Arial, sans-serif; font-size: 24px; line-height: 28px; } .header-month { } .header-welcome { margin-top: 12px; color: #666666; } .center { text-align: center; } Grist for the Mill January 2021 \u2022 getgrist.com Welcome to our monthly newsletter of updates and tips for Grist users.","title":"January 2021 Newsletter"},{"location":"newsletters/2021-01/#quick-tips","text":"Entering Formulas. To enter a formula in Grist, simply hit the equal sign ( = ) on the keyboard. To edit an existing formula, hit Enter . Unlike a typical spreadsheet, a Grist formula applies to the whole column, and you can edit this single formula via any of the cells in the column. Read more about formulas . Use Date Picker. If you convert a column to type Date, you\u2019ll be able to enter dates using the date picker interface. To convert a column, open the right-side \u201cColumn\u201d panel, and select \u201cDate\u201d under Column Type: There are options for how to format dates too! See here for more .","title":"Quick Tips"},{"location":"newsletters/2021-01/#new-example","text":"In our Task Management article, we share a document similar to what we use internally at Grist Labs to manage our work. This simple document works better for us than any custom software, thanks to the combination of data linking, dropdowns to assign tasks, easy copy-pasting when needed, and live collaboration. And it works just as well in the all-remote work setup, when all our meetings are over video.","title":"New Example"},{"location":"newsletters/2021-01/#find-a-consultant-be-a-consultant","text":"Get help building. Many businesses have complex data. Feel free to reach out to us for help building your database. A good way is to email us at support@getgrist.com with a description of what you\u2019d like for your database (maybe even sketch some screens on paper and send photos). Then schedule a call . Often that\u2019s enough to get rolling and continue on your own. For bigger projects, or custom integrations, we can recommend a consultant to work with. Help others! Are you a freelancer? Do you enjoy building in Grist and organizing data? We\u2019d be glad to support you, and to add you to our list of independent Grist consultants. Please fill out this interest form: register to be a Grist consultant .","title":"Find a Consultant, Be a Consultant"},{"location":"newsletters/2021-01/#learning-grist","text":"Get started quickly with basic Grist concepts by watching this playlist of a few very short introductory videos: Grist Video Series . Each of our featured Examples & Templates has a related tutorial that shows step-by-step how to build it from scratch. Read through one to gain a deeper understanding of how various features play together. Visit our Help Center to find all of the above, along with the full product documentation. Questions or suggestions? Click the Give Feedback link near the bottom left in the Grist application, or simply email support@getgrist.com .","title":"Learning Grist"},{"location":"newsletters/2021-02/","text":"February 2021 Newsletter # /* restore some poorly overridden defaults */ .newsletter-header .table { background-color: initial; border: initial; } .newsletter-header .table > tbody > tr > td { padding: initial; border: initial; vertical-align: initial; } .newsletter-header img.header-img { padding: initial; max-width: initial; display: initial; padding: initial; line-height: initial; background-color: initial; border: initial; border-radius: initial; margin: initial; } /* copy newsletter styles, with a prefix for sufficient specificity */ .newsletter-header .header { border: none; padding: 0; margin: 0; } .newsletter-header table > tbody > tr > td.header-image { width: 80px; padding-right: 16px; } .newsletter-header table > tbody > tr > td.header-text { background-color: #c4ffcd; padding: 16px 36px; } .newsletter-header table.header-top { border: none; padding: 0; margin: 0; width: 100%; } .header-title { font-family: Helvetica Neue, Helvetica, Arial, sans-serif; font-size: 24px; line-height: 28px; } .header-month { } .header-welcome { margin-top: 12px; color: #666666; } .center { text-align: center; } Grist for the Mill February 2021 \u2022 getgrist.com Welcome to our monthly newsletter of updates and tips for Grist users. Quick Tips # Totals. To compute totals of a column, spreadsheet users will often reach for the last row of their table to enter a formula there. In Grist, every row is a database record, including the last row. But totals are certainly available! Instead of adding a row for totals, add a one-line summary table. Click the \u201cAdd New\u201d button, and select \u201cAdd Widget to Page\u201d. In the dialog that opens, click the summation icon ( ) next to the table you\u2019d like totals for: Click \u201cAdd to Page\u201d, and you\u2019ll see a one-line summary of your table. Use the drag handle just to the left of the title to move it below your table (where you normally expect totals). Grist creates sums of all numeric columns automatically. You can remove any you don\u2019t need, add new ones, or edit ones for which you need something other than sum (perhaps AVERAGE , MAX , or an entirely custom Python calculation). Read Summary tables for more on summary tables and their many uses. Real-time Sharing. Even on the free plan, you can share a document and collaborate on it. Any change that you or another editor makes will immediately show up on the other person\u2019s screen. To share a document, click the sharing icon ( ), and select \u201cManage Users\u201d. In the dialog that opens, type in the email address of the person to invite. Change their role from Viewer to Editor if you\u2019d like to give them editing permission. Then click Confirm. Your collaborator now has access to your document, and Grist will send them an email with a link to it. Read more at Sharing . What\u2019s New # Grist mobile support has come a long way recently, and we are happy to say that you can now use Grist quite comfortably in mobile browsers such as Chrome, Safari, and Firefox. On small screens, you can find the list of pages from the button in the bottom bar: For pages with multiple widgets, only the active widget is expanded. Other widgets are collapsed until you touch to expand them: To edit a cell, simply double-tap it. Mobile support is still a work in progress. To get back to the desktop version on a mobile device, open your account menu, and select \u201cToggle Mobile Mode\u201d option: Please report any issues, and share suggestions for improvements! Learning Grist # Get started quickly with basic Grist concepts by watching this playlist of a few very short introductory videos: Grist Video Series . Each of our featured Examples & Templates has a related tutorial that shows step-by-step how to build it from scratch. Read through one to gain a deeper understanding of how various features play together. Visit our Help Center to find all of the above, along with the full product documentation. Questions or suggestions? Click the Give Feedback link near the bottom left in the Grist application, or simply email support@getgrist.com .","title":"2021/02"},{"location":"newsletters/2021-02/#february-2021-newsletter","text":"/* restore some poorly overridden defaults */ .newsletter-header .table { background-color: initial; border: initial; } .newsletter-header .table > tbody > tr > td { padding: initial; border: initial; vertical-align: initial; } .newsletter-header img.header-img { padding: initial; max-width: initial; display: initial; padding: initial; line-height: initial; background-color: initial; border: initial; border-radius: initial; margin: initial; } /* copy newsletter styles, with a prefix for sufficient specificity */ .newsletter-header .header { border: none; padding: 0; margin: 0; } .newsletter-header table > tbody > tr > td.header-image { width: 80px; padding-right: 16px; } .newsletter-header table > tbody > tr > td.header-text { background-color: #c4ffcd; padding: 16px 36px; } .newsletter-header table.header-top { border: none; padding: 0; margin: 0; width: 100%; } .header-title { font-family: Helvetica Neue, Helvetica, Arial, sans-serif; font-size: 24px; line-height: 28px; } .header-month { } .header-welcome { margin-top: 12px; color: #666666; } .center { text-align: center; } Grist for the Mill February 2021 \u2022 getgrist.com Welcome to our monthly newsletter of updates and tips for Grist users.","title":"February 2021 Newsletter"},{"location":"newsletters/2021-02/#quick-tips","text":"Totals. To compute totals of a column, spreadsheet users will often reach for the last row of their table to enter a formula there. In Grist, every row is a database record, including the last row. But totals are certainly available! Instead of adding a row for totals, add a one-line summary table. Click the \u201cAdd New\u201d button, and select \u201cAdd Widget to Page\u201d. In the dialog that opens, click the summation icon ( ) next to the table you\u2019d like totals for: Click \u201cAdd to Page\u201d, and you\u2019ll see a one-line summary of your table. Use the drag handle just to the left of the title to move it below your table (where you normally expect totals). Grist creates sums of all numeric columns automatically. You can remove any you don\u2019t need, add new ones, or edit ones for which you need something other than sum (perhaps AVERAGE , MAX , or an entirely custom Python calculation). Read Summary tables for more on summary tables and their many uses. Real-time Sharing. Even on the free plan, you can share a document and collaborate on it. Any change that you or another editor makes will immediately show up on the other person\u2019s screen. To share a document, click the sharing icon ( ), and select \u201cManage Users\u201d. In the dialog that opens, type in the email address of the person to invite. Change their role from Viewer to Editor if you\u2019d like to give them editing permission. Then click Confirm. Your collaborator now has access to your document, and Grist will send them an email with a link to it. Read more at Sharing .","title":"Quick Tips"},{"location":"newsletters/2021-02/#whats-new","text":"Grist mobile support has come a long way recently, and we are happy to say that you can now use Grist quite comfortably in mobile browsers such as Chrome, Safari, and Firefox. On small screens, you can find the list of pages from the button in the bottom bar: For pages with multiple widgets, only the active widget is expanded. Other widgets are collapsed until you touch to expand them: To edit a cell, simply double-tap it. Mobile support is still a work in progress. To get back to the desktop version on a mobile device, open your account menu, and select \u201cToggle Mobile Mode\u201d option: Please report any issues, and share suggestions for improvements!","title":"What's New"},{"location":"newsletters/2021-02/#learning-grist","text":"Get started quickly with basic Grist concepts by watching this playlist of a few very short introductory videos: Grist Video Series . Each of our featured Examples & Templates has a related tutorial that shows step-by-step how to build it from scratch. Read through one to gain a deeper understanding of how various features play together. Visit our Help Center to find all of the above, along with the full product documentation. Questions or suggestions? Click the Give Feedback link near the bottom left in the Grist application, or simply email support@getgrist.com .","title":"Learning Grist"},{"location":"newsletters/2021-03/","text":"March 2021 Newsletter # /* restore some poorly overridden defaults */ .newsletter-header .table { background-color: initial; border: initial; } .newsletter-header .table > tbody > tr > td { padding: initial; border: initial; vertical-align: initial; } .newsletter-header img.header-img { padding: initial; max-width: initial; display: initial; padding: initial; line-height: initial; background-color: initial; border: initial; border-radius: initial; margin: initial; } /* copy newsletter styles, with a prefix for sufficient specificity */ .newsletter-header .header { border: none; padding: 0; margin: 0; } .newsletter-header table > tbody > tr > td.header-image { width: 80px; padding-right: 16px; } .newsletter-header table > tbody > tr > td.header-text { background-color: #c4ffcd; padding: 16px 36px; } .newsletter-header table.header-top { border: none; padding: 0; margin: 0; width: 100%; } .header-title { font-family: Helvetica Neue, Helvetica, Arial, sans-serif; font-size: 24px; line-height: 28px; } .header-month { } .header-welcome { margin-top: 12px; color: #666666; } Grist for the Mill March 2021 \u2022 getgrist.com Welcome to our monthly newsletter of updates and tips for Grist users. Access rules # Grist now offers \u201caccess rules\u201d for fine-grained control of who can see (or edit) which parts of your document at the table, column, and row level. In December, we invited those interested in early access to try the feature out. We\u2019ve made a lot of improvements, and are now excited to open the feature to the public. Things to know about access rules: Until now, everyone you shared a document with saw the same content. Now, their views can be filtered. For example, a table or column may be visible only to certain users. Or some users may see only rows that meet a condition. Until now, all editors and owners of a document could change anything about its content. Now, document owners can control what specific editors can change. For example, a table or column may be locked for certain editors. Or some editors may only update, add, or remove rows that meet a condition. If you need it, editors can be organized into groups or teams using a table within the document itself, and granted permissions systematically. You can make special links to give ad-hoc view access to pieces of the document, including documents shared with the public. Access rules are marked as a Beta feature, meaning that the design of access rules is likely to evolve, and sometimes that will require updates to documents that use them. We won\u2019t make such changes lightly. Grist access rules put great power in your hands. With that power comes great responsibility. Take your time to read our documentation , explore the examples , and test the rules you create . Feel free to reach out to consult us as well, at support@getgrist.com . We\u2019ll be glad to help. New Example # Access rules let you control how a shared document is used, and maintain a separation of roles and responsibilities. In our Lead List example, we suppose an entrepeneur is using Grist as an ad-hoc lead tracker for sales and potential advisors, and show how they can use access rules to shape collaboration. Quick Tips # Cell Color . You can add a splash of color to a column using the Cell Color option for Columns (in tables) or Fields (in cards). The color will apply consistently in all views where cells from that column appear. SQL Queries . Grist documents are also downloadable SQL databases, in SQLite format. If you download your document (via the button) you can query it using the standard sqlite3 tool (available on the SQLite site ) or from just about any language or database tool. Your tables and columns in Grist will show up exactly as SQLite tables and columns. Here\u2019s a query against the Lead List example document: You may not need to do this often, but when you do it is very handy. We\u2019ve recently improved the fit between SQLite column types and Grist column types, so if a database importer fails to recognize a column, try recreating the column or converting it to a more precise type (e.g. Integer, Text, Numeric, Date, DateTime etc). Learning Grist # Get started quickly with basic Grist concepts by watching this playlist of a few very short introductory videos: Grist Video Series . Each of our featured Examples & Templates has a related tutorial that shows step-by-step how to build it from scratch. Read through one to gain a deeper understanding of how various features play together. Visit our Help Center to find all of the above, along with the full product documentation. Questions or suggestions? Click the Give Feedback link near the bottom left in the Grist application, or simply email support@getgrist.com .","title":"2021/03"},{"location":"newsletters/2021-03/#march-2021-newsletter","text":"/* restore some poorly overridden defaults */ .newsletter-header .table { background-color: initial; border: initial; } .newsletter-header .table > tbody > tr > td { padding: initial; border: initial; vertical-align: initial; } .newsletter-header img.header-img { padding: initial; max-width: initial; display: initial; padding: initial; line-height: initial; background-color: initial; border: initial; border-radius: initial; margin: initial; } /* copy newsletter styles, with a prefix for sufficient specificity */ .newsletter-header .header { border: none; padding: 0; margin: 0; } .newsletter-header table > tbody > tr > td.header-image { width: 80px; padding-right: 16px; } .newsletter-header table > tbody > tr > td.header-text { background-color: #c4ffcd; padding: 16px 36px; } .newsletter-header table.header-top { border: none; padding: 0; margin: 0; width: 100%; } .header-title { font-family: Helvetica Neue, Helvetica, Arial, sans-serif; font-size: 24px; line-height: 28px; } .header-month { } .header-welcome { margin-top: 12px; color: #666666; } Grist for the Mill March 2021 \u2022 getgrist.com Welcome to our monthly newsletter of updates and tips for Grist users.","title":"March 2021 Newsletter"},{"location":"newsletters/2021-03/#access-rules","text":"Grist now offers \u201caccess rules\u201d for fine-grained control of who can see (or edit) which parts of your document at the table, column, and row level. In December, we invited those interested in early access to try the feature out. We\u2019ve made a lot of improvements, and are now excited to open the feature to the public. Things to know about access rules: Until now, everyone you shared a document with saw the same content. Now, their views can be filtered. For example, a table or column may be visible only to certain users. Or some users may see only rows that meet a condition. Until now, all editors and owners of a document could change anything about its content. Now, document owners can control what specific editors can change. For example, a table or column may be locked for certain editors. Or some editors may only update, add, or remove rows that meet a condition. If you need it, editors can be organized into groups or teams using a table within the document itself, and granted permissions systematically. You can make special links to give ad-hoc view access to pieces of the document, including documents shared with the public. Access rules are marked as a Beta feature, meaning that the design of access rules is likely to evolve, and sometimes that will require updates to documents that use them. We won\u2019t make such changes lightly. Grist access rules put great power in your hands. With that power comes great responsibility. Take your time to read our documentation , explore the examples , and test the rules you create . Feel free to reach out to consult us as well, at support@getgrist.com . We\u2019ll be glad to help.","title":"Access rules"},{"location":"newsletters/2021-03/#new-example","text":"Access rules let you control how a shared document is used, and maintain a separation of roles and responsibilities. In our Lead List example, we suppose an entrepeneur is using Grist as an ad-hoc lead tracker for sales and potential advisors, and show how they can use access rules to shape collaboration.","title":"New Example"},{"location":"newsletters/2021-03/#quick-tips","text":"Cell Color . You can add a splash of color to a column using the Cell Color option for Columns (in tables) or Fields (in cards). The color will apply consistently in all views where cells from that column appear. SQL Queries . Grist documents are also downloadable SQL databases, in SQLite format. If you download your document (via the button) you can query it using the standard sqlite3 tool (available on the SQLite site ) or from just about any language or database tool. Your tables and columns in Grist will show up exactly as SQLite tables and columns. Here\u2019s a query against the Lead List example document: You may not need to do this often, but when you do it is very handy. We\u2019ve recently improved the fit between SQLite column types and Grist column types, so if a database importer fails to recognize a column, try recreating the column or converting it to a more precise type (e.g. Integer, Text, Numeric, Date, DateTime etc).","title":"Quick Tips"},{"location":"newsletters/2021-03/#learning-grist","text":"Get started quickly with basic Grist concepts by watching this playlist of a few very short introductory videos: Grist Video Series . Each of our featured Examples & Templates has a related tutorial that shows step-by-step how to build it from scratch. Read through one to gain a deeper understanding of how various features play together. Visit our Help Center to find all of the above, along with the full product documentation. Questions or suggestions? Click the Give Feedback link near the bottom left in the Grist application, or simply email support@getgrist.com .","title":"Learning Grist"},{"location":"newsletters/2021-04/","text":"April 2021 Newsletter # /* restore some poorly overridden defaults */ .newsletter-header .table { background-color: initial; border: initial; } .newsletter-header .table > tbody > tr > td { padding: initial; border: initial; vertical-align: initial; } .newsletter-header img.header-img { padding: initial; max-width: initial; display: initial; padding: initial; line-height: initial; background-color: initial; border: initial; border-radius: initial; margin: initial; } /* copy newsletter styles, with a prefix for sufficient specificity */ .newsletter-header .header { border: none; padding: 0; margin: 0; } .newsletter-header table > tbody > tr > td.header-image { width: 80px; padding-right: 16px; } .newsletter-header table > tbody > tr > td.header-text { background-color: #c4ffcd; padding: 16px 36px; } .newsletter-header table.header-top { border: none; padding: 0; margin: 0; width: 100%; } .header-title { font-family: Helvetica Neue, Helvetica, Arial, sans-serif; font-size: 24px; line-height: 28px; } .header-month { } .header-welcome { margin-top: 12px; color: #666666; } Grist for the Mill April 2021 \u2022 getgrist.com Welcome to our monthly newsletter of updates and tips for Grist users. Understanding Link Sharing # Last month we released granular access controls which makes it possible to limit who can see or edit which parts of a document, down to individual columns and rows. This same level of control can be set for documents shared via links with third parties who do not have a Grist account or who are not a part of your organization. For example, you may want to share purchase history with a customer, permit staff to see only their work schedules, or show a client their project\u2019s status. In Grist, \u201clink keys\u201d are URL parameters that when combined with the access control rules will determine which data a link recipient is permitted to view. Creating Unique Link Keys in 4 Steps # The best way to learn is by doing. We\u2019ve created a simple template you can copy and edit to deepen your understanding of link sharing. In our example, you are a private tutor who uses Grist to track hours, payments, and client data. You would like to share session and payment history with parents via a link that only shows their family\u2019s data. Follow our 4 step guide to learn how to share limited data via links . The private tutor can see all data, but a parent can only see their family\u2019s data. Learn How What\u2019s New # You can now create filter buttons in a bar above any view in Grist. The filter bar can be toggled on or off, and edited to only include buttons for those columns you commonly filter by. The bar can also be saved so that everyone with access to the doc can more easily filter data. Quick Tips # Freezing unique identifiers . When using the Grist\u2019s UUID() function, you may want to freeze values assigned to each record. If you don\u2019t, the unique identifier will generate anew when you re-open the doc. To freeze unique identifiers, convert the column to the data column, and set the default formula for new records to UUID() so that new rows will also be assigned a unique identifier. Creating links in cells . To create a column of links in Grist, set the column type to Text, and click the \u201cHyperLink\u201d button under Cell Format. Link Keys and Public Access. If you\u2019re generating unique links to limited views of data, make sure you have turned on Public Access under \u201cManage Users\u201d to allow link-sharing. Viewers who access your document via links will still be limited in accordance with your access rules. Still need help? Visit our Help Center , watch video tutorials , or contact us at support@getgrist.com .","title":"2021/04"},{"location":"newsletters/2021-04/#april-2021-newsletter","text":"/* restore some poorly overridden defaults */ .newsletter-header .table { background-color: initial; border: initial; } .newsletter-header .table > tbody > tr > td { padding: initial; border: initial; vertical-align: initial; } .newsletter-header img.header-img { padding: initial; max-width: initial; display: initial; padding: initial; line-height: initial; background-color: initial; border: initial; border-radius: initial; margin: initial; } /* copy newsletter styles, with a prefix for sufficient specificity */ .newsletter-header .header { border: none; padding: 0; margin: 0; } .newsletter-header table > tbody > tr > td.header-image { width: 80px; padding-right: 16px; } .newsletter-header table > tbody > tr > td.header-text { background-color: #c4ffcd; padding: 16px 36px; } .newsletter-header table.header-top { border: none; padding: 0; margin: 0; width: 100%; } .header-title { font-family: Helvetica Neue, Helvetica, Arial, sans-serif; font-size: 24px; line-height: 28px; } .header-month { } .header-welcome { margin-top: 12px; color: #666666; } Grist for the Mill April 2021 \u2022 getgrist.com Welcome to our monthly newsletter of updates and tips for Grist users.","title":"April 2021 Newsletter"},{"location":"newsletters/2021-04/#understanding-link-sharing","text":"Last month we released granular access controls which makes it possible to limit who can see or edit which parts of a document, down to individual columns and rows. This same level of control can be set for documents shared via links with third parties who do not have a Grist account or who are not a part of your organization. For example, you may want to share purchase history with a customer, permit staff to see only their work schedules, or show a client their project\u2019s status. In Grist, \u201clink keys\u201d are URL parameters that when combined with the access control rules will determine which data a link recipient is permitted to view.","title":"Understanding Link Sharing"},{"location":"newsletters/2021-04/#creating-unique-link-keys-in-4-steps","text":"The best way to learn is by doing. We\u2019ve created a simple template you can copy and edit to deepen your understanding of link sharing. In our example, you are a private tutor who uses Grist to track hours, payments, and client data. You would like to share session and payment history with parents via a link that only shows their family\u2019s data. Follow our 4 step guide to learn how to share limited data via links . The private tutor can see all data, but a parent can only see their family\u2019s data. Learn How","title":"Creating Unique Link Keys in 4 Steps"},{"location":"newsletters/2021-04/#whats-new","text":"You can now create filter buttons in a bar above any view in Grist. The filter bar can be toggled on or off, and edited to only include buttons for those columns you commonly filter by. The bar can also be saved so that everyone with access to the doc can more easily filter data.","title":"What's New"},{"location":"newsletters/2021-04/#quick-tips","text":"Freezing unique identifiers . When using the Grist\u2019s UUID() function, you may want to freeze values assigned to each record. If you don\u2019t, the unique identifier will generate anew when you re-open the doc. To freeze unique identifiers, convert the column to the data column, and set the default formula for new records to UUID() so that new rows will also be assigned a unique identifier. Creating links in cells . To create a column of links in Grist, set the column type to Text, and click the \u201cHyperLink\u201d button under Cell Format. Link Keys and Public Access. If you\u2019re generating unique links to limited views of data, make sure you have turned on Public Access under \u201cManage Users\u201d to allow link-sharing. Viewers who access your document via links will still be limited in accordance with your access rules. Still need help? Visit our Help Center , watch video tutorials , or contact us at support@getgrist.com .","title":"Quick Tips"},{"location":"newsletters/2021-05/","text":"May 2021 Newsletter # /* restore some poorly overridden defaults */ .newsletter-header .table { background-color: initial; border: initial; } .newsletter-header .table > tbody > tr > td { padding: initial; border: initial; vertical-align: initial; } .newsletter-header img.header-img { padding: initial; max-width: initial; display: initial; padding: initial; line-height: initial; background-color: initial; border: initial; border-radius: initial; margin: initial; } /* copy newsletter styles, with a prefix for sufficient specificity */ .newsletter-header .header { border: none; padding: 0; margin: 0; } .newsletter-header table > tbody > tr > td.header-image { width: 80px; padding-right: 16px; } .newsletter-header table > tbody > tr > td.header-text { background-color: #c4ffcd; padding: 16px 36px; } .newsletter-header table.header-top { border: none; padding: 0; margin: 0; width: 100%; } .header-title { font-family: Helvetica Neue, Helvetica, Arial, sans-serif; font-size: 24px; line-height: 28px; } .header-month { } .header-welcome { margin-top: 12px; color: #666666; } Grist for the Mill May 2021 \u2022 getgrist.com Welcome to our monthly newsletter of updates and tips for Grist users. Organizing Data with Reference Columns # Reference columns are at the heart of what Grist does best: make it easy to set up a relational database and create highly productive layouts. If you\u2019re not familiar with databases, understanding reference columns can feel a little tricky. That\u2019s why we\u2019ve created a simple template you can copy and edit to deepen your understanding of reference columns. In our example, you are a job applicant who uses Grist to track your job application status at multiple companies. You would like a simple dashboard that makes it easy to see your job status at a glance, and to add new jobs, interviews and other milestones. Follow our 3 step guide to learn how to use reference columns . What\u2019s New # Choice Lists # You can now select multiple options in a Choice List column. In the screenshot below, multiple dog shows are selected from a choice list, instead of just one. Search Improvements # When searching in Grist, the search now stays on the same page by default. If you want to search across all pages, simply mark the checkbox. Hyperlinks within Same Document # Previously all hyperlinks opened in a new tab. Now, hyperlinks that point to a different part of the same document will open in the same tab. This makes it easier to jump to relevant parts of large documents. Quick Tips # Adding new record from reference column drop-down list. You may add a new value to the dropdown list in a reference column without switching to the underlying table. Just type in the value you want to add and select the + value in the dropdown list. Grist will automatically add a new record containing this value to the underlying table and insert the proper reference. Edit Card Widget Layout. When converting a table into a card widget, you may want to move fields around to a more intuitive format. Click on the ... menu above the widget you\u2019d like to edit, then select EDIT LAYOUT. Click and drag fields to reposition them, then click SAVE LAYOUT. Card List Widget Themes. The card list widget tiles cards vertically. Grist has three-built in themes to choose from, depending on your need and how you wish to view the data. Still need help? Visit our Help Center , watch video tutorials , or contact us at support@getgrist.com .","title":"2021/05"},{"location":"newsletters/2021-05/#may-2021-newsletter","text":"/* restore some poorly overridden defaults */ .newsletter-header .table { background-color: initial; border: initial; } .newsletter-header .table > tbody > tr > td { padding: initial; border: initial; vertical-align: initial; } .newsletter-header img.header-img { padding: initial; max-width: initial; display: initial; padding: initial; line-height: initial; background-color: initial; border: initial; border-radius: initial; margin: initial; } /* copy newsletter styles, with a prefix for sufficient specificity */ .newsletter-header .header { border: none; padding: 0; margin: 0; } .newsletter-header table > tbody > tr > td.header-image { width: 80px; padding-right: 16px; } .newsletter-header table > tbody > tr > td.header-text { background-color: #c4ffcd; padding: 16px 36px; } .newsletter-header table.header-top { border: none; padding: 0; margin: 0; width: 100%; } .header-title { font-family: Helvetica Neue, Helvetica, Arial, sans-serif; font-size: 24px; line-height: 28px; } .header-month { } .header-welcome { margin-top: 12px; color: #666666; } Grist for the Mill May 2021 \u2022 getgrist.com Welcome to our monthly newsletter of updates and tips for Grist users.","title":"May 2021 Newsletter"},{"location":"newsletters/2021-05/#organizing-data-with-reference-columns","text":"Reference columns are at the heart of what Grist does best: make it easy to set up a relational database and create highly productive layouts. If you\u2019re not familiar with databases, understanding reference columns can feel a little tricky. That\u2019s why we\u2019ve created a simple template you can copy and edit to deepen your understanding of reference columns. In our example, you are a job applicant who uses Grist to track your job application status at multiple companies. You would like a simple dashboard that makes it easy to see your job status at a glance, and to add new jobs, interviews and other milestones. Follow our 3 step guide to learn how to use reference columns .","title":"Organizing Data with Reference Columns"},{"location":"newsletters/2021-05/#whats-new","text":"","title":"What's New"},{"location":"newsletters/2021-05/#choice-lists","text":"You can now select multiple options in a Choice List column. In the screenshot below, multiple dog shows are selected from a choice list, instead of just one.","title":"Choice Lists"},{"location":"newsletters/2021-05/#search-improvements","text":"When searching in Grist, the search now stays on the same page by default. If you want to search across all pages, simply mark the checkbox.","title":"Search Improvements"},{"location":"newsletters/2021-05/#hyperlinks-within-same-document","text":"Previously all hyperlinks opened in a new tab. Now, hyperlinks that point to a different part of the same document will open in the same tab. This makes it easier to jump to relevant parts of large documents.","title":"Hyperlinks within Same Document"},{"location":"newsletters/2021-05/#quick-tips","text":"Adding new record from reference column drop-down list. You may add a new value to the dropdown list in a reference column without switching to the underlying table. Just type in the value you want to add and select the + value in the dropdown list. Grist will automatically add a new record containing this value to the underlying table and insert the proper reference. Edit Card Widget Layout. When converting a table into a card widget, you may want to move fields around to a more intuitive format. Click on the ... menu above the widget you\u2019d like to edit, then select EDIT LAYOUT. Click and drag fields to reposition them, then click SAVE LAYOUT. Card List Widget Themes. The card list widget tiles cards vertically. Grist has three-built in themes to choose from, depending on your need and how you wish to view the data. Still need help? Visit our Help Center , watch video tutorials , or contact us at support@getgrist.com .","title":"Quick Tips"},{"location":"newsletters/2021-06/","text":"June 2021 Newsletter # /* restore some poorly overridden defaults */ .newsletter-header .table { background-color: initial; border: initial; } .newsletter-header .table > tbody > tr > td { padding: initial; border: initial; vertical-align: initial; } .newsletter-header img.header-img { padding: initial; max-width: initial; display: initial; padding: initial; line-height: initial; background-color: initial; border: initial; border-radius: initial; margin: initial; } /* copy newsletter styles, with a prefix for sufficient specificity */ .newsletter-header .header { border: none; padding: 0; margin: 0; } .newsletter-header table > tbody > tr > td.header-image { width: 80px; padding-right: 16px; } .newsletter-header table > tbody > tr > td.header-text { background-color: #c4ffcd; padding: 16px 36px; } .newsletter-header table.header-top { border: none; padding: 0; margin: 0; width: 100%; } .header-title { font-family: Helvetica Neue, Helvetica, Arial, sans-serif; font-size: 24px; line-height: 28px; } .header-month { } .header-welcome { margin-top: 12px; color: #666666; } Grist for the Mill June 2021 \u2022 getgrist.com Welcome to our monthly newsletter of updates and tips for Grist users. What\u2019s New # Freeze Columns # You can now freeze columns in Grist! Tame those wide spreadsheets and view your data, your way. Read-only Editor # Team members with view-only access can now open a cell editor to more easily read long text, access attachments, or take a peek at formulas. They will still be prevented from editing the cell, as indicated by the gray lock icon. Read-only cell editor locked for edits v. unrestricted cell editor Quick Tips # Duplicate Document v Work on a Copy. When making changes to a document\u2019s structure it\u2019s a good practice to Work on a copy . This does not automatically save a duplicate of your document. It creates an unsaved working copy where you can make edits, and then choose to replace the current document, copy your new edits to a new document, or discard your changes altogether. Duplicate Document does create a new, duplicated document, and you can choose whether or not to copy data or retain only the document\u2019s structure. Exporting Backups. Grist periodically takes snapshots of your documents. You can save any version of your document (current or historical snapshots) to backup your data. To backup historical snapshots, click on Document History then Snapshots . Select any snapshot\u2019s menu then click on Open Snapshot . Click on the share icon to open a menu from which you can download the entire document as a Grist file . Combining text fields with formulas. You may sometimes have text in multiple columns that you would like to display in one column. For example, a table may have first name and last name columns. You may easily create a full name column with the formula \"{}, {}\".format($Last_Name, $First_Name) . The part in quotes is a format string: each set of curly brackets ( {} ) in it gets replaced with the next value from parentheses after format . In this case, the full name would be displayed as Benson, Carla . Dig Deeper # Analyzing Data with Summary Tables and Formulas # Summary tables and formulas are vital tools in capturing actionable insights from your data. They make it possible to group records into specific categories, then compute sums using those record groups. Grist makes it easy to create summary tables and work with the $group field in summary formulas. We\u2019ve created a video tutorial that helps you master two key concepts: summary tables and summary formulas. The tutorial guides you into building two summary pages in an advanced timesheet tracker template. LEARN: Summary Tables New Template # Advanced Timesheet Tracker # The timesheet tracker makes it easier to track contractors\u2019 timesheets across various months and departments. It has a dashboard where contractors can submit their hours directly into Grist, and see only their historical timesheet data. The company\u2019s payroll department can see everyone\u2019s timesheets, in all accounts, across all months, and have access to summary pages that provide useful data around spending. They can also set permissions to allow or disallow timesheet edits in certain months. The summary tables tutorial starts with an unfinished version of the template, and guides you into creating two new pages. If you want to use the completed template, go to the tutorial solution. Note that there are access rules in place for the completed template which will prevent you from seeing certain pages and most data. Make a copy to become the document owner and see all data and pages. See Template Make a copy to become the document owner and see all data and pages. Still need help? Visit our Help Center , watch video tutorials , or contact us at support@getgrist.com .","title":"2021/06"},{"location":"newsletters/2021-06/#june-2021-newsletter","text":"/* restore some poorly overridden defaults */ .newsletter-header .table { background-color: initial; border: initial; } .newsletter-header .table > tbody > tr > td { padding: initial; border: initial; vertical-align: initial; } .newsletter-header img.header-img { padding: initial; max-width: initial; display: initial; padding: initial; line-height: initial; background-color: initial; border: initial; border-radius: initial; margin: initial; } /* copy newsletter styles, with a prefix for sufficient specificity */ .newsletter-header .header { border: none; padding: 0; margin: 0; } .newsletter-header table > tbody > tr > td.header-image { width: 80px; padding-right: 16px; } .newsletter-header table > tbody > tr > td.header-text { background-color: #c4ffcd; padding: 16px 36px; } .newsletter-header table.header-top { border: none; padding: 0; margin: 0; width: 100%; } .header-title { font-family: Helvetica Neue, Helvetica, Arial, sans-serif; font-size: 24px; line-height: 28px; } .header-month { } .header-welcome { margin-top: 12px; color: #666666; } Grist for the Mill June 2021 \u2022 getgrist.com Welcome to our monthly newsletter of updates and tips for Grist users.","title":"June 2021 Newsletter"},{"location":"newsletters/2021-06/#whats-new","text":"","title":"What's New"},{"location":"newsletters/2021-06/#freeze-columns","text":"You can now freeze columns in Grist! Tame those wide spreadsheets and view your data, your way.","title":"Freeze Columns"},{"location":"newsletters/2021-06/#read-only-editor","text":"Team members with view-only access can now open a cell editor to more easily read long text, access attachments, or take a peek at formulas. They will still be prevented from editing the cell, as indicated by the gray lock icon. Read-only cell editor locked for edits v. unrestricted cell editor","title":"Read-only Editor"},{"location":"newsletters/2021-06/#quick-tips","text":"Duplicate Document v Work on a Copy. When making changes to a document\u2019s structure it\u2019s a good practice to Work on a copy . This does not automatically save a duplicate of your document. It creates an unsaved working copy where you can make edits, and then choose to replace the current document, copy your new edits to a new document, or discard your changes altogether. Duplicate Document does create a new, duplicated document, and you can choose whether or not to copy data or retain only the document\u2019s structure. Exporting Backups. Grist periodically takes snapshots of your documents. You can save any version of your document (current or historical snapshots) to backup your data. To backup historical snapshots, click on Document History then Snapshots . Select any snapshot\u2019s menu then click on Open Snapshot . Click on the share icon to open a menu from which you can download the entire document as a Grist file . Combining text fields with formulas. You may sometimes have text in multiple columns that you would like to display in one column. For example, a table may have first name and last name columns. You may easily create a full name column with the formula \"{}, {}\".format($Last_Name, $First_Name) . The part in quotes is a format string: each set of curly brackets ( {} ) in it gets replaced with the next value from parentheses after format . In this case, the full name would be displayed as Benson, Carla .","title":"Quick Tips"},{"location":"newsletters/2021-06/#dig-deeper","text":"","title":"Dig Deeper"},{"location":"newsletters/2021-06/#analyzing-data-with-summary-tables-and-formulas","text":"Summary tables and formulas are vital tools in capturing actionable insights from your data. They make it possible to group records into specific categories, then compute sums using those record groups. Grist makes it easy to create summary tables and work with the $group field in summary formulas. We\u2019ve created a video tutorial that helps you master two key concepts: summary tables and summary formulas. The tutorial guides you into building two summary pages in an advanced timesheet tracker template. LEARN: Summary Tables","title":"Analyzing Data with Summary Tables and Formulas"},{"location":"newsletters/2021-06/#new-template","text":"","title":"New Template"},{"location":"newsletters/2021-06/#advanced-timesheet-tracker","text":"The timesheet tracker makes it easier to track contractors\u2019 timesheets across various months and departments. It has a dashboard where contractors can submit their hours directly into Grist, and see only their historical timesheet data. The company\u2019s payroll department can see everyone\u2019s timesheets, in all accounts, across all months, and have access to summary pages that provide useful data around spending. They can also set permissions to allow or disallow timesheet edits in certain months. The summary tables tutorial starts with an unfinished version of the template, and guides you into creating two new pages. If you want to use the completed template, go to the tutorial solution. Note that there are access rules in place for the completed template which will prevent you from seeing certain pages and most data. Make a copy to become the document owner and see all data and pages. See Template Make a copy to become the document owner and see all data and pages. Still need help? Visit our Help Center , watch video tutorials , or contact us at support@getgrist.com .","title":"Advanced Timesheet Tracker"},{"location":"newsletters/2021-07/","text":"July 2021 Newsletter # /* restore some poorly overridden defaults */ .newsletter-header .table { background-color: initial; border: initial; } .newsletter-header .table > tbody > tr > td { padding: initial; border: initial; vertical-align: initial; } .newsletter-header img.header-img { padding: initial; max-width: initial; display: initial; padding: initial; line-height: initial; background-color: initial; border: initial; border-radius: initial; margin: initial; } /* copy newsletter styles, with a prefix for sufficient specificity */ .newsletter-header .header { border: none; padding: 0; margin: 0; } .newsletter-header table > tbody > tr > td.header-image { width: 80px; padding-right: 16px; } .newsletter-header table > tbody > tr > td.header-text { background-color: #c4ffcd; padding: 16px 36px; } .newsletter-header table.header-top { border: none; padding: 0; margin: 0; width: 100%; } .header-title { font-family: Helvetica Neue, Helvetica, Arial, sans-serif; font-size: 24px; line-height: 28px; } .header-month { } .header-welcome { margin-top: 12px; color: #666666; } Grist for the Mill July 2021 \u2022 getgrist.com Welcome to our monthly newsletter of updates and tips for Grist users. What\u2019s New # Colors! # Make your Grist document pop with color! Options in Choice and Choice List columns can now be color coded. In addition to making your documents look great and fun, color choices make it easier to scan and glean information quickly. Read more. Google Sheets Integration # You can now easily import or export your data to and from Grist and Google Drive. Read more. Automatic User and Time Stamps # Want to know when a record was updated and by whom? It is now possible to create columns that stamp a user\u2019s name or the time to a record when it is updated or created. Read more about time stamps and authorship stamps . We\u2019ve also created a step-by-step video tutorial that walks you through how to create time and user stamp columns. New Resources # Introducing the Grist Community Forum # We\u2019ve launched a Grist Community Forum where you can quickly look up solutions, share project ideas, provide feedback, suggest features, and stay up to date on the latest Grist features and announcements. Visit the Forum Visit our Product Roadmap # Want to know what we\u2019re working on? Our product roadmap is now public! If you have a Github account, we encourage you to leave comments on roadmap items. We love to hear from you. Visit the Roadmap Quick Tips # Reference column best practices. When creating a reference column it is best practice to choose a display column that is a unique identifier for the record. For example, for records of people, it could be full name or email. To show other data, such as department or birthday, pull it in using the formula $[Reference Column Id].[Referenced Record\u2019s Field] , (for example $Person.Department ). You may review how this formula works in our reference column guide . Labeling hyperlinks with text. In hyperlink columns, you can label a link with text by adding a label before the url: [link label] url . The brackets are not needed. Using Search to Find a Card. If you have a card widget on a page and quickly want to find the right card, you can use the search bar on the page to quickly bring the relevant card into view. Dig Deeper # Easily Create Automatic User and Time Stamps # It is sometimes useful to know when a record was last updated or created, and by whom. Grist makes it simple to create columns that stamp the time or a user\u2019s name to a record when it is updated or created. We\u2019ve created a video tutorial that walks you through how to create time and user stamp columns in 3 easy steps. LEARN: User/Time Stamps New Template # Grant Application and Funding Tracker # This template helps NGOs track grant applications that have been submitted to foundations to win grant funding. The template also includes a funding overview which shows funding in the pipeline and funding awarded, broken down by NGO program. Open Grant Tracker Have questions, feedback, or need help? Search our Help Center , watch video tutorials , or contact us at support@getgrist.com .","title":"2021/07"},{"location":"newsletters/2021-07/#july-2021-newsletter","text":"/* restore some poorly overridden defaults */ .newsletter-header .table { background-color: initial; border: initial; } .newsletter-header .table > tbody > tr > td { padding: initial; border: initial; vertical-align: initial; } .newsletter-header img.header-img { padding: initial; max-width: initial; display: initial; padding: initial; line-height: initial; background-color: initial; border: initial; border-radius: initial; margin: initial; } /* copy newsletter styles, with a prefix for sufficient specificity */ .newsletter-header .header { border: none; padding: 0; margin: 0; } .newsletter-header table > tbody > tr > td.header-image { width: 80px; padding-right: 16px; } .newsletter-header table > tbody > tr > td.header-text { background-color: #c4ffcd; padding: 16px 36px; } .newsletter-header table.header-top { border: none; padding: 0; margin: 0; width: 100%; } .header-title { font-family: Helvetica Neue, Helvetica, Arial, sans-serif; font-size: 24px; line-height: 28px; } .header-month { } .header-welcome { margin-top: 12px; color: #666666; } Grist for the Mill July 2021 \u2022 getgrist.com Welcome to our monthly newsletter of updates and tips for Grist users.","title":"July 2021 Newsletter"},{"location":"newsletters/2021-07/#whats-new","text":"","title":"What's New"},{"location":"newsletters/2021-07/#colors","text":"Make your Grist document pop with color! Options in Choice and Choice List columns can now be color coded. In addition to making your documents look great and fun, color choices make it easier to scan and glean information quickly. Read more.","title":"Colors!"},{"location":"newsletters/2021-07/#google-sheets-integration","text":"You can now easily import or export your data to and from Grist and Google Drive. Read more.","title":"Google Sheets Integration"},{"location":"newsletters/2021-07/#automatic-user-and-time-stamps","text":"Want to know when a record was updated and by whom? It is now possible to create columns that stamp a user\u2019s name or the time to a record when it is updated or created. Read more about time stamps and authorship stamps . We\u2019ve also created a step-by-step video tutorial that walks you through how to create time and user stamp columns.","title":"Automatic User and Time Stamps"},{"location":"newsletters/2021-07/#new-resources","text":"","title":"New Resources"},{"location":"newsletters/2021-07/#introducing-the-grist-community-forum","text":"We\u2019ve launched a Grist Community Forum where you can quickly look up solutions, share project ideas, provide feedback, suggest features, and stay up to date on the latest Grist features and announcements. Visit the Forum","title":"Introducing the Grist Community Forum"},{"location":"newsletters/2021-07/#visit-our-product-roadmap","text":"Want to know what we\u2019re working on? Our product roadmap is now public! If you have a Github account, we encourage you to leave comments on roadmap items. We love to hear from you. Visit the Roadmap","title":"Visit our Product Roadmap"},{"location":"newsletters/2021-07/#quick-tips","text":"Reference column best practices. When creating a reference column it is best practice to choose a display column that is a unique identifier for the record. For example, for records of people, it could be full name or email. To show other data, such as department or birthday, pull it in using the formula $[Reference Column Id].[Referenced Record\u2019s Field] , (for example $Person.Department ). You may review how this formula works in our reference column guide . Labeling hyperlinks with text. In hyperlink columns, you can label a link with text by adding a label before the url: [link label] url . The brackets are not needed. Using Search to Find a Card. If you have a card widget on a page and quickly want to find the right card, you can use the search bar on the page to quickly bring the relevant card into view.","title":"Quick Tips"},{"location":"newsletters/2021-07/#dig-deeper","text":"","title":"Dig Deeper"},{"location":"newsletters/2021-07/#easily-create-automatic-user-and-time-stamps","text":"It is sometimes useful to know when a record was last updated or created, and by whom. Grist makes it simple to create columns that stamp the time or a user\u2019s name to a record when it is updated or created. We\u2019ve created a video tutorial that walks you through how to create time and user stamp columns in 3 easy steps. LEARN: User/Time Stamps","title":"Easily Create Automatic User and Time Stamps"},{"location":"newsletters/2021-07/#new-template","text":"","title":"New Template"},{"location":"newsletters/2021-07/#grant-application-and-funding-tracker","text":"This template helps NGOs track grant applications that have been submitted to foundations to win grant funding. The template also includes a funding overview which shows funding in the pipeline and funding awarded, broken down by NGO program. Open Grant Tracker Have questions, feedback, or need help? Search our Help Center , watch video tutorials , or contact us at support@getgrist.com .","title":"Grant Application and Funding Tracker"},{"location":"newsletters/2021-08/","text":"August 2021 Newsletter # /* restore some poorly overridden defaults */ .newsletter-header .table { background-color: initial; border: initial; } .newsletter-header .table > tbody > tr > td { padding: initial; border: initial; vertical-align: initial; } .newsletter-header img.header-img { padding: initial; max-width: initial; display: initial; padding: initial; line-height: initial; background-color: initial; border: initial; border-radius: initial; margin: initial; } /* copy newsletter styles, with a prefix for sufficient specificity */ .newsletter-header .header { border: none; padding: 0; margin: 0; } .newsletter-header table > tbody > tr > td.header-image { width: 80px; padding-right: 16px; } .newsletter-header table > tbody > tr > td.header-text { background-color: #c4ffcd; padding: 16px 36px; } .newsletter-header table.header-top { border: none; padding: 0; margin: 0; width: 100%; } .header-title { font-family: Helvetica Neue, Helvetica, Arial, sans-serif; font-size: 24px; line-height: 28px; } .header-month { } .header-welcome { margin-top: 12px; color: #666666; } Grist for the Mill August 2021 \u2022 getgrist.com Welcome to our monthly newsletter of updates and tips for Grist users. What\u2019s New # Reference Lists # It is now possible to relate a record in one table to multiple records in another table. Choose the Reference List column type to establish a one to many relationship in your document. Learn more. Embedding Grist # Have data you want to share on your website? You may now embed Grist pages as view-only data that updates live. Learn how. Pabbly Integration # You may now import data to Grist with Pabbly! Read more on Pabbly\u2019s website. Row-based API # The Grist API is now more convenient with row-based (aka record-based) endpoints. Learn more. Edit Subdomain # Did you sign up for a team plan, but changed your mind on what subdomain name to use for your site? You may now edit your subdomain from your billing page. Click on your profile icon in the top-right to access your billing page. Formula Support # Need help with formulas? There\u2019s a dedicated category in our community forum where you can find formulas for common use cases, and ask for help. Visit the Forum Large Template Library # Finding the right template for your project just got easier. Click on Examples & Templates (in the left-side panel of your personal or team site dashboard) to find a larger library of templates to choose from. SEE ALL TEMPLATES Quick Tips # Multiple Accounts. You can sign in with multiple emails into Grist to easily switch between accounts. Click on your profile icon in the top-right, then select \u201cAdd Account\u201d. Finding Duplicates. Find duplicates using the formula: \"DUP\" if len(Products.lookupRecords(ProductCode=$ProductCode)) > 1 else \"\" For more help, follow this guide. Color code conditional values. Use a formula and colorful Choice column entries to flag records that need attention. Follow our quick guide. New Templates # Restaurant Inventory # Keep track of your restaurant inventory and supplier information, and create purchase orders right in Grist. GO TO TEMPLATE Restaurant Custom Orders # Build custom orders, calculate ingredient costs, and generate a bill of materials, all in one document. GO TO TEMPLATE Custom Product Builder # Build custom products and production contracts that add up component costs and add your profit margin to the final cost. GO TO TEMPLATE Have questions, feedback, or need help? Search our Help Center , watch video tutorials , join our Community , or contact us at support@getgrist.com .","title":"2021/08"},{"location":"newsletters/2021-08/#august-2021-newsletter","text":"/* restore some poorly overridden defaults */ .newsletter-header .table { background-color: initial; border: initial; } .newsletter-header .table > tbody > tr > td { padding: initial; border: initial; vertical-align: initial; } .newsletter-header img.header-img { padding: initial; max-width: initial; display: initial; padding: initial; line-height: initial; background-color: initial; border: initial; border-radius: initial; margin: initial; } /* copy newsletter styles, with a prefix for sufficient specificity */ .newsletter-header .header { border: none; padding: 0; margin: 0; } .newsletter-header table > tbody > tr > td.header-image { width: 80px; padding-right: 16px; } .newsletter-header table > tbody > tr > td.header-text { background-color: #c4ffcd; padding: 16px 36px; } .newsletter-header table.header-top { border: none; padding: 0; margin: 0; width: 100%; } .header-title { font-family: Helvetica Neue, Helvetica, Arial, sans-serif; font-size: 24px; line-height: 28px; } .header-month { } .header-welcome { margin-top: 12px; color: #666666; } Grist for the Mill August 2021 \u2022 getgrist.com Welcome to our monthly newsletter of updates and tips for Grist users.","title":"August 2021 Newsletter"},{"location":"newsletters/2021-08/#whats-new","text":"","title":"What's New"},{"location":"newsletters/2021-08/#reference-lists","text":"It is now possible to relate a record in one table to multiple records in another table. Choose the Reference List column type to establish a one to many relationship in your document. Learn more.","title":"Reference Lists"},{"location":"newsletters/2021-08/#embedding-grist","text":"Have data you want to share on your website? You may now embed Grist pages as view-only data that updates live. Learn how.","title":"Embedding Grist"},{"location":"newsletters/2021-08/#pabbly-integration","text":"You may now import data to Grist with Pabbly! Read more on Pabbly\u2019s website.","title":"Pabbly Integration"},{"location":"newsletters/2021-08/#row-based-api","text":"The Grist API is now more convenient with row-based (aka record-based) endpoints. Learn more.","title":"Row-based API"},{"location":"newsletters/2021-08/#edit-subdomain","text":"Did you sign up for a team plan, but changed your mind on what subdomain name to use for your site? You may now edit your subdomain from your billing page. Click on your profile icon in the top-right to access your billing page.","title":"Edit Subdomain"},{"location":"newsletters/2021-08/#formula-support","text":"Need help with formulas? There\u2019s a dedicated category in our community forum where you can find formulas for common use cases, and ask for help. Visit the Forum","title":"Formula Support"},{"location":"newsletters/2021-08/#large-template-library","text":"Finding the right template for your project just got easier. Click on Examples & Templates (in the left-side panel of your personal or team site dashboard) to find a larger library of templates to choose from. SEE ALL TEMPLATES","title":"Large Template Library"},{"location":"newsletters/2021-08/#quick-tips","text":"Multiple Accounts. You can sign in with multiple emails into Grist to easily switch between accounts. Click on your profile icon in the top-right, then select \u201cAdd Account\u201d. Finding Duplicates. Find duplicates using the formula: \"DUP\" if len(Products.lookupRecords(ProductCode=$ProductCode)) > 1 else \"\" For more help, follow this guide. Color code conditional values. Use a formula and colorful Choice column entries to flag records that need attention. Follow our quick guide.","title":"Quick Tips"},{"location":"newsletters/2021-08/#new-templates","text":"","title":"New Templates"},{"location":"newsletters/2021-08/#restaurant-inventory","text":"Keep track of your restaurant inventory and supplier information, and create purchase orders right in Grist. GO TO TEMPLATE","title":"Restaurant Inventory"},{"location":"newsletters/2021-08/#restaurant-custom-orders","text":"Build custom orders, calculate ingredient costs, and generate a bill of materials, all in one document. GO TO TEMPLATE","title":"Restaurant Custom Orders"},{"location":"newsletters/2021-08/#custom-product-builder","text":"Build custom products and production contracts that add up component costs and add your profit margin to the final cost. GO TO TEMPLATE Have questions, feedback, or need help? Search our Help Center , watch video tutorials , join our Community , or contact us at support@getgrist.com .","title":"Custom Product Builder"},{"location":"newsletters/2021-09/","text":"September 2021 Newsletter # /* restore some poorly overridden defaults */ .newsletter-header .table { background-color: initial; border: initial; } .newsletter-header .table > tbody > tr > td { padding: initial; border: initial; vertical-align: initial; } .newsletter-header img.header-img { padding: initial; max-width: initial; display: initial; padding: initial; line-height: initial; background-color: initial; border: initial; border-radius: initial; margin: initial; } /* copy newsletter styles, with a prefix for sufficient specificity */ .newsletter-header .header { border: none; padding: 0; margin: 0; } .newsletter-header table > tbody > tr > td.header-image { width: 80px; padding-right: 16px; } .newsletter-header table > tbody > tr > td.header-text { background-color: #c4ffcd; padding: 16px 36px; } .newsletter-header table.header-top { border: none; padding: 0; margin: 0; width: 100%; } .header-title { font-family: Helvetica Neue, Helvetica, Arial, sans-serif; font-size: 24px; line-height: 28px; } .header-month { } .header-welcome { margin-top: 12px; color: #666666; } Grist for the Mill September 2021 \u2022 getgrist.com Welcome to our monthly newsletter of updates and tips for Grist users. What\u2019s New # Improved Incremental Imports # You may now select a merge key when importing more data into an existing table. Integrately and KonnectzIT # In addition to Zapier and Pabbly Actions, you may now build integrations with Integrately and KonnectzIT. \ud83d\ude80 Read more on Integrately\u2019s website and KonnectzIT\u2019s website . International Currencies # When formatting numeric and integer columns, you may now choose from a list of global currencies. You can set the default currency in document settings. Learn more about document settings. Learning Grist # Build with Grist Webinar # Join Grist experts on a live webinar to learn the tips and tricks that\u2019ll help you become a Grist power creator. \ud83d\udcaa The webinar will go live on Monday October 18th at 3:00pm US Eastern Time (New York). SIGN UP FOR WEBINAR Are you\u2026Python curious? # There are many online resources for learning Python. One of Grist\u2019s developers, Alex Hall, has a side project for learning Python called futurecoder. We recommend it! GO TO FUTURECODER Community Highlights # Extracting months and quarters from dates. If you have a date column, you may want to summarize those dates by month or quarter. Embedding read-only Google Maps. Learn how to embed a Google Map into a Grist document. Creating required fields. It is possible to check if required fields have been filled, or not. Help spread the word? # If you\u2019re interested in helping Grist grow, consider leaving a review on product review sites. Here\u2019s short list where your review could make a big impact. Thank you! \ud83d\ude4f G2 Capterra TrustRadius New Templates # Rental Management # Track tenants, leases, and income and expenses related to rental properties in one place. GO TO TEMPLATE Corporate Funding # Easily plan and summarize a company\u2019s funding structure. GO TO TEMPLATE General Ledger # Build a general ledger of income and expenses related to multiple companies, and summarize data in helpful dashboards. GO TO TEMPLATE Sports League Standings # Track a sports leagues\u2019 matches and automatically generate the season\u2019s standings. GO TO TEMPLATE D&D Combat Tracker # Dungeon masters, use Grist to easily plan encounters, calculate key figures, and keep track of combat. (Dice roller included.) GO TO TEMPLATE Have questions, feedback, or need help? Search our Help Center , watch video tutorials , join our Community , or contact us at support@getgrist.com .","title":"2021/09"},{"location":"newsletters/2021-09/#september-2021-newsletter","text":"/* restore some poorly overridden defaults */ .newsletter-header .table { background-color: initial; border: initial; } .newsletter-header .table > tbody > tr > td { padding: initial; border: initial; vertical-align: initial; } .newsletter-header img.header-img { padding: initial; max-width: initial; display: initial; padding: initial; line-height: initial; background-color: initial; border: initial; border-radius: initial; margin: initial; } /* copy newsletter styles, with a prefix for sufficient specificity */ .newsletter-header .header { border: none; padding: 0; margin: 0; } .newsletter-header table > tbody > tr > td.header-image { width: 80px; padding-right: 16px; } .newsletter-header table > tbody > tr > td.header-text { background-color: #c4ffcd; padding: 16px 36px; } .newsletter-header table.header-top { border: none; padding: 0; margin: 0; width: 100%; } .header-title { font-family: Helvetica Neue, Helvetica, Arial, sans-serif; font-size: 24px; line-height: 28px; } .header-month { } .header-welcome { margin-top: 12px; color: #666666; } Grist for the Mill September 2021 \u2022 getgrist.com Welcome to our monthly newsletter of updates and tips for Grist users.","title":"September 2021 Newsletter"},{"location":"newsletters/2021-09/#whats-new","text":"","title":"What's New"},{"location":"newsletters/2021-09/#improved-incremental-imports","text":"You may now select a merge key when importing more data into an existing table.","title":"Improved Incremental Imports"},{"location":"newsletters/2021-09/#integrately-and-konnectzit","text":"In addition to Zapier and Pabbly Actions, you may now build integrations with Integrately and KonnectzIT. \ud83d\ude80 Read more on Integrately\u2019s website and KonnectzIT\u2019s website .","title":"Integrately and KonnectzIT"},{"location":"newsletters/2021-09/#international-currencies","text":"When formatting numeric and integer columns, you may now choose from a list of global currencies. You can set the default currency in document settings. Learn more about document settings.","title":"International Currencies"},{"location":"newsletters/2021-09/#learning-grist","text":"","title":"Learning Grist"},{"location":"newsletters/2021-09/#build-with-grist-webinar","text":"Join Grist experts on a live webinar to learn the tips and tricks that\u2019ll help you become a Grist power creator. \ud83d\udcaa The webinar will go live on Monday October 18th at 3:00pm US Eastern Time (New York). SIGN UP FOR WEBINAR","title":"Build with Grist Webinar"},{"location":"newsletters/2021-09/#are-youpython-curious","text":"There are many online resources for learning Python. One of Grist\u2019s developers, Alex Hall, has a side project for learning Python called futurecoder. We recommend it! GO TO FUTURECODER","title":"Are you...Python curious?"},{"location":"newsletters/2021-09/#community-highlights","text":"Extracting months and quarters from dates. If you have a date column, you may want to summarize those dates by month or quarter. Embedding read-only Google Maps. Learn how to embed a Google Map into a Grist document. Creating required fields. It is possible to check if required fields have been filled, or not.","title":"Community Highlights"},{"location":"newsletters/2021-09/#help-spread-the-word","text":"If you\u2019re interested in helping Grist grow, consider leaving a review on product review sites. Here\u2019s short list where your review could make a big impact. Thank you! \ud83d\ude4f G2 Capterra TrustRadius","title":"Help spread the word?"},{"location":"newsletters/2021-09/#new-templates","text":"","title":"New Templates"},{"location":"newsletters/2021-09/#rental-management","text":"Track tenants, leases, and income and expenses related to rental properties in one place. GO TO TEMPLATE","title":"Rental Management"},{"location":"newsletters/2021-09/#corporate-funding","text":"Easily plan and summarize a company\u2019s funding structure. GO TO TEMPLATE","title":"Corporate Funding"},{"location":"newsletters/2021-09/#general-ledger","text":"Build a general ledger of income and expenses related to multiple companies, and summarize data in helpful dashboards. GO TO TEMPLATE","title":"General Ledger"},{"location":"newsletters/2021-09/#sports-league-standings","text":"Track a sports leagues\u2019 matches and automatically generate the season\u2019s standings. GO TO TEMPLATE","title":"Sports League Standings"},{"location":"newsletters/2021-09/#dd-combat-tracker","text":"Dungeon masters, use Grist to easily plan encounters, calculate key figures, and keep track of combat. (Dice roller included.) GO TO TEMPLATE Have questions, feedback, or need help? Search our Help Center , watch video tutorials , join our Community , or contact us at support@getgrist.com .","title":"D&amp;D Combat Tracker"},{"location":"newsletters/2021-10/","text":"October 2021 Newsletter # /* restore some poorly overridden defaults */ .newsletter-header .table { background-color: initial; border: initial; } .newsletter-header .table > tbody > tr > td { padding: initial; border: initial; vertical-align: initial; } .newsletter-header img.header-img { padding: initial; max-width: initial; display: initial; padding: initial; line-height: initial; background-color: initial; border: initial; border-radius: initial; margin: initial; } /* copy newsletter styles, with a prefix for sufficient specificity */ .newsletter-header .header { border: none; padding: 0; margin: 0; } .newsletter-header table > tbody > tr > td.header-image { width: 80px; padding-right: 16px; } .newsletter-header table > tbody > tr > td.header-text { background-color: #c4ffcd; padding: 16px 36px; } .newsletter-header table.header-top { border: none; padding: 0; margin: 0; width: 100%; } .header-title { font-family: Helvetica Neue, Helvetica, Arial, sans-serif; font-size: 24px; line-height: 28px; } .header-month { } .header-welcome { margin-top: 12px; color: #666666; } Grist for the Mill October 2021 \u2022 getgrist.com Welcome to our monthly newsletter of updates and tips for Grist users. What\u2019s New # Editing Choices # You can now edit existing choice values and apply those edits to your data automatically! Inline Links # Text fields now automatically convert URLs into hyperlinks, including in cells that contain both plaintext and URLs. Preview Changes in Incremental Imports # When importing additional data to an existing table, and using a merge key to match duplicate records, you can now preview changes to your data before committing to the import. Learn more . Learning Grist # Build with Grist Webinar # Sign up for November\u2019s Webinar Join Grist experts on a live webinar to learn Grist best practices. Half the webinar is dedicated to a live Q&A where you can get answers to your questions. \ud83d\udca1 The webinar will go live on Thursday, November 18th at 12:00pm US Eastern Time (New York). SIGN UP FOR WEBINAR Watch October\u2019s Webinar Recording On October 18th we held our first Build with Grist webinar, focused on best practices to get the most out of Grist. Grist CEO Dmitry Sagalovskiy shared tips on adapting data from a spreadsheet to a database using the DRY principle, and building dashboards using linked widgets. Other topics covered include finding the most recent value from a list of historical records, filtering by several fields, understanding the lookup function and reference lookups, and more. WATCH RECORDING Access Rules Video # Limiting access for team members Access rules are a beta feature of Grist which make it possible to limit access to parts of your data based on custom rules. The rules can be very granular and grant view or edit permissions based on a number of variables. The most common use of access rules is for teams who want to limit which records team members can see. For example, it is often desirable for sales representatives to only see records related to their owns sales, while their manager can see all records. We cover how to set up those rules in a 5 minute video. WATCH VIDEO Community Highlights # Overtime Calculator. Automatically calculate and keep track of weekly overtime rates. Calculating terms. Suppose you sell memberships that last 12 months and want to automatically calculate membership expiration dates. Learn how to calculate future dates. New Templates # Account-based Sales Team # Track your sales team\u2019s accounts, contacts, and deals. Access rules limit sales reps access to viewing and editing only their deals, contacts, and accounts. GO TO TEMPLATE Time Tracking & Invoicing # Quickly record time spent on projects, summarize it, and create invoices. GO TO TEMPLATE Expert Witness Database # Create a simple database of expert witnesses that may be called to testify on the stand. GO TO TEMPLATE Cap Table # Keep track of shareholders, issued shares and options, and percentage ownership. GO TO TEMPLATE Doggie Daycare # Manage your daycare business in one place. GO TO TEMPLATE Ceasar Cipher # Roman Emperor Julius Ceasar used the Ceasar Cipher to encrypt messages. Write a message to encrypt it with this ancient method. GO TO TEMPLATE Help spread the word? # If you\u2019re interested in helping Grist grow, consider leaving a review on product review sites. Here\u2019s short list where your review could make a big impact. Thank you! \ud83d\ude4f G2 Capterra TrustRadius Have questions, feedback, or need help? Search our Help Center , watch video tutorials , join our Community , or contact us at support@getgrist.com .","title":"2021/10"},{"location":"newsletters/2021-10/#october-2021-newsletter","text":"/* restore some poorly overridden defaults */ .newsletter-header .table { background-color: initial; border: initial; } .newsletter-header .table > tbody > tr > td { padding: initial; border: initial; vertical-align: initial; } .newsletter-header img.header-img { padding: initial; max-width: initial; display: initial; padding: initial; line-height: initial; background-color: initial; border: initial; border-radius: initial; margin: initial; } /* copy newsletter styles, with a prefix for sufficient specificity */ .newsletter-header .header { border: none; padding: 0; margin: 0; } .newsletter-header table > tbody > tr > td.header-image { width: 80px; padding-right: 16px; } .newsletter-header table > tbody > tr > td.header-text { background-color: #c4ffcd; padding: 16px 36px; } .newsletter-header table.header-top { border: none; padding: 0; margin: 0; width: 100%; } .header-title { font-family: Helvetica Neue, Helvetica, Arial, sans-serif; font-size: 24px; line-height: 28px; } .header-month { } .header-welcome { margin-top: 12px; color: #666666; } Grist for the Mill October 2021 \u2022 getgrist.com Welcome to our monthly newsletter of updates and tips for Grist users.","title":"October 2021 Newsletter"},{"location":"newsletters/2021-10/#whats-new","text":"","title":"What's New"},{"location":"newsletters/2021-10/#editing-choices","text":"You can now edit existing choice values and apply those edits to your data automatically!","title":"Editing Choices"},{"location":"newsletters/2021-10/#inline-links","text":"Text fields now automatically convert URLs into hyperlinks, including in cells that contain both plaintext and URLs.","title":"Inline Links"},{"location":"newsletters/2021-10/#preview-changes-in-incremental-imports","text":"When importing additional data to an existing table, and using a merge key to match duplicate records, you can now preview changes to your data before committing to the import. Learn more .","title":"Preview Changes in Incremental Imports"},{"location":"newsletters/2021-10/#learning-grist","text":"","title":"Learning Grist"},{"location":"newsletters/2021-10/#build-with-grist-webinar","text":"Sign up for November\u2019s Webinar Join Grist experts on a live webinar to learn Grist best practices. Half the webinar is dedicated to a live Q&A where you can get answers to your questions. \ud83d\udca1 The webinar will go live on Thursday, November 18th at 12:00pm US Eastern Time (New York). SIGN UP FOR WEBINAR Watch October\u2019s Webinar Recording On October 18th we held our first Build with Grist webinar, focused on best practices to get the most out of Grist. Grist CEO Dmitry Sagalovskiy shared tips on adapting data from a spreadsheet to a database using the DRY principle, and building dashboards using linked widgets. Other topics covered include finding the most recent value from a list of historical records, filtering by several fields, understanding the lookup function and reference lookups, and more. WATCH RECORDING","title":"Build with Grist Webinar"},{"location":"newsletters/2021-10/#access-rules-video","text":"Limiting access for team members Access rules are a beta feature of Grist which make it possible to limit access to parts of your data based on custom rules. The rules can be very granular and grant view or edit permissions based on a number of variables. The most common use of access rules is for teams who want to limit which records team members can see. For example, it is often desirable for sales representatives to only see records related to their owns sales, while their manager can see all records. We cover how to set up those rules in a 5 minute video. WATCH VIDEO","title":"Access Rules Video"},{"location":"newsletters/2021-10/#community-highlights","text":"Overtime Calculator. Automatically calculate and keep track of weekly overtime rates. Calculating terms. Suppose you sell memberships that last 12 months and want to automatically calculate membership expiration dates. Learn how to calculate future dates.","title":"Community Highlights"},{"location":"newsletters/2021-10/#new-templates","text":"","title":"New Templates"},{"location":"newsletters/2021-10/#account-based-sales-team","text":"Track your sales team\u2019s accounts, contacts, and deals. Access rules limit sales reps access to viewing and editing only their deals, contacts, and accounts. GO TO TEMPLATE","title":"Account-based Sales Team"},{"location":"newsletters/2021-10/#time-tracking-invoicing","text":"Quickly record time spent on projects, summarize it, and create invoices. GO TO TEMPLATE","title":"Time Tracking &amp; Invoicing"},{"location":"newsletters/2021-10/#expert-witness-database","text":"Create a simple database of expert witnesses that may be called to testify on the stand. GO TO TEMPLATE","title":"Expert Witness Database"},{"location":"newsletters/2021-10/#cap-table","text":"Keep track of shareholders, issued shares and options, and percentage ownership. GO TO TEMPLATE","title":"Cap Table"},{"location":"newsletters/2021-10/#doggie-daycare","text":"Manage your daycare business in one place. GO TO TEMPLATE","title":"Doggie Daycare"},{"location":"newsletters/2021-10/#ceasar-cipher","text":"Roman Emperor Julius Ceasar used the Ceasar Cipher to encrypt messages. Write a message to encrypt it with this ancient method. GO TO TEMPLATE","title":"Ceasar Cipher"},{"location":"newsletters/2021-10/#help-spread-the-word","text":"If you\u2019re interested in helping Grist grow, consider leaving a review on product review sites. Here\u2019s short list where your review could make a big impact. Thank you! \ud83d\ude4f G2 Capterra TrustRadius Have questions, feedback, or need help? Search our Help Center , watch video tutorials , join our Community , or contact us at support@getgrist.com .","title":"Help spread the word?"},{"location":"newsletters/2021-11/","text":"November 2021 Newsletter # /* restore some poorly overridden defaults */ .newsletter-header .table { background-color: initial; border: initial; } .newsletter-header .table > tbody > tr > td { padding: initial; border: initial; vertical-align: initial; } .newsletter-header img.header-img { padding: initial; max-width: initial; display: initial; padding: initial; line-height: initial; background-color: initial; border: initial; border-radius: initial; margin: initial; } /* copy newsletter styles, with a prefix for sufficient specificity */ .newsletter-header .header { border: none; padding: 0; margin: 0; } .newsletter-header table > tbody > tr > td.header-image { width: 80px; padding-right: 16px; } .newsletter-header table > tbody > tr > td.header-text { background-color: #42494B; padding: 16px 20px; } .newsletter-header table.header-top { border: none; padding: 0; margin: 0; width: 100%; } .header-title { font-family: Helvetica Neue, Helvetica, Arial, sans-serif; font-size: 24px; line-height: 28px; color: #FFFFFF; } .header-month { color: #FFFFFF; } .header-welcome { margin-top: 12px; color: #FFFFFF; } Grist for the Mill November 2021 \u2022 getgrist.com Welcome to our monthly newsletter of updates and tips for Grist users. What\u2019s New # Import Column Mapping # When importing additional data to an existing table in Grist, you can now map columns in your file to columns in the Grist table. Learn more. Filter on Hidden Columns # It is now possible to filter tables based on data in hidden columns. \ud83d\udc7b More Sorting Options # There are now more sorting options available, including natural sort. Learn more about additional sorting options. Note that Choice columns have a unique sorting option based on choice position in the choice configuration. Donut Chart # Grist now supports donut charts! Python 3.9 # Python 3.9 is the new default for new documents. Compared to previous default (2.7) it has some useful packages such as mathematical statistics functions. Learn more about supported Python versions. #1 Product of the Day on Product Hunt! # Grist achieved Product of the Day on Product Hunt! \ud83c\udf89\ud83d\ude80\ud83d\udc31\u200d\ud83d\ude80 Thank you for showing your support! Many Grist creators took time out of their day to leave kind reviews and words of encouragement. Thank you! \ud83d\ude4f Learning Grist # Build with Grist Webinar # Join Grist experts on a live webinar to learn Grist best practices. Wednesday December 15th at 3:00pm US Eastern Time (New York). SIGN UP FOR DECEMBER\u2019S WEBINAR During November\u2019s webinar, Grist VP of Product Anais Concepcion discussed the difference between typical formulas and trigger formulas, and when to use which. She also shared some of her favorite formulas and dove deep into how to use reference columns in lookup formulas. WATCH NOVEMBER\u2019S RECORDING Video: Finding Duplicate Values with a Formula # Formulas are a great way to find and flag duplicate values in a column. This video breaks down a formula that finds duplicates to deepen your understanding of formulas and Grist. WATCH VIDEO Community Highlights # Split text string into a list. If you import a long string of text, such as keywords separated by commas, it would be useful to break that string into a list of values that may be filtered and grouped in a Choice List column. Learn how. Identifying values that are not in another table. In the video above, the formula finds duplicates (or unique values) in the same column. Learn how to compare values across tables. New Templates # Recruiting # Collaboratively track job applicants, and attach resume and interview notes. GO TO TEMPLATE Portfolio Performance # Track your portfolio value and performance, including closed and open P&L. GO TO TEMPLATE Event Speakers # Track speakers booked for events, and flag events that are not yet fully booked. GO TO TEMPLATE Help spread the word? # If you\u2019re interested in helping Grist grow, consider leaving a review on product review sites. Here\u2019s short list where your review could make a big impact. Thank you! \ud83d\ude4f G2 Capterra TrustRadius Have questions, feedback, or need help? Search our Help Center , watch video tutorials , share ideas in our Community , or contact us at support@getgrist.com .","title":"2021/11"},{"location":"newsletters/2021-11/#november-2021-newsletter","text":"/* restore some poorly overridden defaults */ .newsletter-header .table { background-color: initial; border: initial; } .newsletter-header .table > tbody > tr > td { padding: initial; border: initial; vertical-align: initial; } .newsletter-header img.header-img { padding: initial; max-width: initial; display: initial; padding: initial; line-height: initial; background-color: initial; border: initial; border-radius: initial; margin: initial; } /* copy newsletter styles, with a prefix for sufficient specificity */ .newsletter-header .header { border: none; padding: 0; margin: 0; } .newsletter-header table > tbody > tr > td.header-image { width: 80px; padding-right: 16px; } .newsletter-header table > tbody > tr > td.header-text { background-color: #42494B; padding: 16px 20px; } .newsletter-header table.header-top { border: none; padding: 0; margin: 0; width: 100%; } .header-title { font-family: Helvetica Neue, Helvetica, Arial, sans-serif; font-size: 24px; line-height: 28px; color: #FFFFFF; } .header-month { color: #FFFFFF; } .header-welcome { margin-top: 12px; color: #FFFFFF; } Grist for the Mill November 2021 \u2022 getgrist.com Welcome to our monthly newsletter of updates and tips for Grist users.","title":"November 2021 Newsletter"},{"location":"newsletters/2021-11/#whats-new","text":"","title":"What's New"},{"location":"newsletters/2021-11/#import-column-mapping","text":"When importing additional data to an existing table in Grist, you can now map columns in your file to columns in the Grist table. Learn more.","title":"Import Column Mapping"},{"location":"newsletters/2021-11/#filter-on-hidden-columns","text":"It is now possible to filter tables based on data in hidden columns. \ud83d\udc7b","title":"Filter on Hidden Columns"},{"location":"newsletters/2021-11/#more-sorting-options","text":"There are now more sorting options available, including natural sort. Learn more about additional sorting options. Note that Choice columns have a unique sorting option based on choice position in the choice configuration.","title":"More Sorting Options"},{"location":"newsletters/2021-11/#donut-chart","text":"Grist now supports donut charts!","title":"Donut Chart"},{"location":"newsletters/2021-11/#python-39","text":"Python 3.9 is the new default for new documents. Compared to previous default (2.7) it has some useful packages such as mathematical statistics functions. Learn more about supported Python versions.","title":"Python 3.9"},{"location":"newsletters/2021-11/#1-product-of-the-day-on-product-hunt","text":"Grist achieved Product of the Day on Product Hunt! \ud83c\udf89\ud83d\ude80\ud83d\udc31\u200d\ud83d\ude80 Thank you for showing your support! Many Grist creators took time out of their day to leave kind reviews and words of encouragement. Thank you! \ud83d\ude4f","title":"#1 Product of the Day on Product Hunt!"},{"location":"newsletters/2021-11/#learning-grist","text":"","title":"Learning Grist"},{"location":"newsletters/2021-11/#build-with-grist-webinar","text":"Join Grist experts on a live webinar to learn Grist best practices. Wednesday December 15th at 3:00pm US Eastern Time (New York). SIGN UP FOR DECEMBER\u2019S WEBINAR During November\u2019s webinar, Grist VP of Product Anais Concepcion discussed the difference between typical formulas and trigger formulas, and when to use which. She also shared some of her favorite formulas and dove deep into how to use reference columns in lookup formulas. WATCH NOVEMBER\u2019S RECORDING","title":"Build with Grist Webinar"},{"location":"newsletters/2021-11/#video-finding-duplicate-values-with-a-formula","text":"Formulas are a great way to find and flag duplicate values in a column. This video breaks down a formula that finds duplicates to deepen your understanding of formulas and Grist. WATCH VIDEO","title":"Video: Finding Duplicate Values with a Formula"},{"location":"newsletters/2021-11/#community-highlights","text":"Split text string into a list. If you import a long string of text, such as keywords separated by commas, it would be useful to break that string into a list of values that may be filtered and grouped in a Choice List column. Learn how. Identifying values that are not in another table. In the video above, the formula finds duplicates (or unique values) in the same column. Learn how to compare values across tables.","title":"Community Highlights"},{"location":"newsletters/2021-11/#new-templates","text":"","title":"New Templates"},{"location":"newsletters/2021-11/#recruiting","text":"Collaboratively track job applicants, and attach resume and interview notes. GO TO TEMPLATE","title":"Recruiting"},{"location":"newsletters/2021-11/#portfolio-performance","text":"Track your portfolio value and performance, including closed and open P&L. GO TO TEMPLATE","title":"Portfolio Performance"},{"location":"newsletters/2021-11/#event-speakers","text":"Track speakers booked for events, and flag events that are not yet fully booked. GO TO TEMPLATE","title":"Event Speakers"},{"location":"newsletters/2021-11/#help-spread-the-word","text":"If you\u2019re interested in helping Grist grow, consider leaving a review on product review sites. Here\u2019s short list where your review could make a big impact. Thank you! \ud83d\ude4f G2 Capterra TrustRadius Have questions, feedback, or need help? Search our Help Center , watch video tutorials , share ideas in our Community , or contact us at support@getgrist.com .","title":"Help spread the word?"},{"location":"newsletters/2021-12/","text":"December 2021 Newsletter # /* restore some poorly overridden defaults */ .newsletter-header .table { background-color: initial; border: initial; } .newsletter-header .table > tbody > tr > td { padding: initial; border: initial; vertical-align: initial; } .newsletter-header img.header-img { padding: initial; max-width: initial; display: initial; padding: initial; line-height: initial; background-color: initial; border: initial; border-radius: initial; margin: initial; } /* copy newsletter styles, with a prefix for sufficient specificity */ .newsletter-header .header { border: none; padding: 0; margin: 0; } .newsletter-header table > tbody > tr > td.header-image { width: 80px; padding-right: 16px; } .newsletter-header table > tbody > tr > td.header-text { background-color: #42494B; padding: 16px 20px; } .newsletter-header table.header-top { border: none; padding: 0; margin: 0; width: 100%; } .header-title { font-family: Helvetica Neue, Helvetica, Arial, sans-serif; font-size: 24px; line-height: 28px; color: #FFFFFF; } .header-month { color: #FFFFFF; } .header-welcome { margin-top: 12px; color: #FFFFFF; } Grist for the Mill December 2021 \u2022 getgrist.com Welcome to our monthly newsletter of updates and tips for Grist users. What\u2019s New # Zapier Instant Trigger # Grist\u2019s Zapier integrations have gotten faster! Look for Zapier instant triggers when building your zaps. Learn more about triggers. Learning Grist # Webinar: Build Highly Productive Layouts # Learn how to go from tables to application-like layouts. We\u2019ll share tips on how to design for efficient workflows and data visualization. Wednesday January 19th at 3:00pm US Eastern Time. SIGN UP FOR JANUARY\u2019S WEBINAR Our December\u2019s webinar addressed how to import and summarize data in Grist. Dmitry shows how to create a Grist structure that pulls insights from your data with summary tables, and then import additional data to the existing structure. WATCH DECEMBER\u2019S RECORDING Video: Checking Required Fields # Sometimes, certain fields are required, such as the email column of a contacts table. Learn how to use a formula to check if required fields are filled, and modify other formulas to only evaluate records that meet requirements. WATCH VIDEO Community Highlights # Create dependent sub-categories. Dependent sub-categories can be useful for organizing data, e.g. vegetables > onion. Learn how to set dependent sub-categories. How to resolve errors due to empty cells. Formulas apply to all rows within a column. Thus when a row is empty, you\u2019ll get an error. It\u2019s correct but unsightly. Here\u2019s how to address it. Keeping a log of events. Sometime it\u2019s useful to keep a time-stamped log of events, such as records\u2019 status changes. Learn how to create one, with a video explanation embedded in the Grist document. New Templates # Habit Tracker # Set yourself up for success with your New Year resolutions! Build better habits with this simple weekly habit and progress tracker. GO TO TEMPLATE Internal Links Tracker for SEO # Optimize your SEO with an internal links tracker and simple auditing tool to find orphaned pages and most linked-to pages. GO TO TEMPLATE UTM Link Builder # Easily build and keep track of your marketing campaign\u2019s UTM parameters. GO TO TEMPLATE Meme Generator # Build memes right in Grist! GO TO TEMPLATE Help spread the word? # If you\u2019re interested in helping Grist grow, consider leaving a review on product review sites. Here\u2019s short list where your review could make a big impact. Thank you! \ud83d\ude4f G2 Capterra TrustRadius Have questions, feedback, or need help? Search our Help Center , watch video tutorials , share ideas in our Community , or contact us at support@getgrist.com .","title":"2021/12"},{"location":"newsletters/2021-12/#december-2021-newsletter","text":"/* restore some poorly overridden defaults */ .newsletter-header .table { background-color: initial; border: initial; } .newsletter-header .table > tbody > tr > td { padding: initial; border: initial; vertical-align: initial; } .newsletter-header img.header-img { padding: initial; max-width: initial; display: initial; padding: initial; line-height: initial; background-color: initial; border: initial; border-radius: initial; margin: initial; } /* copy newsletter styles, with a prefix for sufficient specificity */ .newsletter-header .header { border: none; padding: 0; margin: 0; } .newsletter-header table > tbody > tr > td.header-image { width: 80px; padding-right: 16px; } .newsletter-header table > tbody > tr > td.header-text { background-color: #42494B; padding: 16px 20px; } .newsletter-header table.header-top { border: none; padding: 0; margin: 0; width: 100%; } .header-title { font-family: Helvetica Neue, Helvetica, Arial, sans-serif; font-size: 24px; line-height: 28px; color: #FFFFFF; } .header-month { color: #FFFFFF; } .header-welcome { margin-top: 12px; color: #FFFFFF; } Grist for the Mill December 2021 \u2022 getgrist.com Welcome to our monthly newsletter of updates and tips for Grist users.","title":"December 2021 Newsletter"},{"location":"newsletters/2021-12/#whats-new","text":"","title":"What's New"},{"location":"newsletters/2021-12/#zapier-instant-trigger","text":"Grist\u2019s Zapier integrations have gotten faster! Look for Zapier instant triggers when building your zaps. Learn more about triggers.","title":"Zapier Instant Trigger"},{"location":"newsletters/2021-12/#learning-grist","text":"","title":"Learning Grist"},{"location":"newsletters/2021-12/#webinar-build-highly-productive-layouts","text":"Learn how to go from tables to application-like layouts. We\u2019ll share tips on how to design for efficient workflows and data visualization. Wednesday January 19th at 3:00pm US Eastern Time. SIGN UP FOR JANUARY\u2019S WEBINAR Our December\u2019s webinar addressed how to import and summarize data in Grist. Dmitry shows how to create a Grist structure that pulls insights from your data with summary tables, and then import additional data to the existing structure. WATCH DECEMBER\u2019S RECORDING","title":"Webinar: Build Highly Productive Layouts"},{"location":"newsletters/2021-12/#video-checking-required-fields","text":"Sometimes, certain fields are required, such as the email column of a contacts table. Learn how to use a formula to check if required fields are filled, and modify other formulas to only evaluate records that meet requirements. WATCH VIDEO","title":"Video: Checking Required Fields"},{"location":"newsletters/2021-12/#community-highlights","text":"Create dependent sub-categories. Dependent sub-categories can be useful for organizing data, e.g. vegetables > onion. Learn how to set dependent sub-categories. How to resolve errors due to empty cells. Formulas apply to all rows within a column. Thus when a row is empty, you\u2019ll get an error. It\u2019s correct but unsightly. Here\u2019s how to address it. Keeping a log of events. Sometime it\u2019s useful to keep a time-stamped log of events, such as records\u2019 status changes. Learn how to create one, with a video explanation embedded in the Grist document.","title":"Community Highlights"},{"location":"newsletters/2021-12/#new-templates","text":"","title":"New Templates"},{"location":"newsletters/2021-12/#habit-tracker","text":"Set yourself up for success with your New Year resolutions! Build better habits with this simple weekly habit and progress tracker. GO TO TEMPLATE","title":"Habit Tracker"},{"location":"newsletters/2021-12/#internal-links-tracker-for-seo","text":"Optimize your SEO with an internal links tracker and simple auditing tool to find orphaned pages and most linked-to pages. GO TO TEMPLATE","title":"Internal Links Tracker for SEO"},{"location":"newsletters/2021-12/#utm-link-builder","text":"Easily build and keep track of your marketing campaign\u2019s UTM parameters. GO TO TEMPLATE","title":"UTM Link Builder"},{"location":"newsletters/2021-12/#meme-generator","text":"Build memes right in Grist! GO TO TEMPLATE","title":"Meme Generator"},{"location":"newsletters/2021-12/#help-spread-the-word","text":"If you\u2019re interested in helping Grist grow, consider leaving a review on product review sites. Here\u2019s short list where your review could make a big impact. Thank you! \ud83d\ude4f G2 Capterra TrustRadius Have questions, feedback, or need help? Search our Help Center , watch video tutorials , share ideas in our Community , or contact us at support@getgrist.com .","title":"Help spread the word?"},{"location":"newsletters/2022-01/","text":"January 2022 Newsletter # /* restore some poorly overridden defaults */ .newsletter-header .table { background-color: initial; border: initial; } .newsletter-header .table > tbody > tr > td { padding: initial; border: initial; vertical-align: initial; } .newsletter-header img.header-img { padding: initial; max-width: initial; display: initial; padding: initial; line-height: initial; background-color: initial; border: initial; border-radius: initial; margin: initial; } /* copy newsletter styles, with a prefix for sufficient specificity */ .newsletter-header .header { border: none; padding: 0; margin: 0; } .newsletter-header table > tbody > tr > td.header-image { width: 80px; padding-right: 16px; } .newsletter-header table > tbody > tr > td.header-text { background-color: #42494B; padding: 16px 20px; } .newsletter-header table.header-top { border: none; padding: 0; margin: 0; width: 100%; } .header-title { font-family: Helvetica Neue, Helvetica, Arial, sans-serif; font-size: 24px; line-height: 28px; color: #FFFFFF; } .header-month { color: #FFFFFF; } .header-welcome { margin-top: 12px; color: #FFFFFF; } Grist for the Mill January 2022 \u2022 getgrist.com Welcome to our monthly newsletter of updates and tips for Grist users. What\u2019s New # Launch and Delete Document Tours # Several templates have document tours that explain the template\u2019s workflow. To relaunch the tour, click on \u201cTour of this Document\u201d near the bottom of the left panel. To delete the document tour from your copy of a template, click the little trash icon next to \u201cTour of this Document.\u201d Learning Grist # Webinar: Column Types and Version Control # Work like a Grist expert! Deepen your understanding of column types, backups, and working copies of documents. Wednesday February 16th at 3:00pm US Eastern Time. SIGN UP FOR FEBRUARY\u2019S WEBINAR On January\u2019s webinar, Natalie walked through how to build productive layouts in Grist. She covered same-record and reference-record linking, card views, sorting and filtering, summary tables, and simple charts. WATCH JANUARY\u2019S RECORDING Community Highlights # Pull up Gmail history for a particular contact. If you store contacts in Grist, and use Gmail to email them, there is a simple way to create a formula that will open Gmail to a list of conversations with that contact. Toggle a switch with a condition. Learn how to use a conditional formula in a toggle column so that the toggle switches on or off based on the value of data in other columns. Putting longer text in a card. Sometimes long text makes a row too tall and unsightly. It may be better to show long text in its own card and use same-record linking to select the card. Learn how. New Templates # Inventory Manager # Manage your inventory, and track incoming and outgoing orders. GO TO TEMPLATE Influencer Outreach # Keep track of interactions and progress in your influencer marketing campaigns. GO TO TEMPLATE Exercise Planner # Build workout plans in Grist, and quickly pull them up at the gym while you\u2019re pumping iron. \ud83d\udcaa GO TO TEMPLATE Software Deals Tracker # If you\u2019re always excited to try the latest SaaS products, then you\u2019ve probably bought many lifetime and annual deals. Track your deals and monitor upcoming expirations with this template. GO TO TEMPLATE Help spread the word? # If you\u2019re interested in helping Grist grow, consider leaving a review on product review sites. Here\u2019s short list where your review could make a big impact. Thank you! \ud83d\ude4f G2 Capterra TrustRadius We are here to support you # Have questions, feedback, or need help? Search our Help Center , watch video tutorials , share ideas in our Community , or contact us at support@getgrist.com .","title":"2022/01"},{"location":"newsletters/2022-01/#january-2022-newsletter","text":"/* restore some poorly overridden defaults */ .newsletter-header .table { background-color: initial; border: initial; } .newsletter-header .table > tbody > tr > td { padding: initial; border: initial; vertical-align: initial; } .newsletter-header img.header-img { padding: initial; max-width: initial; display: initial; padding: initial; line-height: initial; background-color: initial; border: initial; border-radius: initial; margin: initial; } /* copy newsletter styles, with a prefix for sufficient specificity */ .newsletter-header .header { border: none; padding: 0; margin: 0; } .newsletter-header table > tbody > tr > td.header-image { width: 80px; padding-right: 16px; } .newsletter-header table > tbody > tr > td.header-text { background-color: #42494B; padding: 16px 20px; } .newsletter-header table.header-top { border: none; padding: 0; margin: 0; width: 100%; } .header-title { font-family: Helvetica Neue, Helvetica, Arial, sans-serif; font-size: 24px; line-height: 28px; color: #FFFFFF; } .header-month { color: #FFFFFF; } .header-welcome { margin-top: 12px; color: #FFFFFF; } Grist for the Mill January 2022 \u2022 getgrist.com Welcome to our monthly newsletter of updates and tips for Grist users.","title":"January 2022 Newsletter"},{"location":"newsletters/2022-01/#whats-new","text":"","title":"What's New"},{"location":"newsletters/2022-01/#launch-and-delete-document-tours","text":"Several templates have document tours that explain the template\u2019s workflow. To relaunch the tour, click on \u201cTour of this Document\u201d near the bottom of the left panel. To delete the document tour from your copy of a template, click the little trash icon next to \u201cTour of this Document.\u201d","title":"Launch and Delete Document Tours"},{"location":"newsletters/2022-01/#learning-grist","text":"","title":"Learning Grist"},{"location":"newsletters/2022-01/#webinar-column-types-and-version-control","text":"Work like a Grist expert! Deepen your understanding of column types, backups, and working copies of documents. Wednesday February 16th at 3:00pm US Eastern Time. SIGN UP FOR FEBRUARY\u2019S WEBINAR On January\u2019s webinar, Natalie walked through how to build productive layouts in Grist. She covered same-record and reference-record linking, card views, sorting and filtering, summary tables, and simple charts. WATCH JANUARY\u2019S RECORDING","title":"Webinar: Column Types and Version Control"},{"location":"newsletters/2022-01/#community-highlights","text":"Pull up Gmail history for a particular contact. If you store contacts in Grist, and use Gmail to email them, there is a simple way to create a formula that will open Gmail to a list of conversations with that contact. Toggle a switch with a condition. Learn how to use a conditional formula in a toggle column so that the toggle switches on or off based on the value of data in other columns. Putting longer text in a card. Sometimes long text makes a row too tall and unsightly. It may be better to show long text in its own card and use same-record linking to select the card. Learn how.","title":"Community Highlights"},{"location":"newsletters/2022-01/#new-templates","text":"","title":"New Templates"},{"location":"newsletters/2022-01/#inventory-manager","text":"Manage your inventory, and track incoming and outgoing orders. GO TO TEMPLATE","title":"Inventory Manager"},{"location":"newsletters/2022-01/#influencer-outreach","text":"Keep track of interactions and progress in your influencer marketing campaigns. GO TO TEMPLATE","title":"Influencer Outreach"},{"location":"newsletters/2022-01/#exercise-planner","text":"Build workout plans in Grist, and quickly pull them up at the gym while you\u2019re pumping iron. \ud83d\udcaa GO TO TEMPLATE","title":"Exercise Planner"},{"location":"newsletters/2022-01/#software-deals-tracker","text":"If you\u2019re always excited to try the latest SaaS products, then you\u2019ve probably bought many lifetime and annual deals. Track your deals and monitor upcoming expirations with this template. GO TO TEMPLATE","title":"Software Deals Tracker"},{"location":"newsletters/2022-01/#help-spread-the-word","text":"If you\u2019re interested in helping Grist grow, consider leaving a review on product review sites. Here\u2019s short list where your review could make a big impact. Thank you! \ud83d\ude4f G2 Capterra TrustRadius","title":"Help spread the word?"},{"location":"newsletters/2022-01/#we-are-here-to-support-you","text":"Have questions, feedback, or need help? Search our Help Center , watch video tutorials , share ideas in our Community , or contact us at support@getgrist.com .","title":"We are here to support you"},{"location":"newsletters/2022-02/","text":"February 2022 Newsletter # /* restore some poorly overridden defaults */ .newsletter-header .table { background-color: initial; border: initial; } .newsletter-header .table > tbody > tr > td { padding: initial; border: initial; vertical-align: initial; } .newsletter-header img.header-img { padding: initial; max-width: initial; display: initial; padding: initial; line-height: initial; background-color: initial; border: initial; border-radius: initial; margin: initial; } /* copy newsletter styles, with a prefix for sufficient specificity */ .newsletter-header .header { border: none; padding: 0; margin: 0; } .newsletter-header table > tbody > tr > td.header-image { width: 80px; padding-right: 16px; } .newsletter-header table > tbody > tr > td.header-text { background-color: #42494B; padding: 16px 20px; } .newsletter-header table.header-top { border: none; padding: 0; margin: 0; width: 100%; } .header-title { font-family: Helvetica Neue, Helvetica, Arial, sans-serif; font-size: 24px; line-height: 28px; color: #FFFFFF; } .header-month { color: #FFFFFF; } .header-welcome { margin-top: 12px; color: #FFFFFF; } Grist for the Mill February 2022 \u2022 getgrist.com Welcome to our monthly newsletter of updates and tips for Grist users. What\u2019s New # Custom Widgets Menu # Adding custom widgets just got easier! Select from a dropdown of premade widgets that are easily configurable in the creator panel. Custom widgets include Markdown editor Action button View image from URL Interactive map Invoices Print labels API inspector \u2026and more! Access Rules for Anonymous Users # Granular access rules may now restrict publicly-shared, editable documents. A new user attribute, user.SessionID, makes it possible to limit which data visitors to your document may see or edit. This opens up new use cases, such as simple polling and community-moderated crowdsourced lists . TAKE OUR POLL Two Factor Authentication # Grist now supports two factor authentication for email + password logins. Navigate to your profile settings to configure two-factor authentication with either text messages, or an authenticator app. Cell Context Menu # Right-clicking on any cell now opens a menu that makes editing data in Grist more convenient. Learning Grist # Webinar: Granular Access Rules # Learn how to create access rules that determine who can see which columns, tables, or rows of your data. Wednesday March 16th at 3:00pm US Eastern Time. SIGN UP FOR MARCH\u2019S WEBINAR On February\u2019s webinar, Anais walked through column types and formatting, automatic backups, and how to work on forks of your document. WATCH FEBRUARY\u2019S RECORDING Community Highlights # Document tours. Our templates often have document tours. This is not yet a polished feature for users, but it\u2019s easy to do if you would like it. Here\u2019s how. Compare a value to a corresponding value n days ago. Say you need to compare a value such as hospitalizations to hospitalizations 5 days ago. Natalie walks through a formula to do just that. Sum total from referencing records. Suppose you bill for multiple services on the same invoice, and in Grist have several Services records pointing to the same Invoice records. Learn how to sum the total hours per invoice. New Templates # Crowdsourced Lists # Access rules make it easier to moderate crowdsourced lists. This template has access rules that allow contributors to add new records, and edit or update their contributions \u2014 without signing in. Contributors may view all records, but cannot edit or delete someone else\u2019s contributions. Moderators can edit or delete any data, and they may also add new moderators to the list. This template also makes use of the map widget. GO TO TEMPLATE Simple Poll # With the right set of access rules, you can create polls in Grist! This template reveals how. GO TO TEMPLATE Digital Sales CRM # Track the sale of digital products such as courses, e-books, membership programs, and more in a simple CRM. GO TO TEMPLATE Health Insurance Comparison # Create an easy-to-use calculator for your employees to compare health insurance plans offered by your organization. GO TO TEMPLATE Help spread the word? # If you\u2019re interested in helping Grist grow, consider leaving a review on product review sites. Here\u2019s short list where your review could make a big impact. Thank you! \ud83d\ude4f G2 Capterra TrustRadius We are here to support you # Have questions, feedback, or need help? Search our Help Center , watch video tutorials , share ideas in our Community , or contact us at support@getgrist.com .","title":"2022/02"},{"location":"newsletters/2022-02/#february-2022-newsletter","text":"/* restore some poorly overridden defaults */ .newsletter-header .table { background-color: initial; border: initial; } .newsletter-header .table > tbody > tr > td { padding: initial; border: initial; vertical-align: initial; } .newsletter-header img.header-img { padding: initial; max-width: initial; display: initial; padding: initial; line-height: initial; background-color: initial; border: initial; border-radius: initial; margin: initial; } /* copy newsletter styles, with a prefix for sufficient specificity */ .newsletter-header .header { border: none; padding: 0; margin: 0; } .newsletter-header table > tbody > tr > td.header-image { width: 80px; padding-right: 16px; } .newsletter-header table > tbody > tr > td.header-text { background-color: #42494B; padding: 16px 20px; } .newsletter-header table.header-top { border: none; padding: 0; margin: 0; width: 100%; } .header-title { font-family: Helvetica Neue, Helvetica, Arial, sans-serif; font-size: 24px; line-height: 28px; color: #FFFFFF; } .header-month { color: #FFFFFF; } .header-welcome { margin-top: 12px; color: #FFFFFF; } Grist for the Mill February 2022 \u2022 getgrist.com Welcome to our monthly newsletter of updates and tips for Grist users.","title":"February 2022 Newsletter"},{"location":"newsletters/2022-02/#whats-new","text":"","title":"What's New"},{"location":"newsletters/2022-02/#custom-widgets-menu","text":"Adding custom widgets just got easier! Select from a dropdown of premade widgets that are easily configurable in the creator panel. Custom widgets include Markdown editor Action button View image from URL Interactive map Invoices Print labels API inspector \u2026and more!","title":"Custom Widgets Menu"},{"location":"newsletters/2022-02/#access-rules-for-anonymous-users","text":"Granular access rules may now restrict publicly-shared, editable documents. A new user attribute, user.SessionID, makes it possible to limit which data visitors to your document may see or edit. This opens up new use cases, such as simple polling and community-moderated crowdsourced lists . TAKE OUR POLL","title":"Access Rules for Anonymous Users"},{"location":"newsletters/2022-02/#two-factor-authentication","text":"Grist now supports two factor authentication for email + password logins. Navigate to your profile settings to configure two-factor authentication with either text messages, or an authenticator app.","title":"Two Factor Authentication"},{"location":"newsletters/2022-02/#cell-context-menu","text":"Right-clicking on any cell now opens a menu that makes editing data in Grist more convenient.","title":"Cell Context Menu"},{"location":"newsletters/2022-02/#learning-grist","text":"","title":"Learning Grist"},{"location":"newsletters/2022-02/#webinar-granular-access-rules","text":"Learn how to create access rules that determine who can see which columns, tables, or rows of your data. Wednesday March 16th at 3:00pm US Eastern Time. SIGN UP FOR MARCH\u2019S WEBINAR On February\u2019s webinar, Anais walked through column types and formatting, automatic backups, and how to work on forks of your document. WATCH FEBRUARY\u2019S RECORDING","title":"Webinar: Granular Access Rules"},{"location":"newsletters/2022-02/#community-highlights","text":"Document tours. Our templates often have document tours. This is not yet a polished feature for users, but it\u2019s easy to do if you would like it. Here\u2019s how. Compare a value to a corresponding value n days ago. Say you need to compare a value such as hospitalizations to hospitalizations 5 days ago. Natalie walks through a formula to do just that. Sum total from referencing records. Suppose you bill for multiple services on the same invoice, and in Grist have several Services records pointing to the same Invoice records. Learn how to sum the total hours per invoice.","title":"Community Highlights"},{"location":"newsletters/2022-02/#new-templates","text":"","title":"New Templates"},{"location":"newsletters/2022-02/#crowdsourced-lists","text":"Access rules make it easier to moderate crowdsourced lists. This template has access rules that allow contributors to add new records, and edit or update their contributions \u2014 without signing in. Contributors may view all records, but cannot edit or delete someone else\u2019s contributions. Moderators can edit or delete any data, and they may also add new moderators to the list. This template also makes use of the map widget. GO TO TEMPLATE","title":"Crowdsourced Lists"},{"location":"newsletters/2022-02/#simple-poll","text":"With the right set of access rules, you can create polls in Grist! This template reveals how. GO TO TEMPLATE","title":"Simple Poll"},{"location":"newsletters/2022-02/#digital-sales-crm","text":"Track the sale of digital products such as courses, e-books, membership programs, and more in a simple CRM. GO TO TEMPLATE","title":"Digital Sales CRM"},{"location":"newsletters/2022-02/#health-insurance-comparison","text":"Create an easy-to-use calculator for your employees to compare health insurance plans offered by your organization. GO TO TEMPLATE","title":"Health Insurance Comparison"},{"location":"newsletters/2022-02/#help-spread-the-word","text":"If you\u2019re interested in helping Grist grow, consider leaving a review on product review sites. Here\u2019s short list where your review could make a big impact. Thank you! \ud83d\ude4f G2 Capterra TrustRadius","title":"Help spread the word?"},{"location":"newsletters/2022-02/#we-are-here-to-support-you","text":"Have questions, feedback, or need help? Search our Help Center , watch video tutorials , share ideas in our Community , or contact us at support@getgrist.com .","title":"We are here to support you"}]}